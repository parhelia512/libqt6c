#pragma once
#ifndef SRCQT6C_LIBQVALIDATOR_H
#define SRCQT6C_LIBQVALIDATOR_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqanystringview.h"
#include "libqbindingstorage.h"
#include "libqevent.h"
#include "libqlocale.h"
#include "libqmetaobject.h"
#include "libqobject.h"
#include "libqregularexpression.h"
#include <string.h>
#include "libqthread.h"
#include "libqvariant.h"

QValidator* q_validator_new();
QValidator* q_validator_new2(void* parent);
QMetaObject* q_validator_meta_object(void* self);
void* q_validator_metacast(void* self, const char* param1);
int32_t q_validator_metacall(void* self, int64_t param1, int param2, void* param3);
void q_validator_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_validator_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_validator_tr(const char* s);
void q_validator_set_locale(void* self, void* locale);
QLocale* q_validator_locale(void* self);
int64_t q_validator_validate(void* self, const char* param1, int* param2);
void q_validator_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_validator_qbase_validate(void* self, const char* param1, int* param2);
void q_validator_fixup(void* self, const char* param1);
void q_validator_on_fixup(void* self, void (*slot)(void*, const char*));
void q_validator_qbase_fixup(void* self, const char* param1);
void q_validator_changed(void* self);
void q_validator_on_changed(void* self, void (*slot)(void*));
const char* q_validator_tr2(const char* s, const char* c);
const char* q_validator_tr3(const char* s, const char* c, int n);
const char* q_validator_object_name(void* self);
void q_validator_set_object_name(void* self, const char* name);
bool q_validator_is_widget_type(void* self);
bool q_validator_is_window_type(void* self);
bool q_validator_is_quick_item_type(void* self);
bool q_validator_signals_blocked(void* self);
bool q_validator_block_signals(void* self, bool b);
QThread* q_validator_thread(void* self);
void q_validator_move_to_thread(void* self, void* thread);
int32_t q_validator_start_timer(void* self, int interval);
void q_validator_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_validator_children(void* self);
void q_validator_set_parent(void* self, void* parent);
void q_validator_install_event_filter(void* self, void* filterObj);
void q_validator_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_validator_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_validator_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_validator_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_validator_disconnect_with_q_meta_object_connection(void* param1);
void q_validator_dump_object_tree(void* self);
void q_validator_dump_object_info(void* self);
bool q_validator_set_property(void* self, const char* name, void* value);
QVariant* q_validator_property(void* self, const char* name);
const char** q_validator_dynamic_property_names(void* self);
QBindingStorage* q_validator_binding_storage(void* self);
QBindingStorage* q_validator_binding_storage2(void* self);
void q_validator_destroyed(void* self);
void q_validator_on_destroyed(void* self, void (*slot)(void*));
QObject* q_validator_parent(void* self);
bool q_validator_inherits(void* self, const char* classname);
void q_validator_delete_later(void* self);
int32_t q_validator_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_validator_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_validator_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_validator_destroyed1(void* self, void* param1);
void q_validator_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_validator_event(void* self, void* event);
bool q_validator_qbase_event(void* self, void* event);
void q_validator_on_event(void* self, bool (*slot)(void*, void*));
bool q_validator_event_filter(void* self, void* watched, void* event);
bool q_validator_qbase_event_filter(void* self, void* watched, void* event);
void q_validator_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_validator_timer_event(void* self, void* event);
void q_validator_qbase_timer_event(void* self, void* event);
void q_validator_on_timer_event(void* self, void (*slot)(void*, void*));
void q_validator_child_event(void* self, void* event);
void q_validator_qbase_child_event(void* self, void* event);
void q_validator_on_child_event(void* self, void (*slot)(void*, void*));
void q_validator_custom_event(void* self, void* event);
void q_validator_qbase_custom_event(void* self, void* event);
void q_validator_on_custom_event(void* self, void (*slot)(void*, void*));
void q_validator_connect_notify(void* self, void* signal);
void q_validator_qbase_connect_notify(void* self, void* signal);
void q_validator_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_validator_disconnect_notify(void* self, void* signal);
void q_validator_qbase_disconnect_notify(void* self, void* signal);
void q_validator_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QObject* q_validator_sender(void* self);
QObject* q_validator_qbase_sender(void* self);
void q_validator_on_sender(void* self, QObject* (*slot)());
int32_t q_validator_sender_signal_index(void* self);
int32_t q_validator_qbase_sender_signal_index(void* self);
void q_validator_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_validator_receivers(void* self, const char* signal);
int32_t q_validator_qbase_receivers(void* self, const char* signal);
void q_validator_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_validator_is_signal_connected(void* self, void* signal);
bool q_validator_qbase_is_signal_connected(void* self, void* signal);
void q_validator_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_validator_delete(void* self);

QIntValidator* q_intvalidator_new();
QIntValidator* q_intvalidator_new2(int bottom, int top);
QIntValidator* q_intvalidator_new3(void* parent);
QIntValidator* q_intvalidator_new4(int bottom, int top, void* parent);
QMetaObject* q_intvalidator_meta_object(void* self);
void* q_intvalidator_metacast(void* self, const char* param1);
int32_t q_intvalidator_metacall(void* self, int64_t param1, int param2, void* param3);
void q_intvalidator_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_intvalidator_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_intvalidator_tr(const char* s);
int64_t q_intvalidator_validate(void* self, const char* param1, int* param2);
void q_intvalidator_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_intvalidator_qbase_validate(void* self, const char* param1, int* param2);
void q_intvalidator_fixup(void* self, const char* input);
void q_intvalidator_on_fixup(void* self, void (*slot)(void*, const char*));
void q_intvalidator_qbase_fixup(void* self, const char* input);
void q_intvalidator_set_bottom(void* self, int bottom);
void q_intvalidator_set_top(void* self, int top);
void q_intvalidator_set_range(void* self, int bottom, int top);
int32_t q_intvalidator_bottom(void* self);
int32_t q_intvalidator_top(void* self);
void q_intvalidator_bottom_changed(void* self, int bottom);
void q_intvalidator_on_bottom_changed(void* self, void (*slot)(void*, int));
void q_intvalidator_top_changed(void* self, int top);
void q_intvalidator_on_top_changed(void* self, void (*slot)(void*, int));
const char* q_intvalidator_tr2(const char* s, const char* c);
const char* q_intvalidator_tr3(const char* s, const char* c, int n);
void q_intvalidator_set_locale(void* self, void* locale);
QLocale* q_intvalidator_locale(void* self);
void q_intvalidator_changed(void* self);
void q_intvalidator_on_changed(void* self, void (*slot)(void*));
const char* q_intvalidator_object_name(void* self);
void q_intvalidator_set_object_name(void* self, const char* name);
bool q_intvalidator_is_widget_type(void* self);
bool q_intvalidator_is_window_type(void* self);
bool q_intvalidator_is_quick_item_type(void* self);
bool q_intvalidator_signals_blocked(void* self);
bool q_intvalidator_block_signals(void* self, bool b);
QThread* q_intvalidator_thread(void* self);
void q_intvalidator_move_to_thread(void* self, void* thread);
int32_t q_intvalidator_start_timer(void* self, int interval);
void q_intvalidator_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_intvalidator_children(void* self);
void q_intvalidator_set_parent(void* self, void* parent);
void q_intvalidator_install_event_filter(void* self, void* filterObj);
void q_intvalidator_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_intvalidator_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_intvalidator_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_intvalidator_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_intvalidator_disconnect_with_q_meta_object_connection(void* param1);
void q_intvalidator_dump_object_tree(void* self);
void q_intvalidator_dump_object_info(void* self);
bool q_intvalidator_set_property(void* self, const char* name, void* value);
QVariant* q_intvalidator_property(void* self, const char* name);
const char** q_intvalidator_dynamic_property_names(void* self);
QBindingStorage* q_intvalidator_binding_storage(void* self);
QBindingStorage* q_intvalidator_binding_storage2(void* self);
void q_intvalidator_destroyed(void* self);
void q_intvalidator_on_destroyed(void* self, void (*slot)(void*));
QObject* q_intvalidator_parent(void* self);
bool q_intvalidator_inherits(void* self, const char* classname);
void q_intvalidator_delete_later(void* self);
int32_t q_intvalidator_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_intvalidator_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_intvalidator_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_intvalidator_destroyed1(void* self, void* param1);
void q_intvalidator_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_intvalidator_event(void* self, void* event);
bool q_intvalidator_qbase_event(void* self, void* event);
void q_intvalidator_on_event(void* self, bool (*slot)(void*, void*));
bool q_intvalidator_event_filter(void* self, void* watched, void* event);
bool q_intvalidator_qbase_event_filter(void* self, void* watched, void* event);
void q_intvalidator_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_intvalidator_timer_event(void* self, void* event);
void q_intvalidator_qbase_timer_event(void* self, void* event);
void q_intvalidator_on_timer_event(void* self, void (*slot)(void*, void*));
void q_intvalidator_child_event(void* self, void* event);
void q_intvalidator_qbase_child_event(void* self, void* event);
void q_intvalidator_on_child_event(void* self, void (*slot)(void*, void*));
void q_intvalidator_custom_event(void* self, void* event);
void q_intvalidator_qbase_custom_event(void* self, void* event);
void q_intvalidator_on_custom_event(void* self, void (*slot)(void*, void*));
void q_intvalidator_connect_notify(void* self, void* signal);
void q_intvalidator_qbase_connect_notify(void* self, void* signal);
void q_intvalidator_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_intvalidator_disconnect_notify(void* self, void* signal);
void q_intvalidator_qbase_disconnect_notify(void* self, void* signal);
void q_intvalidator_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QObject* q_intvalidator_sender(void* self);
QObject* q_intvalidator_qbase_sender(void* self);
void q_intvalidator_on_sender(void* self, QObject* (*slot)());
int32_t q_intvalidator_sender_signal_index(void* self);
int32_t q_intvalidator_qbase_sender_signal_index(void* self);
void q_intvalidator_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_intvalidator_receivers(void* self, const char* signal);
int32_t q_intvalidator_qbase_receivers(void* self, const char* signal);
void q_intvalidator_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_intvalidator_is_signal_connected(void* self, void* signal);
bool q_intvalidator_qbase_is_signal_connected(void* self, void* signal);
void q_intvalidator_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_intvalidator_delete(void* self);

QDoubleValidator* q_doublevalidator_new();
QDoubleValidator* q_doublevalidator_new2(double bottom, double top, int decimals);
QDoubleValidator* q_doublevalidator_new3(void* parent);
QDoubleValidator* q_doublevalidator_new4(double bottom, double top, int decimals, void* parent);
QMetaObject* q_doublevalidator_meta_object(void* self);
void* q_doublevalidator_metacast(void* self, const char* param1);
int32_t q_doublevalidator_metacall(void* self, int64_t param1, int param2, void* param3);
void q_doublevalidator_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_doublevalidator_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_doublevalidator_tr(const char* s);
int64_t q_doublevalidator_validate(void* self, const char* param1, int* param2);
void q_doublevalidator_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_doublevalidator_qbase_validate(void* self, const char* param1, int* param2);
void q_doublevalidator_fixup(void* self, const char* input);
void q_doublevalidator_on_fixup(void* self, void (*slot)(void*, const char*));
void q_doublevalidator_qbase_fixup(void* self, const char* input);
void q_doublevalidator_set_range(void* self, double bottom, double top, int decimals);
void q_doublevalidator_set_range2(void* self, double bottom, double top);
void q_doublevalidator_set_bottom(void* self, double bottom);
void q_doublevalidator_set_top(void* self, double top);
void q_doublevalidator_set_decimals(void* self, int decimals);
void q_doublevalidator_set_notation(void* self, int64_t notation);
double q_doublevalidator_bottom(void* self);
double q_doublevalidator_top(void* self);
int32_t q_doublevalidator_decimals(void* self);
int64_t q_doublevalidator_notation(void* self);
void q_doublevalidator_bottom_changed(void* self, double bottom);
void q_doublevalidator_on_bottom_changed(void* self, void (*slot)(void*, double));
void q_doublevalidator_top_changed(void* self, double top);
void q_doublevalidator_on_top_changed(void* self, void (*slot)(void*, double));
void q_doublevalidator_decimals_changed(void* self, int decimals);
void q_doublevalidator_on_decimals_changed(void* self, void (*slot)(void*, int));
void q_doublevalidator_notation_changed(void* self, int64_t notation);
void q_doublevalidator_on_notation_changed(void* self, void (*slot)(void*, int64_t));
const char* q_doublevalidator_tr2(const char* s, const char* c);
const char* q_doublevalidator_tr3(const char* s, const char* c, int n);
void q_doublevalidator_set_locale(void* self, void* locale);
QLocale* q_doublevalidator_locale(void* self);
void q_doublevalidator_changed(void* self);
void q_doublevalidator_on_changed(void* self, void (*slot)(void*));
const char* q_doublevalidator_object_name(void* self);
void q_doublevalidator_set_object_name(void* self, const char* name);
bool q_doublevalidator_is_widget_type(void* self);
bool q_doublevalidator_is_window_type(void* self);
bool q_doublevalidator_is_quick_item_type(void* self);
bool q_doublevalidator_signals_blocked(void* self);
bool q_doublevalidator_block_signals(void* self, bool b);
QThread* q_doublevalidator_thread(void* self);
void q_doublevalidator_move_to_thread(void* self, void* thread);
int32_t q_doublevalidator_start_timer(void* self, int interval);
void q_doublevalidator_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_doublevalidator_children(void* self);
void q_doublevalidator_set_parent(void* self, void* parent);
void q_doublevalidator_install_event_filter(void* self, void* filterObj);
void q_doublevalidator_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_doublevalidator_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_doublevalidator_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_doublevalidator_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_doublevalidator_disconnect_with_q_meta_object_connection(void* param1);
void q_doublevalidator_dump_object_tree(void* self);
void q_doublevalidator_dump_object_info(void* self);
bool q_doublevalidator_set_property(void* self, const char* name, void* value);
QVariant* q_doublevalidator_property(void* self, const char* name);
const char** q_doublevalidator_dynamic_property_names(void* self);
QBindingStorage* q_doublevalidator_binding_storage(void* self);
QBindingStorage* q_doublevalidator_binding_storage2(void* self);
void q_doublevalidator_destroyed(void* self);
void q_doublevalidator_on_destroyed(void* self, void (*slot)(void*));
QObject* q_doublevalidator_parent(void* self);
bool q_doublevalidator_inherits(void* self, const char* classname);
void q_doublevalidator_delete_later(void* self);
int32_t q_doublevalidator_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_doublevalidator_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_doublevalidator_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_doublevalidator_destroyed1(void* self, void* param1);
void q_doublevalidator_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_doublevalidator_event(void* self, void* event);
bool q_doublevalidator_qbase_event(void* self, void* event);
void q_doublevalidator_on_event(void* self, bool (*slot)(void*, void*));
bool q_doublevalidator_event_filter(void* self, void* watched, void* event);
bool q_doublevalidator_qbase_event_filter(void* self, void* watched, void* event);
void q_doublevalidator_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_doublevalidator_timer_event(void* self, void* event);
void q_doublevalidator_qbase_timer_event(void* self, void* event);
void q_doublevalidator_on_timer_event(void* self, void (*slot)(void*, void*));
void q_doublevalidator_child_event(void* self, void* event);
void q_doublevalidator_qbase_child_event(void* self, void* event);
void q_doublevalidator_on_child_event(void* self, void (*slot)(void*, void*));
void q_doublevalidator_custom_event(void* self, void* event);
void q_doublevalidator_qbase_custom_event(void* self, void* event);
void q_doublevalidator_on_custom_event(void* self, void (*slot)(void*, void*));
void q_doublevalidator_connect_notify(void* self, void* signal);
void q_doublevalidator_qbase_connect_notify(void* self, void* signal);
void q_doublevalidator_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_doublevalidator_disconnect_notify(void* self, void* signal);
void q_doublevalidator_qbase_disconnect_notify(void* self, void* signal);
void q_doublevalidator_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QObject* q_doublevalidator_sender(void* self);
QObject* q_doublevalidator_qbase_sender(void* self);
void q_doublevalidator_on_sender(void* self, QObject* (*slot)());
int32_t q_doublevalidator_sender_signal_index(void* self);
int32_t q_doublevalidator_qbase_sender_signal_index(void* self);
void q_doublevalidator_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_doublevalidator_receivers(void* self, const char* signal);
int32_t q_doublevalidator_qbase_receivers(void* self, const char* signal);
void q_doublevalidator_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_doublevalidator_is_signal_connected(void* self, void* signal);
bool q_doublevalidator_qbase_is_signal_connected(void* self, void* signal);
void q_doublevalidator_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_doublevalidator_delete(void* self);

QRegularExpressionValidator* q_regularexpressionvalidator_new();
QRegularExpressionValidator* q_regularexpressionvalidator_new2(void* re);
QRegularExpressionValidator* q_regularexpressionvalidator_new3(void* parent);
QRegularExpressionValidator* q_regularexpressionvalidator_new4(void* re, void* parent);
QMetaObject* q_regularexpressionvalidator_meta_object(void* self);
void* q_regularexpressionvalidator_metacast(void* self, const char* param1);
int32_t q_regularexpressionvalidator_metacall(void* self, int64_t param1, int param2, void* param3);
void q_regularexpressionvalidator_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_regularexpressionvalidator_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_regularexpressionvalidator_tr(const char* s);
int64_t q_regularexpressionvalidator_validate(void* self, const char* input, int* pos);
void q_regularexpressionvalidator_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_regularexpressionvalidator_qbase_validate(void* self, const char* input, int* pos);
QRegularExpression* q_regularexpressionvalidator_regular_expression(void* self);
void q_regularexpressionvalidator_set_regular_expression(void* self, void* re);
void q_regularexpressionvalidator_regular_expression_changed(void* self, void* re);
void q_regularexpressionvalidator_on_regular_expression_changed(void* self, void (*slot)(void*, void*));
const char* q_regularexpressionvalidator_tr2(const char* s, const char* c);
const char* q_regularexpressionvalidator_tr3(const char* s, const char* c, int n);
void q_regularexpressionvalidator_set_locale(void* self, void* locale);
QLocale* q_regularexpressionvalidator_locale(void* self);
void q_regularexpressionvalidator_changed(void* self);
void q_regularexpressionvalidator_on_changed(void* self, void (*slot)(void*));
const char* q_regularexpressionvalidator_object_name(void* self);
void q_regularexpressionvalidator_set_object_name(void* self, const char* name);
bool q_regularexpressionvalidator_is_widget_type(void* self);
bool q_regularexpressionvalidator_is_window_type(void* self);
bool q_regularexpressionvalidator_is_quick_item_type(void* self);
bool q_regularexpressionvalidator_signals_blocked(void* self);
bool q_regularexpressionvalidator_block_signals(void* self, bool b);
QThread* q_regularexpressionvalidator_thread(void* self);
void q_regularexpressionvalidator_move_to_thread(void* self, void* thread);
int32_t q_regularexpressionvalidator_start_timer(void* self, int interval);
void q_regularexpressionvalidator_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_regularexpressionvalidator_children(void* self);
void q_regularexpressionvalidator_set_parent(void* self, void* parent);
void q_regularexpressionvalidator_install_event_filter(void* self, void* filterObj);
void q_regularexpressionvalidator_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_regularexpressionvalidator_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_regularexpressionvalidator_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_regularexpressionvalidator_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_regularexpressionvalidator_disconnect_with_q_meta_object_connection(void* param1);
void q_regularexpressionvalidator_dump_object_tree(void* self);
void q_regularexpressionvalidator_dump_object_info(void* self);
bool q_regularexpressionvalidator_set_property(void* self, const char* name, void* value);
QVariant* q_regularexpressionvalidator_property(void* self, const char* name);
const char** q_regularexpressionvalidator_dynamic_property_names(void* self);
QBindingStorage* q_regularexpressionvalidator_binding_storage(void* self);
QBindingStorage* q_regularexpressionvalidator_binding_storage2(void* self);
void q_regularexpressionvalidator_destroyed(void* self);
void q_regularexpressionvalidator_on_destroyed(void* self, void (*slot)(void*));
QObject* q_regularexpressionvalidator_parent(void* self);
bool q_regularexpressionvalidator_inherits(void* self, const char* classname);
void q_regularexpressionvalidator_delete_later(void* self);
int32_t q_regularexpressionvalidator_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_regularexpressionvalidator_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_regularexpressionvalidator_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_regularexpressionvalidator_destroyed1(void* self, void* param1);
void q_regularexpressionvalidator_on_destroyed1(void* self, void (*slot)(void*, void*));
void q_regularexpressionvalidator_fixup(void* self, const char* param1);
void q_regularexpressionvalidator_qbase_fixup(void* self, const char* param1);
void q_regularexpressionvalidator_on_fixup(void* self, void (*slot)(void*, const char*));
bool q_regularexpressionvalidator_event(void* self, void* event);
bool q_regularexpressionvalidator_qbase_event(void* self, void* event);
void q_regularexpressionvalidator_on_event(void* self, bool (*slot)(void*, void*));
bool q_regularexpressionvalidator_event_filter(void* self, void* watched, void* event);
bool q_regularexpressionvalidator_qbase_event_filter(void* self, void* watched, void* event);
void q_regularexpressionvalidator_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_regularexpressionvalidator_timer_event(void* self, void* event);
void q_regularexpressionvalidator_qbase_timer_event(void* self, void* event);
void q_regularexpressionvalidator_on_timer_event(void* self, void (*slot)(void*, void*));
void q_regularexpressionvalidator_child_event(void* self, void* event);
void q_regularexpressionvalidator_qbase_child_event(void* self, void* event);
void q_regularexpressionvalidator_on_child_event(void* self, void (*slot)(void*, void*));
void q_regularexpressionvalidator_custom_event(void* self, void* event);
void q_regularexpressionvalidator_qbase_custom_event(void* self, void* event);
void q_regularexpressionvalidator_on_custom_event(void* self, void (*slot)(void*, void*));
void q_regularexpressionvalidator_connect_notify(void* self, void* signal);
void q_regularexpressionvalidator_qbase_connect_notify(void* self, void* signal);
void q_regularexpressionvalidator_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_regularexpressionvalidator_disconnect_notify(void* self, void* signal);
void q_regularexpressionvalidator_qbase_disconnect_notify(void* self, void* signal);
void q_regularexpressionvalidator_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QObject* q_regularexpressionvalidator_sender(void* self);
QObject* q_regularexpressionvalidator_qbase_sender(void* self);
void q_regularexpressionvalidator_on_sender(void* self, QObject* (*slot)());
int32_t q_regularexpressionvalidator_sender_signal_index(void* self);
int32_t q_regularexpressionvalidator_qbase_sender_signal_index(void* self);
void q_regularexpressionvalidator_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_regularexpressionvalidator_receivers(void* self, const char* signal);
int32_t q_regularexpressionvalidator_qbase_receivers(void* self, const char* signal);
void q_regularexpressionvalidator_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_regularexpressionvalidator_is_signal_connected(void* self, void* signal);
bool q_regularexpressionvalidator_qbase_is_signal_connected(void* self, void* signal);
void q_regularexpressionvalidator_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_regularexpressionvalidator_delete(void* self);

/// https://doc.qt.io/qt-6/qvalidator.html#types

typedef enum {
    QVALIDATOR_STATE_INVALID = 0,
    QVALIDATOR_STATE_INTERMEDIATE = 1,
    QVALIDATOR_STATE_ACCEPTABLE = 2
} QValidator__State;

typedef enum {
    QDOUBLEVALIDATOR_NOTATION_STANDARDNOTATION = 0,
    QDOUBLEVALIDATOR_NOTATION_SCIENTIFICNOTATION = 1
} QDoubleValidator__Notation;

#endif
