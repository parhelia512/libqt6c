#pragma once
#ifndef SRCQT6C_LIBQDATETIMEEDIT_H
#define SRCQT6C_LIBQDATETIMEEDIT_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqabstractspinbox.h"
#include "libqaction.h"
#include "libqevent.h"
#include "libqanystringview.h"
#include "libqbackingstore.h"
#include "libqbindingstorage.h"
#include "libqbitmap.h"
#include "libqcalendar.h"
#include "libqcalendarwidget.h"
#include "libqcursor.h"
#include "libqdatetime.h"
#include "libqfont.h"
#include "libqfontinfo.h"
#include "libqfontmetrics.h"
#include "libqgraphicseffect.h"
#include "libqgraphicsproxywidget.h"
#include "libqicon.h"
#include "libqkeysequence.h"
#include "libqlayout.h"
#include "libqlineedit.h"
#include "libqlocale.h"
#include "libqmargins.h"
#include "libqmetaobject.h"
#include "libqobject.h"
#include "libqpaintdevice.h"
#include "libqpaintengine.h"
#include "libqpainter.h"
#include "libqpalette.h"
#include "libqpixmap.h"
#include "libqpoint.h"
#include "libqrect.h"
#include "libqregion.h"
#include "libqscreen.h"
#include "libqsize.h"
#include "libqsizepolicy.h"
#include <string.h>
#include "libqstyle.h"
#include "libqstyleoption.h"
#include "libqthread.h"
#include "libqvariant.h"
#include "libqwidget.h"
#include "libqwindow.h"

QDateTimeEdit* q_datetimeedit_new(void* parent);
QDateTimeEdit* q_datetimeedit_new2();
QDateTimeEdit* q_datetimeedit_new3(void* dt);
QDateTimeEdit* q_datetimeedit_new4(void* d);
QDateTimeEdit* q_datetimeedit_new5(void* t);
QDateTimeEdit* q_datetimeedit_new6(void* dt, void* parent);
QDateTimeEdit* q_datetimeedit_new7(void* d, void* parent);
QDateTimeEdit* q_datetimeedit_new8(void* t, void* parent);
QMetaObject* q_datetimeedit_meta_object(void* self);
void* q_datetimeedit_metacast(void* self, const char* param1);
int32_t q_datetimeedit_metacall(void* self, int64_t param1, int param2, void* param3);
void q_datetimeedit_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_datetimeedit_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_datetimeedit_tr(const char* s);
QDateTime* q_datetimeedit_date_time(void* self);
QDate* q_datetimeedit_date(void* self);
QTime* q_datetimeedit_time(void* self);
QCalendar* q_datetimeedit_calendar(void* self);
void q_datetimeedit_set_calendar(void* self, void* calendar);
QDateTime* q_datetimeedit_minimum_date_time(void* self);
void q_datetimeedit_clear_minimum_date_time(void* self);
void q_datetimeedit_set_minimum_date_time(void* self, void* dt);
QDateTime* q_datetimeedit_maximum_date_time(void* self);
void q_datetimeedit_clear_maximum_date_time(void* self);
void q_datetimeedit_set_maximum_date_time(void* self, void* dt);
void q_datetimeedit_set_date_time_range(void* self, void* min, void* max);
QDate* q_datetimeedit_minimum_date(void* self);
void q_datetimeedit_set_minimum_date(void* self, void* min);
void q_datetimeedit_clear_minimum_date(void* self);
QDate* q_datetimeedit_maximum_date(void* self);
void q_datetimeedit_set_maximum_date(void* self, void* max);
void q_datetimeedit_clear_maximum_date(void* self);
void q_datetimeedit_set_date_range(void* self, void* min, void* max);
QTime* q_datetimeedit_minimum_time(void* self);
void q_datetimeedit_set_minimum_time(void* self, void* min);
void q_datetimeedit_clear_minimum_time(void* self);
QTime* q_datetimeedit_maximum_time(void* self);
void q_datetimeedit_set_maximum_time(void* self, void* max);
void q_datetimeedit_clear_maximum_time(void* self);
void q_datetimeedit_set_time_range(void* self, void* min, void* max);
int64_t q_datetimeedit_displayed_sections(void* self);
int64_t q_datetimeedit_current_section(void* self);
int64_t q_datetimeedit_section_at(void* self, int index);
void q_datetimeedit_set_current_section(void* self, int64_t section);
int32_t q_datetimeedit_current_section_index(void* self);
void q_datetimeedit_set_current_section_index(void* self, int index);
QCalendarWidget* q_datetimeedit_calendar_widget(void* self);
void q_datetimeedit_set_calendar_widget(void* self, void* calendarWidget);
int32_t q_datetimeedit_section_count(void* self);
void q_datetimeedit_set_selected_section(void* self, int64_t section);
const char* q_datetimeedit_section_text(void* self, int64_t section);
const char* q_datetimeedit_display_format(void* self);
void q_datetimeedit_set_display_format(void* self, const char* format);
bool q_datetimeedit_calendar_popup(void* self);
void q_datetimeedit_set_calendar_popup(void* self, bool enable);
int64_t q_datetimeedit_time_spec(void* self);
void q_datetimeedit_set_time_spec(void* self, int64_t spec);
QSize* q_datetimeedit_size_hint(void* self);
void q_datetimeedit_on_size_hint(void* self, QSize* (*slot)());
QSize* q_datetimeedit_qbase_size_hint(void* self);
void q_datetimeedit_clear(void* self);
void q_datetimeedit_on_clear(void* self, void (*slot)());
void q_datetimeedit_qbase_clear(void* self);
void q_datetimeedit_step_by(void* self, int steps);
void q_datetimeedit_on_step_by(void* self, void (*slot)(void*, int));
void q_datetimeedit_qbase_step_by(void* self, int steps);
bool q_datetimeedit_event(void* self, void* event);
void q_datetimeedit_on_event(void* self, bool (*slot)(void*, void*));
bool q_datetimeedit_qbase_event(void* self, void* event);
void q_datetimeedit_date_time_changed(void* self, void* dateTime);
void q_datetimeedit_on_date_time_changed(void* self, void (*slot)(void*, void*));
void q_datetimeedit_time_changed(void* self, void* time);
void q_datetimeedit_on_time_changed(void* self, void (*slot)(void*, void*));
void q_datetimeedit_date_changed(void* self, void* date);
void q_datetimeedit_on_date_changed(void* self, void (*slot)(void*, void*));
void q_datetimeedit_set_date_time(void* self, void* dateTime);
void q_datetimeedit_set_date(void* self, void* date);
void q_datetimeedit_set_time(void* self, void* time);
void q_datetimeedit_key_press_event(void* self, void* event);
void q_datetimeedit_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_key_press_event(void* self, void* event);
void q_datetimeedit_wheel_event(void* self, void* event);
void q_datetimeedit_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_wheel_event(void* self, void* event);
void q_datetimeedit_focus_in_event(void* self, void* event);
void q_datetimeedit_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_focus_in_event(void* self, void* event);
bool q_datetimeedit_focus_next_prev_child(void* self, bool next);
void q_datetimeedit_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
bool q_datetimeedit_qbase_focus_next_prev_child(void* self, bool next);
int64_t q_datetimeedit_validate(void* self, const char* input, int* pos);
void q_datetimeedit_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_datetimeedit_qbase_validate(void* self, const char* input, int* pos);
void q_datetimeedit_fixup(void* self, const char* input);
void q_datetimeedit_on_fixup(void* self, void (*slot)(void*, const char*));
void q_datetimeedit_qbase_fixup(void* self, const char* input);
QDateTime* q_datetimeedit_date_time_from_text(void* self, const char* text);
void q_datetimeedit_on_date_time_from_text(void* self, QDateTime* (*slot)(void*, const char*));
QDateTime* q_datetimeedit_qbase_date_time_from_text(void* self, const char* text);
const char* q_datetimeedit_text_from_date_time(void* self, void* dt);
void q_datetimeedit_on_text_from_date_time(void* self, const char* (*slot)(void*, void*));
const char* q_datetimeedit_qbase_text_from_date_time(void* self, void* dt);
int64_t q_datetimeedit_step_enabled(void* self);
void q_datetimeedit_on_step_enabled(void* self, int64_t (*slot)());
int64_t q_datetimeedit_qbase_step_enabled(void* self);
void q_datetimeedit_mouse_press_event(void* self, void* event);
void q_datetimeedit_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_mouse_press_event(void* self, void* event);
void q_datetimeedit_paint_event(void* self, void* event);
void q_datetimeedit_on_paint_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_paint_event(void* self, void* event);
void q_datetimeedit_init_style_option(void* self, void* option);
void q_datetimeedit_on_init_style_option(void* self, void (*slot)(void*, void*));
void q_datetimeedit_qbase_init_style_option(void* self, void* option);
const char* q_datetimeedit_tr2(const char* s, const char* c);
const char* q_datetimeedit_tr3(const char* s, const char* c, int n);
int64_t q_datetimeedit_button_symbols(void* self);
void q_datetimeedit_set_button_symbols(void* self, int64_t bs);
void q_datetimeedit_set_correction_mode(void* self, int64_t cm);
int64_t q_datetimeedit_correction_mode(void* self);
bool q_datetimeedit_has_acceptable_input(void* self);
const char* q_datetimeedit_text(void* self);
const char* q_datetimeedit_special_value_text(void* self);
void q_datetimeedit_set_special_value_text(void* self, const char* txt);
bool q_datetimeedit_wrapping(void* self);
void q_datetimeedit_set_wrapping(void* self, bool w);
void q_datetimeedit_set_read_only(void* self, bool r);
bool q_datetimeedit_is_read_only(void* self);
void q_datetimeedit_set_keyboard_tracking(void* self, bool kt);
bool q_datetimeedit_keyboard_tracking(void* self);
void q_datetimeedit_set_alignment(void* self, int64_t flag);
int64_t q_datetimeedit_alignment(void* self);
void q_datetimeedit_set_frame(void* self, bool frame);
bool q_datetimeedit_has_frame(void* self);
void q_datetimeedit_set_accelerated(void* self, bool on);
bool q_datetimeedit_is_accelerated(void* self);
void q_datetimeedit_set_group_separator_shown(void* self, bool shown);
bool q_datetimeedit_is_group_separator_shown(void* self);
void q_datetimeedit_interpret_text(void* self);
void q_datetimeedit_step_up(void* self);
void q_datetimeedit_step_down(void* self);
void q_datetimeedit_select_all(void* self);
void q_datetimeedit_editing_finished(void* self);
void q_datetimeedit_on_editing_finished(void* self, void (*slot)(void*));
uintptr_t q_datetimeedit_win_id(void* self);
void q_datetimeedit_create_win_id(void* self);
uintptr_t q_datetimeedit_internal_win_id(void* self);
uintptr_t q_datetimeedit_effective_win_id(void* self);
QStyle* q_datetimeedit_style(void* self);
void q_datetimeedit_set_style(void* self, void* style);
bool q_datetimeedit_is_top_level(void* self);
bool q_datetimeedit_is_window(void* self);
bool q_datetimeedit_is_modal(void* self);
int64_t q_datetimeedit_window_modality(void* self);
void q_datetimeedit_set_window_modality(void* self, int64_t windowModality);
bool q_datetimeedit_is_enabled(void* self);
bool q_datetimeedit_is_enabled_to(void* self, void* param1);
void q_datetimeedit_set_enabled(void* self, bool enabled);
void q_datetimeedit_set_disabled(void* self, bool disabled);
void q_datetimeedit_set_window_modified(void* self, bool windowModified);
QRect* q_datetimeedit_frame_geometry(void* self);
QRect* q_datetimeedit_geometry(void* self);
QRect* q_datetimeedit_normal_geometry(void* self);
int32_t q_datetimeedit_x(void* self);
int32_t q_datetimeedit_y(void* self);
QPoint* q_datetimeedit_pos(void* self);
QSize* q_datetimeedit_frame_size(void* self);
QSize* q_datetimeedit_size(void* self);
int32_t q_datetimeedit_width(void* self);
int32_t q_datetimeedit_height(void* self);
QRect* q_datetimeedit_rect(void* self);
QRect* q_datetimeedit_children_rect(void* self);
QRegion* q_datetimeedit_children_region(void* self);
QSize* q_datetimeedit_minimum_size(void* self);
QSize* q_datetimeedit_maximum_size(void* self);
int32_t q_datetimeedit_minimum_width(void* self);
int32_t q_datetimeedit_minimum_height(void* self);
int32_t q_datetimeedit_maximum_width(void* self);
int32_t q_datetimeedit_maximum_height(void* self);
void q_datetimeedit_set_minimum_size(void* self, void* minimumSize);
void q_datetimeedit_set_minimum_size2(void* self, int minw, int minh);
void q_datetimeedit_set_maximum_size(void* self, void* maximumSize);
void q_datetimeedit_set_maximum_size2(void* self, int maxw, int maxh);
void q_datetimeedit_set_minimum_width(void* self, int minw);
void q_datetimeedit_set_minimum_height(void* self, int minh);
void q_datetimeedit_set_maximum_width(void* self, int maxw);
void q_datetimeedit_set_maximum_height(void* self, int maxh);
QSize* q_datetimeedit_size_increment(void* self);
void q_datetimeedit_set_size_increment(void* self, void* sizeIncrement);
void q_datetimeedit_set_size_increment2(void* self, int w, int h);
QSize* q_datetimeedit_base_size(void* self);
void q_datetimeedit_set_base_size(void* self, void* baseSize);
void q_datetimeedit_set_base_size2(void* self, int basew, int baseh);
void q_datetimeedit_set_fixed_size(void* self, void* fixedSize);
void q_datetimeedit_set_fixed_size2(void* self, int w, int h);
void q_datetimeedit_set_fixed_width(void* self, int w);
void q_datetimeedit_set_fixed_height(void* self, int h);
QPointF* q_datetimeedit_map_to_global(void* self, void* param1);
QPoint* q_datetimeedit_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_datetimeedit_map_from_global(void* self, void* param1);
QPoint* q_datetimeedit_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_datetimeedit_map_to_parent(void* self, void* param1);
QPoint* q_datetimeedit_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_datetimeedit_map_from_parent(void* self, void* param1);
QPoint* q_datetimeedit_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_datetimeedit_map_to(void* self, void* param1, void* param2);
QPoint* q_datetimeedit_map_to2(void* self, void* param1, void* param2);
QPointF* q_datetimeedit_map_from(void* self, void* param1, void* param2);
QPoint* q_datetimeedit_map_from2(void* self, void* param1, void* param2);
QWidget* q_datetimeedit_window(void* self);
QWidget* q_datetimeedit_native_parent_widget(void* self);
QWidget* q_datetimeedit_top_level_widget(void* self);
QPalette* q_datetimeedit_palette(void* self);
void q_datetimeedit_set_palette(void* self, void* palette);
void q_datetimeedit_set_background_role(void* self, int64_t backgroundRole);
int64_t q_datetimeedit_background_role(void* self);
void q_datetimeedit_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_datetimeedit_foreground_role(void* self);
QFont* q_datetimeedit_font(void* self);
void q_datetimeedit_set_font(void* self, void* font);
QFontMetrics* q_datetimeedit_font_metrics(void* self);
QFontInfo* q_datetimeedit_font_info(void* self);
QCursor* q_datetimeedit_cursor(void* self);
void q_datetimeedit_set_cursor(void* self, void* cursor);
void q_datetimeedit_unset_cursor(void* self);
void q_datetimeedit_set_mouse_tracking(void* self, bool enable);
bool q_datetimeedit_has_mouse_tracking(void* self);
bool q_datetimeedit_under_mouse(void* self);
void q_datetimeedit_set_tablet_tracking(void* self, bool enable);
bool q_datetimeedit_has_tablet_tracking(void* self);
void q_datetimeedit_set_mask(void* self, void* mask);
void q_datetimeedit_set_mask_with_mask(void* self, void* mask);
QRegion* q_datetimeedit_mask(void* self);
void q_datetimeedit_clear_mask(void* self);
void q_datetimeedit_render(void* self, void* target);
void q_datetimeedit_render_with_painter(void* self, void* painter);
QPixmap* q_datetimeedit_grab(void* self);
QGraphicsEffect* q_datetimeedit_graphics_effect(void* self);
void q_datetimeedit_set_graphics_effect(void* self, void* effect);
void q_datetimeedit_grab_gesture(void* self, int64_t typeVal);
void q_datetimeedit_ungrab_gesture(void* self, int64_t typeVal);
void q_datetimeedit_set_window_title(void* self, const char* windowTitle);
void q_datetimeedit_set_style_sheet(void* self, const char* styleSheet);
const char* q_datetimeedit_style_sheet(void* self);
const char* q_datetimeedit_window_title(void* self);
void q_datetimeedit_set_window_icon(void* self, void* icon);
QIcon* q_datetimeedit_window_icon(void* self);
void q_datetimeedit_set_window_icon_text(void* self, const char* windowIconText);
const char* q_datetimeedit_window_icon_text(void* self);
void q_datetimeedit_set_window_role(void* self, const char* windowRole);
const char* q_datetimeedit_window_role(void* self);
void q_datetimeedit_set_window_file_path(void* self, const char* filePath);
const char* q_datetimeedit_window_file_path(void* self);
void q_datetimeedit_set_window_opacity(void* self, double level);
double q_datetimeedit_window_opacity(void* self);
bool q_datetimeedit_is_window_modified(void* self);
void q_datetimeedit_set_tool_tip(void* self, const char* toolTip);
const char* q_datetimeedit_tool_tip(void* self);
void q_datetimeedit_set_tool_tip_duration(void* self, int msec);
int32_t q_datetimeedit_tool_tip_duration(void* self);
void q_datetimeedit_set_status_tip(void* self, const char* statusTip);
const char* q_datetimeedit_status_tip(void* self);
void q_datetimeedit_set_whats_this(void* self, const char* whatsThis);
const char* q_datetimeedit_whats_this(void* self);
const char* q_datetimeedit_accessible_name(void* self);
void q_datetimeedit_set_accessible_name(void* self, const char* name);
const char* q_datetimeedit_accessible_description(void* self);
void q_datetimeedit_set_accessible_description(void* self, const char* description);
void q_datetimeedit_set_layout_direction(void* self, int64_t direction);
int64_t q_datetimeedit_layout_direction(void* self);
void q_datetimeedit_unset_layout_direction(void* self);
void q_datetimeedit_set_locale(void* self, void* locale);
QLocale* q_datetimeedit_locale(void* self);
void q_datetimeedit_unset_locale(void* self);
bool q_datetimeedit_is_right_to_left(void* self);
bool q_datetimeedit_is_left_to_right(void* self);
void q_datetimeedit_set_focus(void* self);
bool q_datetimeedit_is_active_window(void* self);
void q_datetimeedit_activate_window(void* self);
void q_datetimeedit_clear_focus(void* self);
void q_datetimeedit_set_focus_with_reason(void* self, int64_t reason);
int64_t q_datetimeedit_focus_policy(void* self);
void q_datetimeedit_set_focus_policy(void* self, int64_t policy);
bool q_datetimeedit_has_focus(void* self);
void q_datetimeedit_set_tab_order(void* param1, void* param2);
void q_datetimeedit_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_datetimeedit_focus_proxy(void* self);
int64_t q_datetimeedit_context_menu_policy(void* self);
void q_datetimeedit_set_context_menu_policy(void* self, int64_t policy);
void q_datetimeedit_grab_mouse(void* self);
void q_datetimeedit_grab_mouse_with_q_cursor(void* self, void* param1);
void q_datetimeedit_release_mouse(void* self);
void q_datetimeedit_grab_keyboard(void* self);
void q_datetimeedit_release_keyboard(void* self);
int32_t q_datetimeedit_grab_shortcut(void* self, void* key);
void q_datetimeedit_release_shortcut(void* self, int id);
void q_datetimeedit_set_shortcut_enabled(void* self, int id);
void q_datetimeedit_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_datetimeedit_mouse_grabber();
QWidget* q_datetimeedit_keyboard_grabber();
bool q_datetimeedit_updates_enabled(void* self);
void q_datetimeedit_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_datetimeedit_graphics_proxy_widget(void* self);
void q_datetimeedit_update(void* self);
void q_datetimeedit_repaint(void* self);
void q_datetimeedit_update2(void* self, int x, int y, int w, int h);
void q_datetimeedit_update_with_q_rect(void* self, void* param1);
void q_datetimeedit_update_with_q_region(void* self, void* param1);
void q_datetimeedit_repaint2(void* self, int x, int y, int w, int h);
void q_datetimeedit_repaint_with_q_rect(void* self, void* param1);
void q_datetimeedit_repaint_with_q_region(void* self, void* param1);
void q_datetimeedit_set_hidden(void* self, bool hidden);
void q_datetimeedit_show(void* self);
void q_datetimeedit_hide(void* self);
void q_datetimeedit_show_minimized(void* self);
void q_datetimeedit_show_maximized(void* self);
void q_datetimeedit_show_full_screen(void* self);
void q_datetimeedit_show_normal(void* self);
bool q_datetimeedit_close(void* self);
void q_datetimeedit_raise(void* self);
void q_datetimeedit_lower(void* self);
void q_datetimeedit_stack_under(void* self, void* param1);
void q_datetimeedit_move(void* self, int x, int y);
void q_datetimeedit_move_with_q_point(void* self, void* param1);
void q_datetimeedit_resize(void* self, int w, int h);
void q_datetimeedit_resize_with_q_size(void* self, void* param1);
void q_datetimeedit_set_geometry(void* self, int x, int y, int w, int h);
void q_datetimeedit_set_geometry_with_geometry(void* self, void* geometry);
char* q_datetimeedit_save_geometry(void* self);
bool q_datetimeedit_restore_geometry(void* self, const char* geometry);
void q_datetimeedit_adjust_size(void* self);
bool q_datetimeedit_is_visible(void* self);
bool q_datetimeedit_is_visible_to(void* self, void* param1);
bool q_datetimeedit_is_hidden(void* self);
bool q_datetimeedit_is_minimized(void* self);
bool q_datetimeedit_is_maximized(void* self);
bool q_datetimeedit_is_full_screen(void* self);
int64_t q_datetimeedit_window_state(void* self);
void q_datetimeedit_set_window_state(void* self, int64_t state);
void q_datetimeedit_override_window_state(void* self, int64_t state);
QSizePolicy* q_datetimeedit_size_policy(void* self);
void q_datetimeedit_set_size_policy(void* self, void* sizePolicy);
void q_datetimeedit_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_datetimeedit_visible_region(void* self);
void q_datetimeedit_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_datetimeedit_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_datetimeedit_contents_margins(void* self);
QRect* q_datetimeedit_contents_rect(void* self);
QLayout* q_datetimeedit_layout(void* self);
void q_datetimeedit_set_layout(void* self, void* layout);
void q_datetimeedit_update_geometry(void* self);
void q_datetimeedit_set_parent(void* self, void* parent);
void q_datetimeedit_set_parent2(void* self, void* parent, int64_t f);
void q_datetimeedit_scroll(void* self, int dx, int dy);
void q_datetimeedit_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_datetimeedit_focus_widget(void* self);
QWidget* q_datetimeedit_next_in_focus_chain(void* self);
QWidget* q_datetimeedit_previous_in_focus_chain(void* self);
bool q_datetimeedit_accept_drops(void* self);
void q_datetimeedit_set_accept_drops(void* self, bool on);
void q_datetimeedit_add_action(void* self, void* action);
void q_datetimeedit_add_actions(void* self, void* actions[]);
void q_datetimeedit_insert_actions(void* self, void* before, void* actions[]);
void q_datetimeedit_insert_action(void* self, void* before, void* action);
void q_datetimeedit_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_datetimeedit_actions(void* self);
QAction* q_datetimeedit_add_action_with_text(void* self, const char* text);
QAction* q_datetimeedit_add_action2(void* self, void* icon, const char* text);
QAction* q_datetimeedit_add_action3(void* self, const char* text, void* shortcut);
QAction* q_datetimeedit_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_datetimeedit_parent_widget(void* self);
void q_datetimeedit_set_window_flags(void* self, int64_t typeVal);
int64_t q_datetimeedit_window_flags(void* self);
void q_datetimeedit_set_window_flag(void* self, int64_t param1);
void q_datetimeedit_override_window_flags(void* self, int64_t typeVal);
int64_t q_datetimeedit_window_type(void* self);
QWidget* q_datetimeedit_find(uint64_t param1);
QWidget* q_datetimeedit_child_at(void* self, int x, int y);
QWidget* q_datetimeedit_child_at_with_q_point(void* self, void* p);
void q_datetimeedit_set_attribute(void* self, int64_t param1);
bool q_datetimeedit_test_attribute(void* self, int64_t param1);
void q_datetimeedit_ensure_polished(void* self);
bool q_datetimeedit_is_ancestor_of(void* self, void* child);
bool q_datetimeedit_auto_fill_background(void* self);
void q_datetimeedit_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_datetimeedit_backing_store(void* self);
QWindow* q_datetimeedit_window_handle(void* self);
QScreen* q_datetimeedit_screen(void* self);
void q_datetimeedit_set_screen(void* self, void* screen);
QWidget* q_datetimeedit_create_window_container(void* window);
void q_datetimeedit_window_title_changed(void* self, const char* title);
void q_datetimeedit_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_datetimeedit_window_icon_changed(void* self, void* icon);
void q_datetimeedit_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_datetimeedit_window_icon_text_changed(void* self, const char* iconText);
void q_datetimeedit_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_datetimeedit_custom_context_menu_requested(void* self, void* pos);
void q_datetimeedit_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_datetimeedit_input_method_hints(void* self);
void q_datetimeedit_set_input_method_hints(void* self, int64_t hints);
void q_datetimeedit_render2(void* self, void* target, void* targetOffset);
void q_datetimeedit_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_datetimeedit_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_datetimeedit_render22(void* self, void* painter, void* targetOffset);
void q_datetimeedit_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_datetimeedit_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_datetimeedit_grab1(void* self, void* rectangle);
void q_datetimeedit_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_datetimeedit_grab_shortcut2(void* self, void* key, int64_t context);
void q_datetimeedit_set_shortcut_enabled2(void* self, int id, bool enable);
void q_datetimeedit_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_datetimeedit_set_window_flag2(void* self, int64_t param1, bool on);
void q_datetimeedit_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_datetimeedit_create_window_container2(void* window, void* parent);
QWidget* q_datetimeedit_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_datetimeedit_object_name(void* self);
void q_datetimeedit_set_object_name(void* self, const char* name);
bool q_datetimeedit_is_widget_type(void* self);
bool q_datetimeedit_is_window_type(void* self);
bool q_datetimeedit_is_quick_item_type(void* self);
bool q_datetimeedit_signals_blocked(void* self);
bool q_datetimeedit_block_signals(void* self, bool b);
QThread* q_datetimeedit_thread(void* self);
void q_datetimeedit_move_to_thread(void* self, void* thread);
int32_t q_datetimeedit_start_timer(void* self, int interval);
void q_datetimeedit_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_datetimeedit_children(void* self);
void q_datetimeedit_install_event_filter(void* self, void* filterObj);
void q_datetimeedit_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_datetimeedit_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_datetimeedit_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_datetimeedit_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_datetimeedit_disconnect_with_q_meta_object_connection(void* param1);
void q_datetimeedit_dump_object_tree(void* self);
void q_datetimeedit_dump_object_info(void* self);
bool q_datetimeedit_set_property(void* self, const char* name, void* value);
QVariant* q_datetimeedit_property(void* self, const char* name);
const char** q_datetimeedit_dynamic_property_names(void* self);
QBindingStorage* q_datetimeedit_binding_storage(void* self);
QBindingStorage* q_datetimeedit_binding_storage2(void* self);
void q_datetimeedit_destroyed(void* self);
void q_datetimeedit_on_destroyed(void* self, void (*slot)(void*));
QObject* q_datetimeedit_parent(void* self);
bool q_datetimeedit_inherits(void* self, const char* classname);
void q_datetimeedit_delete_later(void* self);
int32_t q_datetimeedit_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_datetimeedit_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_datetimeedit_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_datetimeedit_destroyed1(void* self, void* param1);
void q_datetimeedit_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_datetimeedit_painting_active(void* self);
int32_t q_datetimeedit_width_m_m(void* self);
int32_t q_datetimeedit_height_m_m(void* self);
int32_t q_datetimeedit_logical_dpi_x(void* self);
int32_t q_datetimeedit_logical_dpi_y(void* self);
int32_t q_datetimeedit_physical_dpi_x(void* self);
int32_t q_datetimeedit_physical_dpi_y(void* self);
double q_datetimeedit_device_pixel_ratio(void* self);
double q_datetimeedit_device_pixel_ratio_f(void* self);
int32_t q_datetimeedit_color_count(void* self);
int32_t q_datetimeedit_depth(void* self);
double q_datetimeedit_device_pixel_ratio_f_scale();
QSize* q_datetimeedit_minimum_size_hint(void* self);
QSize* q_datetimeedit_qbase_minimum_size_hint(void* self);
void q_datetimeedit_on_minimum_size_hint(void* self, QSize* (*slot)());
QVariant* q_datetimeedit_input_method_query(void* self, int64_t param1);
QVariant* q_datetimeedit_qbase_input_method_query(void* self, int64_t param1);
void q_datetimeedit_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_datetimeedit_resize_event(void* self, void* event);
void q_datetimeedit_qbase_resize_event(void* self, void* event);
void q_datetimeedit_on_resize_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_key_release_event(void* self, void* event);
void q_datetimeedit_qbase_key_release_event(void* self, void* event);
void q_datetimeedit_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_focus_out_event(void* self, void* event);
void q_datetimeedit_qbase_focus_out_event(void* self, void* event);
void q_datetimeedit_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_context_menu_event(void* self, void* event);
void q_datetimeedit_qbase_context_menu_event(void* self, void* event);
void q_datetimeedit_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_change_event(void* self, void* event);
void q_datetimeedit_qbase_change_event(void* self, void* event);
void q_datetimeedit_on_change_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_close_event(void* self, void* event);
void q_datetimeedit_qbase_close_event(void* self, void* event);
void q_datetimeedit_on_close_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_hide_event(void* self, void* event);
void q_datetimeedit_qbase_hide_event(void* self, void* event);
void q_datetimeedit_on_hide_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_mouse_release_event(void* self, void* event);
void q_datetimeedit_qbase_mouse_release_event(void* self, void* event);
void q_datetimeedit_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_mouse_move_event(void* self, void* event);
void q_datetimeedit_qbase_mouse_move_event(void* self, void* event);
void q_datetimeedit_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_timer_event(void* self, void* event);
void q_datetimeedit_qbase_timer_event(void* self, void* event);
void q_datetimeedit_on_timer_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_show_event(void* self, void* event);
void q_datetimeedit_qbase_show_event(void* self, void* event);
void q_datetimeedit_on_show_event(void* self, void (*slot)(void*, void*));
int32_t q_datetimeedit_dev_type(void* self);
int32_t q_datetimeedit_qbase_dev_type(void* self);
void q_datetimeedit_on_dev_type(void* self, int32_t (*slot)());
void q_datetimeedit_set_visible(void* self, bool visible);
void q_datetimeedit_qbase_set_visible(void* self, bool visible);
void q_datetimeedit_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_datetimeedit_height_for_width(void* self, int param1);
int32_t q_datetimeedit_qbase_height_for_width(void* self, int param1);
void q_datetimeedit_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_datetimeedit_has_height_for_width(void* self);
bool q_datetimeedit_qbase_has_height_for_width(void* self);
void q_datetimeedit_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_datetimeedit_paint_engine(void* self);
QPaintEngine* q_datetimeedit_qbase_paint_engine(void* self);
void q_datetimeedit_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_datetimeedit_mouse_double_click_event(void* self, void* event);
void q_datetimeedit_qbase_mouse_double_click_event(void* self, void* event);
void q_datetimeedit_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_enter_event(void* self, void* event);
void q_datetimeedit_qbase_enter_event(void* self, void* event);
void q_datetimeedit_on_enter_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_leave_event(void* self, void* event);
void q_datetimeedit_qbase_leave_event(void* self, void* event);
void q_datetimeedit_on_leave_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_move_event(void* self, void* event);
void q_datetimeedit_qbase_move_event(void* self, void* event);
void q_datetimeedit_on_move_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_tablet_event(void* self, void* event);
void q_datetimeedit_qbase_tablet_event(void* self, void* event);
void q_datetimeedit_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_action_event(void* self, void* event);
void q_datetimeedit_qbase_action_event(void* self, void* event);
void q_datetimeedit_on_action_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_drag_enter_event(void* self, void* event);
void q_datetimeedit_qbase_drag_enter_event(void* self, void* event);
void q_datetimeedit_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_drag_move_event(void* self, void* event);
void q_datetimeedit_qbase_drag_move_event(void* self, void* event);
void q_datetimeedit_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_drag_leave_event(void* self, void* event);
void q_datetimeedit_qbase_drag_leave_event(void* self, void* event);
void q_datetimeedit_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_drop_event(void* self, void* event);
void q_datetimeedit_qbase_drop_event(void* self, void* event);
void q_datetimeedit_on_drop_event(void* self, void (*slot)(void*, void*));
bool q_datetimeedit_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_datetimeedit_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_datetimeedit_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_datetimeedit_metric(void* self, int64_t param1);
int32_t q_datetimeedit_qbase_metric(void* self, int64_t param1);
void q_datetimeedit_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_datetimeedit_init_painter(void* self, void* painter);
void q_datetimeedit_qbase_init_painter(void* self, void* painter);
void q_datetimeedit_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_datetimeedit_redirected(void* self, void* offset);
QPaintDevice* q_datetimeedit_qbase_redirected(void* self, void* offset);
void q_datetimeedit_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_datetimeedit_shared_painter(void* self);
QPainter* q_datetimeedit_qbase_shared_painter(void* self);
void q_datetimeedit_on_shared_painter(void* self, QPainter* (*slot)());
void q_datetimeedit_input_method_event(void* self, void* param1);
void q_datetimeedit_qbase_input_method_event(void* self, void* param1);
void q_datetimeedit_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_datetimeedit_event_filter(void* self, void* watched, void* event);
bool q_datetimeedit_qbase_event_filter(void* self, void* watched, void* event);
void q_datetimeedit_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_datetimeedit_child_event(void* self, void* event);
void q_datetimeedit_qbase_child_event(void* self, void* event);
void q_datetimeedit_on_child_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_custom_event(void* self, void* event);
void q_datetimeedit_qbase_custom_event(void* self, void* event);
void q_datetimeedit_on_custom_event(void* self, void (*slot)(void*, void*));
void q_datetimeedit_connect_notify(void* self, void* signal);
void q_datetimeedit_qbase_connect_notify(void* self, void* signal);
void q_datetimeedit_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_datetimeedit_disconnect_notify(void* self, void* signal);
void q_datetimeedit_qbase_disconnect_notify(void* self, void* signal);
void q_datetimeedit_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QLineEdit* q_datetimeedit_line_edit(void* self);
QLineEdit* q_datetimeedit_qbase_line_edit(void* self);
void q_datetimeedit_on_line_edit(void* self, QLineEdit* (*slot)());
void q_datetimeedit_set_line_edit(void* self, void* edit);
void q_datetimeedit_qbase_set_line_edit(void* self, void* edit);
void q_datetimeedit_on_set_line_edit(void* self, void (*slot)(void*, void*));
void q_datetimeedit_update_micro_focus(void* self);
void q_datetimeedit_qbase_update_micro_focus(void* self);
void q_datetimeedit_on_update_micro_focus(void* self, void (*slot)());
void q_datetimeedit_create(void* self);
void q_datetimeedit_qbase_create(void* self);
void q_datetimeedit_on_create(void* self, void (*slot)());
void q_datetimeedit_destroy(void* self);
void q_datetimeedit_qbase_destroy(void* self);
void q_datetimeedit_on_destroy(void* self, void (*slot)());
bool q_datetimeedit_focus_next_child(void* self);
bool q_datetimeedit_qbase_focus_next_child(void* self);
void q_datetimeedit_on_focus_next_child(void* self, bool (*slot)());
bool q_datetimeedit_focus_previous_child(void* self);
bool q_datetimeedit_qbase_focus_previous_child(void* self);
void q_datetimeedit_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_datetimeedit_sender(void* self);
QObject* q_datetimeedit_qbase_sender(void* self);
void q_datetimeedit_on_sender(void* self, QObject* (*slot)());
int32_t q_datetimeedit_sender_signal_index(void* self);
int32_t q_datetimeedit_qbase_sender_signal_index(void* self);
void q_datetimeedit_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_datetimeedit_receivers(void* self, const char* signal);
int32_t q_datetimeedit_qbase_receivers(void* self, const char* signal);
void q_datetimeedit_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_datetimeedit_is_signal_connected(void* self, void* signal);
bool q_datetimeedit_qbase_is_signal_connected(void* self, void* signal);
void q_datetimeedit_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_datetimeedit_delete(void* self);

QTimeEdit* q_timeedit_new(void* parent);
QTimeEdit* q_timeedit_new2();
QTimeEdit* q_timeedit_new3(void* time);
QTimeEdit* q_timeedit_new4(void* time, void* parent);
QMetaObject* q_timeedit_meta_object(void* self);
void* q_timeedit_metacast(void* self, const char* param1);
int32_t q_timeedit_metacall(void* self, int64_t param1, int param2, void* param3);
void q_timeedit_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_timeedit_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_timeedit_tr(const char* s);
void q_timeedit_user_time_changed(void* self, void* time);
void q_timeedit_on_user_time_changed(void* self, void (*slot)(void*, void*));
const char* q_timeedit_tr2(const char* s, const char* c);
const char* q_timeedit_tr3(const char* s, const char* c, int n);
QDateTime* q_timeedit_date_time(void* self);
QDate* q_timeedit_date(void* self);
QTime* q_timeedit_time(void* self);
QCalendar* q_timeedit_calendar(void* self);
void q_timeedit_set_calendar(void* self, void* calendar);
QDateTime* q_timeedit_minimum_date_time(void* self);
void q_timeedit_clear_minimum_date_time(void* self);
void q_timeedit_set_minimum_date_time(void* self, void* dt);
QDateTime* q_timeedit_maximum_date_time(void* self);
void q_timeedit_clear_maximum_date_time(void* self);
void q_timeedit_set_maximum_date_time(void* self, void* dt);
void q_timeedit_set_date_time_range(void* self, void* min, void* max);
QDate* q_timeedit_minimum_date(void* self);
void q_timeedit_set_minimum_date(void* self, void* min);
void q_timeedit_clear_minimum_date(void* self);
QDate* q_timeedit_maximum_date(void* self);
void q_timeedit_set_maximum_date(void* self, void* max);
void q_timeedit_clear_maximum_date(void* self);
void q_timeedit_set_date_range(void* self, void* min, void* max);
QTime* q_timeedit_minimum_time(void* self);
void q_timeedit_set_minimum_time(void* self, void* min);
void q_timeedit_clear_minimum_time(void* self);
QTime* q_timeedit_maximum_time(void* self);
void q_timeedit_set_maximum_time(void* self, void* max);
void q_timeedit_clear_maximum_time(void* self);
void q_timeedit_set_time_range(void* self, void* min, void* max);
int64_t q_timeedit_displayed_sections(void* self);
int64_t q_timeedit_current_section(void* self);
int64_t q_timeedit_section_at(void* self, int index);
void q_timeedit_set_current_section(void* self, int64_t section);
int32_t q_timeedit_current_section_index(void* self);
void q_timeedit_set_current_section_index(void* self, int index);
QCalendarWidget* q_timeedit_calendar_widget(void* self);
void q_timeedit_set_calendar_widget(void* self, void* calendarWidget);
int32_t q_timeedit_section_count(void* self);
void q_timeedit_set_selected_section(void* self, int64_t section);
const char* q_timeedit_section_text(void* self, int64_t section);
const char* q_timeedit_display_format(void* self);
void q_timeedit_set_display_format(void* self, const char* format);
bool q_timeedit_calendar_popup(void* self);
void q_timeedit_set_calendar_popup(void* self, bool enable);
int64_t q_timeedit_time_spec(void* self);
void q_timeedit_set_time_spec(void* self, int64_t spec);
void q_timeedit_date_time_changed(void* self, void* dateTime);
void q_timeedit_on_date_time_changed(void* self, void (*slot)(void*, void*));
void q_timeedit_time_changed(void* self, void* time);
void q_timeedit_on_time_changed(void* self, void (*slot)(void*, void*));
void q_timeedit_date_changed(void* self, void* date);
void q_timeedit_on_date_changed(void* self, void (*slot)(void*, void*));
void q_timeedit_set_date_time(void* self, void* dateTime);
void q_timeedit_set_date(void* self, void* date);
void q_timeedit_set_time(void* self, void* time);
int64_t q_timeedit_button_symbols(void* self);
void q_timeedit_set_button_symbols(void* self, int64_t bs);
void q_timeedit_set_correction_mode(void* self, int64_t cm);
int64_t q_timeedit_correction_mode(void* self);
bool q_timeedit_has_acceptable_input(void* self);
const char* q_timeedit_text(void* self);
const char* q_timeedit_special_value_text(void* self);
void q_timeedit_set_special_value_text(void* self, const char* txt);
bool q_timeedit_wrapping(void* self);
void q_timeedit_set_wrapping(void* self, bool w);
void q_timeedit_set_read_only(void* self, bool r);
bool q_timeedit_is_read_only(void* self);
void q_timeedit_set_keyboard_tracking(void* self, bool kt);
bool q_timeedit_keyboard_tracking(void* self);
void q_timeedit_set_alignment(void* self, int64_t flag);
int64_t q_timeedit_alignment(void* self);
void q_timeedit_set_frame(void* self, bool frame);
bool q_timeedit_has_frame(void* self);
void q_timeedit_set_accelerated(void* self, bool on);
bool q_timeedit_is_accelerated(void* self);
void q_timeedit_set_group_separator_shown(void* self, bool shown);
bool q_timeedit_is_group_separator_shown(void* self);
void q_timeedit_interpret_text(void* self);
void q_timeedit_step_up(void* self);
void q_timeedit_step_down(void* self);
void q_timeedit_select_all(void* self);
void q_timeedit_editing_finished(void* self);
void q_timeedit_on_editing_finished(void* self, void (*slot)(void*));
uintptr_t q_timeedit_win_id(void* self);
void q_timeedit_create_win_id(void* self);
uintptr_t q_timeedit_internal_win_id(void* self);
uintptr_t q_timeedit_effective_win_id(void* self);
QStyle* q_timeedit_style(void* self);
void q_timeedit_set_style(void* self, void* style);
bool q_timeedit_is_top_level(void* self);
bool q_timeedit_is_window(void* self);
bool q_timeedit_is_modal(void* self);
int64_t q_timeedit_window_modality(void* self);
void q_timeedit_set_window_modality(void* self, int64_t windowModality);
bool q_timeedit_is_enabled(void* self);
bool q_timeedit_is_enabled_to(void* self, void* param1);
void q_timeedit_set_enabled(void* self, bool enabled);
void q_timeedit_set_disabled(void* self, bool disabled);
void q_timeedit_set_window_modified(void* self, bool windowModified);
QRect* q_timeedit_frame_geometry(void* self);
QRect* q_timeedit_geometry(void* self);
QRect* q_timeedit_normal_geometry(void* self);
int32_t q_timeedit_x(void* self);
int32_t q_timeedit_y(void* self);
QPoint* q_timeedit_pos(void* self);
QSize* q_timeedit_frame_size(void* self);
QSize* q_timeedit_size(void* self);
int32_t q_timeedit_width(void* self);
int32_t q_timeedit_height(void* self);
QRect* q_timeedit_rect(void* self);
QRect* q_timeedit_children_rect(void* self);
QRegion* q_timeedit_children_region(void* self);
QSize* q_timeedit_minimum_size(void* self);
QSize* q_timeedit_maximum_size(void* self);
int32_t q_timeedit_minimum_width(void* self);
int32_t q_timeedit_minimum_height(void* self);
int32_t q_timeedit_maximum_width(void* self);
int32_t q_timeedit_maximum_height(void* self);
void q_timeedit_set_minimum_size(void* self, void* minimumSize);
void q_timeedit_set_minimum_size2(void* self, int minw, int minh);
void q_timeedit_set_maximum_size(void* self, void* maximumSize);
void q_timeedit_set_maximum_size2(void* self, int maxw, int maxh);
void q_timeedit_set_minimum_width(void* self, int minw);
void q_timeedit_set_minimum_height(void* self, int minh);
void q_timeedit_set_maximum_width(void* self, int maxw);
void q_timeedit_set_maximum_height(void* self, int maxh);
QSize* q_timeedit_size_increment(void* self);
void q_timeedit_set_size_increment(void* self, void* sizeIncrement);
void q_timeedit_set_size_increment2(void* self, int w, int h);
QSize* q_timeedit_base_size(void* self);
void q_timeedit_set_base_size(void* self, void* baseSize);
void q_timeedit_set_base_size2(void* self, int basew, int baseh);
void q_timeedit_set_fixed_size(void* self, void* fixedSize);
void q_timeedit_set_fixed_size2(void* self, int w, int h);
void q_timeedit_set_fixed_width(void* self, int w);
void q_timeedit_set_fixed_height(void* self, int h);
QPointF* q_timeedit_map_to_global(void* self, void* param1);
QPoint* q_timeedit_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_timeedit_map_from_global(void* self, void* param1);
QPoint* q_timeedit_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_timeedit_map_to_parent(void* self, void* param1);
QPoint* q_timeedit_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_timeedit_map_from_parent(void* self, void* param1);
QPoint* q_timeedit_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_timeedit_map_to(void* self, void* param1, void* param2);
QPoint* q_timeedit_map_to2(void* self, void* param1, void* param2);
QPointF* q_timeedit_map_from(void* self, void* param1, void* param2);
QPoint* q_timeedit_map_from2(void* self, void* param1, void* param2);
QWidget* q_timeedit_window(void* self);
QWidget* q_timeedit_native_parent_widget(void* self);
QWidget* q_timeedit_top_level_widget(void* self);
QPalette* q_timeedit_palette(void* self);
void q_timeedit_set_palette(void* self, void* palette);
void q_timeedit_set_background_role(void* self, int64_t backgroundRole);
int64_t q_timeedit_background_role(void* self);
void q_timeedit_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_timeedit_foreground_role(void* self);
QFont* q_timeedit_font(void* self);
void q_timeedit_set_font(void* self, void* font);
QFontMetrics* q_timeedit_font_metrics(void* self);
QFontInfo* q_timeedit_font_info(void* self);
QCursor* q_timeedit_cursor(void* self);
void q_timeedit_set_cursor(void* self, void* cursor);
void q_timeedit_unset_cursor(void* self);
void q_timeedit_set_mouse_tracking(void* self, bool enable);
bool q_timeedit_has_mouse_tracking(void* self);
bool q_timeedit_under_mouse(void* self);
void q_timeedit_set_tablet_tracking(void* self, bool enable);
bool q_timeedit_has_tablet_tracking(void* self);
void q_timeedit_set_mask(void* self, void* mask);
void q_timeedit_set_mask_with_mask(void* self, void* mask);
QRegion* q_timeedit_mask(void* self);
void q_timeedit_clear_mask(void* self);
void q_timeedit_render(void* self, void* target);
void q_timeedit_render_with_painter(void* self, void* painter);
QPixmap* q_timeedit_grab(void* self);
QGraphicsEffect* q_timeedit_graphics_effect(void* self);
void q_timeedit_set_graphics_effect(void* self, void* effect);
void q_timeedit_grab_gesture(void* self, int64_t typeVal);
void q_timeedit_ungrab_gesture(void* self, int64_t typeVal);
void q_timeedit_set_window_title(void* self, const char* windowTitle);
void q_timeedit_set_style_sheet(void* self, const char* styleSheet);
const char* q_timeedit_style_sheet(void* self);
const char* q_timeedit_window_title(void* self);
void q_timeedit_set_window_icon(void* self, void* icon);
QIcon* q_timeedit_window_icon(void* self);
void q_timeedit_set_window_icon_text(void* self, const char* windowIconText);
const char* q_timeedit_window_icon_text(void* self);
void q_timeedit_set_window_role(void* self, const char* windowRole);
const char* q_timeedit_window_role(void* self);
void q_timeedit_set_window_file_path(void* self, const char* filePath);
const char* q_timeedit_window_file_path(void* self);
void q_timeedit_set_window_opacity(void* self, double level);
double q_timeedit_window_opacity(void* self);
bool q_timeedit_is_window_modified(void* self);
void q_timeedit_set_tool_tip(void* self, const char* toolTip);
const char* q_timeedit_tool_tip(void* self);
void q_timeedit_set_tool_tip_duration(void* self, int msec);
int32_t q_timeedit_tool_tip_duration(void* self);
void q_timeedit_set_status_tip(void* self, const char* statusTip);
const char* q_timeedit_status_tip(void* self);
void q_timeedit_set_whats_this(void* self, const char* whatsThis);
const char* q_timeedit_whats_this(void* self);
const char* q_timeedit_accessible_name(void* self);
void q_timeedit_set_accessible_name(void* self, const char* name);
const char* q_timeedit_accessible_description(void* self);
void q_timeedit_set_accessible_description(void* self, const char* description);
void q_timeedit_set_layout_direction(void* self, int64_t direction);
int64_t q_timeedit_layout_direction(void* self);
void q_timeedit_unset_layout_direction(void* self);
void q_timeedit_set_locale(void* self, void* locale);
QLocale* q_timeedit_locale(void* self);
void q_timeedit_unset_locale(void* self);
bool q_timeedit_is_right_to_left(void* self);
bool q_timeedit_is_left_to_right(void* self);
void q_timeedit_set_focus(void* self);
bool q_timeedit_is_active_window(void* self);
void q_timeedit_activate_window(void* self);
void q_timeedit_clear_focus(void* self);
void q_timeedit_set_focus_with_reason(void* self, int64_t reason);
int64_t q_timeedit_focus_policy(void* self);
void q_timeedit_set_focus_policy(void* self, int64_t policy);
bool q_timeedit_has_focus(void* self);
void q_timeedit_set_tab_order(void* param1, void* param2);
void q_timeedit_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_timeedit_focus_proxy(void* self);
int64_t q_timeedit_context_menu_policy(void* self);
void q_timeedit_set_context_menu_policy(void* self, int64_t policy);
void q_timeedit_grab_mouse(void* self);
void q_timeedit_grab_mouse_with_q_cursor(void* self, void* param1);
void q_timeedit_release_mouse(void* self);
void q_timeedit_grab_keyboard(void* self);
void q_timeedit_release_keyboard(void* self);
int32_t q_timeedit_grab_shortcut(void* self, void* key);
void q_timeedit_release_shortcut(void* self, int id);
void q_timeedit_set_shortcut_enabled(void* self, int id);
void q_timeedit_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_timeedit_mouse_grabber();
QWidget* q_timeedit_keyboard_grabber();
bool q_timeedit_updates_enabled(void* self);
void q_timeedit_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_timeedit_graphics_proxy_widget(void* self);
void q_timeedit_update(void* self);
void q_timeedit_repaint(void* self);
void q_timeedit_update2(void* self, int x, int y, int w, int h);
void q_timeedit_update_with_q_rect(void* self, void* param1);
void q_timeedit_update_with_q_region(void* self, void* param1);
void q_timeedit_repaint2(void* self, int x, int y, int w, int h);
void q_timeedit_repaint_with_q_rect(void* self, void* param1);
void q_timeedit_repaint_with_q_region(void* self, void* param1);
void q_timeedit_set_hidden(void* self, bool hidden);
void q_timeedit_show(void* self);
void q_timeedit_hide(void* self);
void q_timeedit_show_minimized(void* self);
void q_timeedit_show_maximized(void* self);
void q_timeedit_show_full_screen(void* self);
void q_timeedit_show_normal(void* self);
bool q_timeedit_close(void* self);
void q_timeedit_raise(void* self);
void q_timeedit_lower(void* self);
void q_timeedit_stack_under(void* self, void* param1);
void q_timeedit_move(void* self, int x, int y);
void q_timeedit_move_with_q_point(void* self, void* param1);
void q_timeedit_resize(void* self, int w, int h);
void q_timeedit_resize_with_q_size(void* self, void* param1);
void q_timeedit_set_geometry(void* self, int x, int y, int w, int h);
void q_timeedit_set_geometry_with_geometry(void* self, void* geometry);
char* q_timeedit_save_geometry(void* self);
bool q_timeedit_restore_geometry(void* self, const char* geometry);
void q_timeedit_adjust_size(void* self);
bool q_timeedit_is_visible(void* self);
bool q_timeedit_is_visible_to(void* self, void* param1);
bool q_timeedit_is_hidden(void* self);
bool q_timeedit_is_minimized(void* self);
bool q_timeedit_is_maximized(void* self);
bool q_timeedit_is_full_screen(void* self);
int64_t q_timeedit_window_state(void* self);
void q_timeedit_set_window_state(void* self, int64_t state);
void q_timeedit_override_window_state(void* self, int64_t state);
QSizePolicy* q_timeedit_size_policy(void* self);
void q_timeedit_set_size_policy(void* self, void* sizePolicy);
void q_timeedit_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_timeedit_visible_region(void* self);
void q_timeedit_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_timeedit_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_timeedit_contents_margins(void* self);
QRect* q_timeedit_contents_rect(void* self);
QLayout* q_timeedit_layout(void* self);
void q_timeedit_set_layout(void* self, void* layout);
void q_timeedit_update_geometry(void* self);
void q_timeedit_set_parent(void* self, void* parent);
void q_timeedit_set_parent2(void* self, void* parent, int64_t f);
void q_timeedit_scroll(void* self, int dx, int dy);
void q_timeedit_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_timeedit_focus_widget(void* self);
QWidget* q_timeedit_next_in_focus_chain(void* self);
QWidget* q_timeedit_previous_in_focus_chain(void* self);
bool q_timeedit_accept_drops(void* self);
void q_timeedit_set_accept_drops(void* self, bool on);
void q_timeedit_add_action(void* self, void* action);
void q_timeedit_add_actions(void* self, void* actions[]);
void q_timeedit_insert_actions(void* self, void* before, void* actions[]);
void q_timeedit_insert_action(void* self, void* before, void* action);
void q_timeedit_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_timeedit_actions(void* self);
QAction* q_timeedit_add_action_with_text(void* self, const char* text);
QAction* q_timeedit_add_action2(void* self, void* icon, const char* text);
QAction* q_timeedit_add_action3(void* self, const char* text, void* shortcut);
QAction* q_timeedit_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_timeedit_parent_widget(void* self);
void q_timeedit_set_window_flags(void* self, int64_t typeVal);
int64_t q_timeedit_window_flags(void* self);
void q_timeedit_set_window_flag(void* self, int64_t param1);
void q_timeedit_override_window_flags(void* self, int64_t typeVal);
int64_t q_timeedit_window_type(void* self);
QWidget* q_timeedit_find(uint64_t param1);
QWidget* q_timeedit_child_at(void* self, int x, int y);
QWidget* q_timeedit_child_at_with_q_point(void* self, void* p);
void q_timeedit_set_attribute(void* self, int64_t param1);
bool q_timeedit_test_attribute(void* self, int64_t param1);
void q_timeedit_ensure_polished(void* self);
bool q_timeedit_is_ancestor_of(void* self, void* child);
bool q_timeedit_auto_fill_background(void* self);
void q_timeedit_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_timeedit_backing_store(void* self);
QWindow* q_timeedit_window_handle(void* self);
QScreen* q_timeedit_screen(void* self);
void q_timeedit_set_screen(void* self, void* screen);
QWidget* q_timeedit_create_window_container(void* window);
void q_timeedit_window_title_changed(void* self, const char* title);
void q_timeedit_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_timeedit_window_icon_changed(void* self, void* icon);
void q_timeedit_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_timeedit_window_icon_text_changed(void* self, const char* iconText);
void q_timeedit_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_timeedit_custom_context_menu_requested(void* self, void* pos);
void q_timeedit_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_timeedit_input_method_hints(void* self);
void q_timeedit_set_input_method_hints(void* self, int64_t hints);
void q_timeedit_render2(void* self, void* target, void* targetOffset);
void q_timeedit_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_timeedit_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_timeedit_render22(void* self, void* painter, void* targetOffset);
void q_timeedit_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_timeedit_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_timeedit_grab1(void* self, void* rectangle);
void q_timeedit_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_timeedit_grab_shortcut2(void* self, void* key, int64_t context);
void q_timeedit_set_shortcut_enabled2(void* self, int id, bool enable);
void q_timeedit_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_timeedit_set_window_flag2(void* self, int64_t param1, bool on);
void q_timeedit_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_timeedit_create_window_container2(void* window, void* parent);
QWidget* q_timeedit_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_timeedit_object_name(void* self);
void q_timeedit_set_object_name(void* self, const char* name);
bool q_timeedit_is_widget_type(void* self);
bool q_timeedit_is_window_type(void* self);
bool q_timeedit_is_quick_item_type(void* self);
bool q_timeedit_signals_blocked(void* self);
bool q_timeedit_block_signals(void* self, bool b);
QThread* q_timeedit_thread(void* self);
void q_timeedit_move_to_thread(void* self, void* thread);
int32_t q_timeedit_start_timer(void* self, int interval);
void q_timeedit_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_timeedit_children(void* self);
void q_timeedit_install_event_filter(void* self, void* filterObj);
void q_timeedit_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_timeedit_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_timeedit_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_timeedit_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_timeedit_disconnect_with_q_meta_object_connection(void* param1);
void q_timeedit_dump_object_tree(void* self);
void q_timeedit_dump_object_info(void* self);
bool q_timeedit_set_property(void* self, const char* name, void* value);
QVariant* q_timeedit_property(void* self, const char* name);
const char** q_timeedit_dynamic_property_names(void* self);
QBindingStorage* q_timeedit_binding_storage(void* self);
QBindingStorage* q_timeedit_binding_storage2(void* self);
void q_timeedit_destroyed(void* self);
void q_timeedit_on_destroyed(void* self, void (*slot)(void*));
QObject* q_timeedit_parent(void* self);
bool q_timeedit_inherits(void* self, const char* classname);
void q_timeedit_delete_later(void* self);
int32_t q_timeedit_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_timeedit_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_timeedit_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_timeedit_destroyed1(void* self, void* param1);
void q_timeedit_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_timeedit_painting_active(void* self);
int32_t q_timeedit_width_m_m(void* self);
int32_t q_timeedit_height_m_m(void* self);
int32_t q_timeedit_logical_dpi_x(void* self);
int32_t q_timeedit_logical_dpi_y(void* self);
int32_t q_timeedit_physical_dpi_x(void* self);
int32_t q_timeedit_physical_dpi_y(void* self);
double q_timeedit_device_pixel_ratio(void* self);
double q_timeedit_device_pixel_ratio_f(void* self);
int32_t q_timeedit_color_count(void* self);
int32_t q_timeedit_depth(void* self);
double q_timeedit_device_pixel_ratio_f_scale();
QSize* q_timeedit_size_hint(void* self);
QSize* q_timeedit_qbase_size_hint(void* self);
void q_timeedit_on_size_hint(void* self, QSize* (*slot)());
void q_timeedit_clear(void* self);
void q_timeedit_qbase_clear(void* self);
void q_timeedit_on_clear(void* self, void (*slot)());
void q_timeedit_step_by(void* self, int steps);
void q_timeedit_qbase_step_by(void* self, int steps);
void q_timeedit_on_step_by(void* self, void (*slot)(void*, int));
bool q_timeedit_event(void* self, void* event);
bool q_timeedit_qbase_event(void* self, void* event);
void q_timeedit_on_event(void* self, bool (*slot)(void*, void*));
void q_timeedit_key_press_event(void* self, void* event);
void q_timeedit_qbase_key_press_event(void* self, void* event);
void q_timeedit_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_timeedit_wheel_event(void* self, void* event);
void q_timeedit_qbase_wheel_event(void* self, void* event);
void q_timeedit_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_timeedit_focus_in_event(void* self, void* event);
void q_timeedit_qbase_focus_in_event(void* self, void* event);
void q_timeedit_on_focus_in_event(void* self, void (*slot)(void*, void*));
bool q_timeedit_focus_next_prev_child(void* self, bool next);
bool q_timeedit_qbase_focus_next_prev_child(void* self, bool next);
void q_timeedit_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
int64_t q_timeedit_validate(void* self, const char* input, int* pos);
int64_t q_timeedit_qbase_validate(void* self, const char* input, int* pos);
void q_timeedit_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
void q_timeedit_fixup(void* self, const char* input);
void q_timeedit_qbase_fixup(void* self, const char* input);
void q_timeedit_on_fixup(void* self, void (*slot)(void*, const char*));
QDateTime* q_timeedit_date_time_from_text(void* self, const char* text);
QDateTime* q_timeedit_qbase_date_time_from_text(void* self, const char* text);
void q_timeedit_on_date_time_from_text(void* self, QDateTime* (*slot)(void*, const char*));
const char* q_timeedit_text_from_date_time(void* self, void* dt);
const char* q_timeedit_qbase_text_from_date_time(void* self, void* dt);
void q_timeedit_on_text_from_date_time(void* self, const char* (*slot)(void*, void*));
int64_t q_timeedit_step_enabled(void* self);
int64_t q_timeedit_qbase_step_enabled(void* self);
void q_timeedit_on_step_enabled(void* self, int64_t (*slot)());
void q_timeedit_mouse_press_event(void* self, void* event);
void q_timeedit_qbase_mouse_press_event(void* self, void* event);
void q_timeedit_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_timeedit_paint_event(void* self, void* event);
void q_timeedit_qbase_paint_event(void* self, void* event);
void q_timeedit_on_paint_event(void* self, void (*slot)(void*, void*));
void q_timeedit_init_style_option(void* self, void* option);
void q_timeedit_qbase_init_style_option(void* self, void* option);
void q_timeedit_on_init_style_option(void* self, void (*slot)(void*, void*));
QSize* q_timeedit_minimum_size_hint(void* self);
QSize* q_timeedit_qbase_minimum_size_hint(void* self);
void q_timeedit_on_minimum_size_hint(void* self, QSize* (*slot)());
QVariant* q_timeedit_input_method_query(void* self, int64_t param1);
QVariant* q_timeedit_qbase_input_method_query(void* self, int64_t param1);
void q_timeedit_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_timeedit_resize_event(void* self, void* event);
void q_timeedit_qbase_resize_event(void* self, void* event);
void q_timeedit_on_resize_event(void* self, void (*slot)(void*, void*));
void q_timeedit_key_release_event(void* self, void* event);
void q_timeedit_qbase_key_release_event(void* self, void* event);
void q_timeedit_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_timeedit_focus_out_event(void* self, void* event);
void q_timeedit_qbase_focus_out_event(void* self, void* event);
void q_timeedit_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_timeedit_context_menu_event(void* self, void* event);
void q_timeedit_qbase_context_menu_event(void* self, void* event);
void q_timeedit_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_timeedit_change_event(void* self, void* event);
void q_timeedit_qbase_change_event(void* self, void* event);
void q_timeedit_on_change_event(void* self, void (*slot)(void*, void*));
void q_timeedit_close_event(void* self, void* event);
void q_timeedit_qbase_close_event(void* self, void* event);
void q_timeedit_on_close_event(void* self, void (*slot)(void*, void*));
void q_timeedit_hide_event(void* self, void* event);
void q_timeedit_qbase_hide_event(void* self, void* event);
void q_timeedit_on_hide_event(void* self, void (*slot)(void*, void*));
void q_timeedit_mouse_release_event(void* self, void* event);
void q_timeedit_qbase_mouse_release_event(void* self, void* event);
void q_timeedit_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_timeedit_mouse_move_event(void* self, void* event);
void q_timeedit_qbase_mouse_move_event(void* self, void* event);
void q_timeedit_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_timeedit_timer_event(void* self, void* event);
void q_timeedit_qbase_timer_event(void* self, void* event);
void q_timeedit_on_timer_event(void* self, void (*slot)(void*, void*));
void q_timeedit_show_event(void* self, void* event);
void q_timeedit_qbase_show_event(void* self, void* event);
void q_timeedit_on_show_event(void* self, void (*slot)(void*, void*));
int32_t q_timeedit_dev_type(void* self);
int32_t q_timeedit_qbase_dev_type(void* self);
void q_timeedit_on_dev_type(void* self, int32_t (*slot)());
void q_timeedit_set_visible(void* self, bool visible);
void q_timeedit_qbase_set_visible(void* self, bool visible);
void q_timeedit_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_timeedit_height_for_width(void* self, int param1);
int32_t q_timeedit_qbase_height_for_width(void* self, int param1);
void q_timeedit_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_timeedit_has_height_for_width(void* self);
bool q_timeedit_qbase_has_height_for_width(void* self);
void q_timeedit_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_timeedit_paint_engine(void* self);
QPaintEngine* q_timeedit_qbase_paint_engine(void* self);
void q_timeedit_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_timeedit_mouse_double_click_event(void* self, void* event);
void q_timeedit_qbase_mouse_double_click_event(void* self, void* event);
void q_timeedit_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_timeedit_enter_event(void* self, void* event);
void q_timeedit_qbase_enter_event(void* self, void* event);
void q_timeedit_on_enter_event(void* self, void (*slot)(void*, void*));
void q_timeedit_leave_event(void* self, void* event);
void q_timeedit_qbase_leave_event(void* self, void* event);
void q_timeedit_on_leave_event(void* self, void (*slot)(void*, void*));
void q_timeedit_move_event(void* self, void* event);
void q_timeedit_qbase_move_event(void* self, void* event);
void q_timeedit_on_move_event(void* self, void (*slot)(void*, void*));
void q_timeedit_tablet_event(void* self, void* event);
void q_timeedit_qbase_tablet_event(void* self, void* event);
void q_timeedit_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_timeedit_action_event(void* self, void* event);
void q_timeedit_qbase_action_event(void* self, void* event);
void q_timeedit_on_action_event(void* self, void (*slot)(void*, void*));
void q_timeedit_drag_enter_event(void* self, void* event);
void q_timeedit_qbase_drag_enter_event(void* self, void* event);
void q_timeedit_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_timeedit_drag_move_event(void* self, void* event);
void q_timeedit_qbase_drag_move_event(void* self, void* event);
void q_timeedit_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_timeedit_drag_leave_event(void* self, void* event);
void q_timeedit_qbase_drag_leave_event(void* self, void* event);
void q_timeedit_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_timeedit_drop_event(void* self, void* event);
void q_timeedit_qbase_drop_event(void* self, void* event);
void q_timeedit_on_drop_event(void* self, void (*slot)(void*, void*));
bool q_timeedit_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_timeedit_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_timeedit_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_timeedit_metric(void* self, int64_t param1);
int32_t q_timeedit_qbase_metric(void* self, int64_t param1);
void q_timeedit_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_timeedit_init_painter(void* self, void* painter);
void q_timeedit_qbase_init_painter(void* self, void* painter);
void q_timeedit_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_timeedit_redirected(void* self, void* offset);
QPaintDevice* q_timeedit_qbase_redirected(void* self, void* offset);
void q_timeedit_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_timeedit_shared_painter(void* self);
QPainter* q_timeedit_qbase_shared_painter(void* self);
void q_timeedit_on_shared_painter(void* self, QPainter* (*slot)());
void q_timeedit_input_method_event(void* self, void* param1);
void q_timeedit_qbase_input_method_event(void* self, void* param1);
void q_timeedit_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_timeedit_event_filter(void* self, void* watched, void* event);
bool q_timeedit_qbase_event_filter(void* self, void* watched, void* event);
void q_timeedit_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_timeedit_child_event(void* self, void* event);
void q_timeedit_qbase_child_event(void* self, void* event);
void q_timeedit_on_child_event(void* self, void (*slot)(void*, void*));
void q_timeedit_custom_event(void* self, void* event);
void q_timeedit_qbase_custom_event(void* self, void* event);
void q_timeedit_on_custom_event(void* self, void (*slot)(void*, void*));
void q_timeedit_connect_notify(void* self, void* signal);
void q_timeedit_qbase_connect_notify(void* self, void* signal);
void q_timeedit_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_timeedit_disconnect_notify(void* self, void* signal);
void q_timeedit_qbase_disconnect_notify(void* self, void* signal);
void q_timeedit_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QLineEdit* q_timeedit_line_edit(void* self);
QLineEdit* q_timeedit_qbase_line_edit(void* self);
void q_timeedit_on_line_edit(void* self, QLineEdit* (*slot)());
void q_timeedit_set_line_edit(void* self, void* edit);
void q_timeedit_qbase_set_line_edit(void* self, void* edit);
void q_timeedit_on_set_line_edit(void* self, void (*slot)(void*, void*));
void q_timeedit_update_micro_focus(void* self);
void q_timeedit_qbase_update_micro_focus(void* self);
void q_timeedit_on_update_micro_focus(void* self, void (*slot)());
void q_timeedit_create(void* self);
void q_timeedit_qbase_create(void* self);
void q_timeedit_on_create(void* self, void (*slot)());
void q_timeedit_destroy(void* self);
void q_timeedit_qbase_destroy(void* self);
void q_timeedit_on_destroy(void* self, void (*slot)());
bool q_timeedit_focus_next_child(void* self);
bool q_timeedit_qbase_focus_next_child(void* self);
void q_timeedit_on_focus_next_child(void* self, bool (*slot)());
bool q_timeedit_focus_previous_child(void* self);
bool q_timeedit_qbase_focus_previous_child(void* self);
void q_timeedit_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_timeedit_sender(void* self);
QObject* q_timeedit_qbase_sender(void* self);
void q_timeedit_on_sender(void* self, QObject* (*slot)());
int32_t q_timeedit_sender_signal_index(void* self);
int32_t q_timeedit_qbase_sender_signal_index(void* self);
void q_timeedit_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_timeedit_receivers(void* self, const char* signal);
int32_t q_timeedit_qbase_receivers(void* self, const char* signal);
void q_timeedit_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_timeedit_is_signal_connected(void* self, void* signal);
bool q_timeedit_qbase_is_signal_connected(void* self, void* signal);
void q_timeedit_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_timeedit_delete(void* self);

QDateEdit* q_dateedit_new(void* parent);
QDateEdit* q_dateedit_new2();
QDateEdit* q_dateedit_new3(void* date);
QDateEdit* q_dateedit_new4(void* date, void* parent);
QMetaObject* q_dateedit_meta_object(void* self);
void* q_dateedit_metacast(void* self, const char* param1);
int32_t q_dateedit_metacall(void* self, int64_t param1, int param2, void* param3);
void q_dateedit_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_dateedit_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_dateedit_tr(const char* s);
void q_dateedit_user_date_changed(void* self, void* date);
void q_dateedit_on_user_date_changed(void* self, void (*slot)(void*, void*));
const char* q_dateedit_tr2(const char* s, const char* c);
const char* q_dateedit_tr3(const char* s, const char* c, int n);
QDateTime* q_dateedit_date_time(void* self);
QDate* q_dateedit_date(void* self);
QTime* q_dateedit_time(void* self);
QCalendar* q_dateedit_calendar(void* self);
void q_dateedit_set_calendar(void* self, void* calendar);
QDateTime* q_dateedit_minimum_date_time(void* self);
void q_dateedit_clear_minimum_date_time(void* self);
void q_dateedit_set_minimum_date_time(void* self, void* dt);
QDateTime* q_dateedit_maximum_date_time(void* self);
void q_dateedit_clear_maximum_date_time(void* self);
void q_dateedit_set_maximum_date_time(void* self, void* dt);
void q_dateedit_set_date_time_range(void* self, void* min, void* max);
QDate* q_dateedit_minimum_date(void* self);
void q_dateedit_set_minimum_date(void* self, void* min);
void q_dateedit_clear_minimum_date(void* self);
QDate* q_dateedit_maximum_date(void* self);
void q_dateedit_set_maximum_date(void* self, void* max);
void q_dateedit_clear_maximum_date(void* self);
void q_dateedit_set_date_range(void* self, void* min, void* max);
QTime* q_dateedit_minimum_time(void* self);
void q_dateedit_set_minimum_time(void* self, void* min);
void q_dateedit_clear_minimum_time(void* self);
QTime* q_dateedit_maximum_time(void* self);
void q_dateedit_set_maximum_time(void* self, void* max);
void q_dateedit_clear_maximum_time(void* self);
void q_dateedit_set_time_range(void* self, void* min, void* max);
int64_t q_dateedit_displayed_sections(void* self);
int64_t q_dateedit_current_section(void* self);
int64_t q_dateedit_section_at(void* self, int index);
void q_dateedit_set_current_section(void* self, int64_t section);
int32_t q_dateedit_current_section_index(void* self);
void q_dateedit_set_current_section_index(void* self, int index);
QCalendarWidget* q_dateedit_calendar_widget(void* self);
void q_dateedit_set_calendar_widget(void* self, void* calendarWidget);
int32_t q_dateedit_section_count(void* self);
void q_dateedit_set_selected_section(void* self, int64_t section);
const char* q_dateedit_section_text(void* self, int64_t section);
const char* q_dateedit_display_format(void* self);
void q_dateedit_set_display_format(void* self, const char* format);
bool q_dateedit_calendar_popup(void* self);
void q_dateedit_set_calendar_popup(void* self, bool enable);
int64_t q_dateedit_time_spec(void* self);
void q_dateedit_set_time_spec(void* self, int64_t spec);
void q_dateedit_date_time_changed(void* self, void* dateTime);
void q_dateedit_on_date_time_changed(void* self, void (*slot)(void*, void*));
void q_dateedit_time_changed(void* self, void* time);
void q_dateedit_on_time_changed(void* self, void (*slot)(void*, void*));
void q_dateedit_date_changed(void* self, void* date);
void q_dateedit_on_date_changed(void* self, void (*slot)(void*, void*));
void q_dateedit_set_date_time(void* self, void* dateTime);
void q_dateedit_set_date(void* self, void* date);
void q_dateedit_set_time(void* self, void* time);
int64_t q_dateedit_button_symbols(void* self);
void q_dateedit_set_button_symbols(void* self, int64_t bs);
void q_dateedit_set_correction_mode(void* self, int64_t cm);
int64_t q_dateedit_correction_mode(void* self);
bool q_dateedit_has_acceptable_input(void* self);
const char* q_dateedit_text(void* self);
const char* q_dateedit_special_value_text(void* self);
void q_dateedit_set_special_value_text(void* self, const char* txt);
bool q_dateedit_wrapping(void* self);
void q_dateedit_set_wrapping(void* self, bool w);
void q_dateedit_set_read_only(void* self, bool r);
bool q_dateedit_is_read_only(void* self);
void q_dateedit_set_keyboard_tracking(void* self, bool kt);
bool q_dateedit_keyboard_tracking(void* self);
void q_dateedit_set_alignment(void* self, int64_t flag);
int64_t q_dateedit_alignment(void* self);
void q_dateedit_set_frame(void* self, bool frame);
bool q_dateedit_has_frame(void* self);
void q_dateedit_set_accelerated(void* self, bool on);
bool q_dateedit_is_accelerated(void* self);
void q_dateedit_set_group_separator_shown(void* self, bool shown);
bool q_dateedit_is_group_separator_shown(void* self);
void q_dateedit_interpret_text(void* self);
void q_dateedit_step_up(void* self);
void q_dateedit_step_down(void* self);
void q_dateedit_select_all(void* self);
void q_dateedit_editing_finished(void* self);
void q_dateedit_on_editing_finished(void* self, void (*slot)(void*));
uintptr_t q_dateedit_win_id(void* self);
void q_dateedit_create_win_id(void* self);
uintptr_t q_dateedit_internal_win_id(void* self);
uintptr_t q_dateedit_effective_win_id(void* self);
QStyle* q_dateedit_style(void* self);
void q_dateedit_set_style(void* self, void* style);
bool q_dateedit_is_top_level(void* self);
bool q_dateedit_is_window(void* self);
bool q_dateedit_is_modal(void* self);
int64_t q_dateedit_window_modality(void* self);
void q_dateedit_set_window_modality(void* self, int64_t windowModality);
bool q_dateedit_is_enabled(void* self);
bool q_dateedit_is_enabled_to(void* self, void* param1);
void q_dateedit_set_enabled(void* self, bool enabled);
void q_dateedit_set_disabled(void* self, bool disabled);
void q_dateedit_set_window_modified(void* self, bool windowModified);
QRect* q_dateedit_frame_geometry(void* self);
QRect* q_dateedit_geometry(void* self);
QRect* q_dateedit_normal_geometry(void* self);
int32_t q_dateedit_x(void* self);
int32_t q_dateedit_y(void* self);
QPoint* q_dateedit_pos(void* self);
QSize* q_dateedit_frame_size(void* self);
QSize* q_dateedit_size(void* self);
int32_t q_dateedit_width(void* self);
int32_t q_dateedit_height(void* self);
QRect* q_dateedit_rect(void* self);
QRect* q_dateedit_children_rect(void* self);
QRegion* q_dateedit_children_region(void* self);
QSize* q_dateedit_minimum_size(void* self);
QSize* q_dateedit_maximum_size(void* self);
int32_t q_dateedit_minimum_width(void* self);
int32_t q_dateedit_minimum_height(void* self);
int32_t q_dateedit_maximum_width(void* self);
int32_t q_dateedit_maximum_height(void* self);
void q_dateedit_set_minimum_size(void* self, void* minimumSize);
void q_dateedit_set_minimum_size2(void* self, int minw, int minh);
void q_dateedit_set_maximum_size(void* self, void* maximumSize);
void q_dateedit_set_maximum_size2(void* self, int maxw, int maxh);
void q_dateedit_set_minimum_width(void* self, int minw);
void q_dateedit_set_minimum_height(void* self, int minh);
void q_dateedit_set_maximum_width(void* self, int maxw);
void q_dateedit_set_maximum_height(void* self, int maxh);
QSize* q_dateedit_size_increment(void* self);
void q_dateedit_set_size_increment(void* self, void* sizeIncrement);
void q_dateedit_set_size_increment2(void* self, int w, int h);
QSize* q_dateedit_base_size(void* self);
void q_dateedit_set_base_size(void* self, void* baseSize);
void q_dateedit_set_base_size2(void* self, int basew, int baseh);
void q_dateedit_set_fixed_size(void* self, void* fixedSize);
void q_dateedit_set_fixed_size2(void* self, int w, int h);
void q_dateedit_set_fixed_width(void* self, int w);
void q_dateedit_set_fixed_height(void* self, int h);
QPointF* q_dateedit_map_to_global(void* self, void* param1);
QPoint* q_dateedit_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_dateedit_map_from_global(void* self, void* param1);
QPoint* q_dateedit_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_dateedit_map_to_parent(void* self, void* param1);
QPoint* q_dateedit_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_dateedit_map_from_parent(void* self, void* param1);
QPoint* q_dateedit_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_dateedit_map_to(void* self, void* param1, void* param2);
QPoint* q_dateedit_map_to2(void* self, void* param1, void* param2);
QPointF* q_dateedit_map_from(void* self, void* param1, void* param2);
QPoint* q_dateedit_map_from2(void* self, void* param1, void* param2);
QWidget* q_dateedit_window(void* self);
QWidget* q_dateedit_native_parent_widget(void* self);
QWidget* q_dateedit_top_level_widget(void* self);
QPalette* q_dateedit_palette(void* self);
void q_dateedit_set_palette(void* self, void* palette);
void q_dateedit_set_background_role(void* self, int64_t backgroundRole);
int64_t q_dateedit_background_role(void* self);
void q_dateedit_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_dateedit_foreground_role(void* self);
QFont* q_dateedit_font(void* self);
void q_dateedit_set_font(void* self, void* font);
QFontMetrics* q_dateedit_font_metrics(void* self);
QFontInfo* q_dateedit_font_info(void* self);
QCursor* q_dateedit_cursor(void* self);
void q_dateedit_set_cursor(void* self, void* cursor);
void q_dateedit_unset_cursor(void* self);
void q_dateedit_set_mouse_tracking(void* self, bool enable);
bool q_dateedit_has_mouse_tracking(void* self);
bool q_dateedit_under_mouse(void* self);
void q_dateedit_set_tablet_tracking(void* self, bool enable);
bool q_dateedit_has_tablet_tracking(void* self);
void q_dateedit_set_mask(void* self, void* mask);
void q_dateedit_set_mask_with_mask(void* self, void* mask);
QRegion* q_dateedit_mask(void* self);
void q_dateedit_clear_mask(void* self);
void q_dateedit_render(void* self, void* target);
void q_dateedit_render_with_painter(void* self, void* painter);
QPixmap* q_dateedit_grab(void* self);
QGraphicsEffect* q_dateedit_graphics_effect(void* self);
void q_dateedit_set_graphics_effect(void* self, void* effect);
void q_dateedit_grab_gesture(void* self, int64_t typeVal);
void q_dateedit_ungrab_gesture(void* self, int64_t typeVal);
void q_dateedit_set_window_title(void* self, const char* windowTitle);
void q_dateedit_set_style_sheet(void* self, const char* styleSheet);
const char* q_dateedit_style_sheet(void* self);
const char* q_dateedit_window_title(void* self);
void q_dateedit_set_window_icon(void* self, void* icon);
QIcon* q_dateedit_window_icon(void* self);
void q_dateedit_set_window_icon_text(void* self, const char* windowIconText);
const char* q_dateedit_window_icon_text(void* self);
void q_dateedit_set_window_role(void* self, const char* windowRole);
const char* q_dateedit_window_role(void* self);
void q_dateedit_set_window_file_path(void* self, const char* filePath);
const char* q_dateedit_window_file_path(void* self);
void q_dateedit_set_window_opacity(void* self, double level);
double q_dateedit_window_opacity(void* self);
bool q_dateedit_is_window_modified(void* self);
void q_dateedit_set_tool_tip(void* self, const char* toolTip);
const char* q_dateedit_tool_tip(void* self);
void q_dateedit_set_tool_tip_duration(void* self, int msec);
int32_t q_dateedit_tool_tip_duration(void* self);
void q_dateedit_set_status_tip(void* self, const char* statusTip);
const char* q_dateedit_status_tip(void* self);
void q_dateedit_set_whats_this(void* self, const char* whatsThis);
const char* q_dateedit_whats_this(void* self);
const char* q_dateedit_accessible_name(void* self);
void q_dateedit_set_accessible_name(void* self, const char* name);
const char* q_dateedit_accessible_description(void* self);
void q_dateedit_set_accessible_description(void* self, const char* description);
void q_dateedit_set_layout_direction(void* self, int64_t direction);
int64_t q_dateedit_layout_direction(void* self);
void q_dateedit_unset_layout_direction(void* self);
void q_dateedit_set_locale(void* self, void* locale);
QLocale* q_dateedit_locale(void* self);
void q_dateedit_unset_locale(void* self);
bool q_dateedit_is_right_to_left(void* self);
bool q_dateedit_is_left_to_right(void* self);
void q_dateedit_set_focus(void* self);
bool q_dateedit_is_active_window(void* self);
void q_dateedit_activate_window(void* self);
void q_dateedit_clear_focus(void* self);
void q_dateedit_set_focus_with_reason(void* self, int64_t reason);
int64_t q_dateedit_focus_policy(void* self);
void q_dateedit_set_focus_policy(void* self, int64_t policy);
bool q_dateedit_has_focus(void* self);
void q_dateedit_set_tab_order(void* param1, void* param2);
void q_dateedit_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_dateedit_focus_proxy(void* self);
int64_t q_dateedit_context_menu_policy(void* self);
void q_dateedit_set_context_menu_policy(void* self, int64_t policy);
void q_dateedit_grab_mouse(void* self);
void q_dateedit_grab_mouse_with_q_cursor(void* self, void* param1);
void q_dateedit_release_mouse(void* self);
void q_dateedit_grab_keyboard(void* self);
void q_dateedit_release_keyboard(void* self);
int32_t q_dateedit_grab_shortcut(void* self, void* key);
void q_dateedit_release_shortcut(void* self, int id);
void q_dateedit_set_shortcut_enabled(void* self, int id);
void q_dateedit_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_dateedit_mouse_grabber();
QWidget* q_dateedit_keyboard_grabber();
bool q_dateedit_updates_enabled(void* self);
void q_dateedit_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_dateedit_graphics_proxy_widget(void* self);
void q_dateedit_update(void* self);
void q_dateedit_repaint(void* self);
void q_dateedit_update2(void* self, int x, int y, int w, int h);
void q_dateedit_update_with_q_rect(void* self, void* param1);
void q_dateedit_update_with_q_region(void* self, void* param1);
void q_dateedit_repaint2(void* self, int x, int y, int w, int h);
void q_dateedit_repaint_with_q_rect(void* self, void* param1);
void q_dateedit_repaint_with_q_region(void* self, void* param1);
void q_dateedit_set_hidden(void* self, bool hidden);
void q_dateedit_show(void* self);
void q_dateedit_hide(void* self);
void q_dateedit_show_minimized(void* self);
void q_dateedit_show_maximized(void* self);
void q_dateedit_show_full_screen(void* self);
void q_dateedit_show_normal(void* self);
bool q_dateedit_close(void* self);
void q_dateedit_raise(void* self);
void q_dateedit_lower(void* self);
void q_dateedit_stack_under(void* self, void* param1);
void q_dateedit_move(void* self, int x, int y);
void q_dateedit_move_with_q_point(void* self, void* param1);
void q_dateedit_resize(void* self, int w, int h);
void q_dateedit_resize_with_q_size(void* self, void* param1);
void q_dateedit_set_geometry(void* self, int x, int y, int w, int h);
void q_dateedit_set_geometry_with_geometry(void* self, void* geometry);
char* q_dateedit_save_geometry(void* self);
bool q_dateedit_restore_geometry(void* self, const char* geometry);
void q_dateedit_adjust_size(void* self);
bool q_dateedit_is_visible(void* self);
bool q_dateedit_is_visible_to(void* self, void* param1);
bool q_dateedit_is_hidden(void* self);
bool q_dateedit_is_minimized(void* self);
bool q_dateedit_is_maximized(void* self);
bool q_dateedit_is_full_screen(void* self);
int64_t q_dateedit_window_state(void* self);
void q_dateedit_set_window_state(void* self, int64_t state);
void q_dateedit_override_window_state(void* self, int64_t state);
QSizePolicy* q_dateedit_size_policy(void* self);
void q_dateedit_set_size_policy(void* self, void* sizePolicy);
void q_dateedit_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_dateedit_visible_region(void* self);
void q_dateedit_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_dateedit_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_dateedit_contents_margins(void* self);
QRect* q_dateedit_contents_rect(void* self);
QLayout* q_dateedit_layout(void* self);
void q_dateedit_set_layout(void* self, void* layout);
void q_dateedit_update_geometry(void* self);
void q_dateedit_set_parent(void* self, void* parent);
void q_dateedit_set_parent2(void* self, void* parent, int64_t f);
void q_dateedit_scroll(void* self, int dx, int dy);
void q_dateedit_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_dateedit_focus_widget(void* self);
QWidget* q_dateedit_next_in_focus_chain(void* self);
QWidget* q_dateedit_previous_in_focus_chain(void* self);
bool q_dateedit_accept_drops(void* self);
void q_dateedit_set_accept_drops(void* self, bool on);
void q_dateedit_add_action(void* self, void* action);
void q_dateedit_add_actions(void* self, void* actions[]);
void q_dateedit_insert_actions(void* self, void* before, void* actions[]);
void q_dateedit_insert_action(void* self, void* before, void* action);
void q_dateedit_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_dateedit_actions(void* self);
QAction* q_dateedit_add_action_with_text(void* self, const char* text);
QAction* q_dateedit_add_action2(void* self, void* icon, const char* text);
QAction* q_dateedit_add_action3(void* self, const char* text, void* shortcut);
QAction* q_dateedit_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_dateedit_parent_widget(void* self);
void q_dateedit_set_window_flags(void* self, int64_t typeVal);
int64_t q_dateedit_window_flags(void* self);
void q_dateedit_set_window_flag(void* self, int64_t param1);
void q_dateedit_override_window_flags(void* self, int64_t typeVal);
int64_t q_dateedit_window_type(void* self);
QWidget* q_dateedit_find(uint64_t param1);
QWidget* q_dateedit_child_at(void* self, int x, int y);
QWidget* q_dateedit_child_at_with_q_point(void* self, void* p);
void q_dateedit_set_attribute(void* self, int64_t param1);
bool q_dateedit_test_attribute(void* self, int64_t param1);
void q_dateedit_ensure_polished(void* self);
bool q_dateedit_is_ancestor_of(void* self, void* child);
bool q_dateedit_auto_fill_background(void* self);
void q_dateedit_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_dateedit_backing_store(void* self);
QWindow* q_dateedit_window_handle(void* self);
QScreen* q_dateedit_screen(void* self);
void q_dateedit_set_screen(void* self, void* screen);
QWidget* q_dateedit_create_window_container(void* window);
void q_dateedit_window_title_changed(void* self, const char* title);
void q_dateedit_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_dateedit_window_icon_changed(void* self, void* icon);
void q_dateedit_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_dateedit_window_icon_text_changed(void* self, const char* iconText);
void q_dateedit_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_dateedit_custom_context_menu_requested(void* self, void* pos);
void q_dateedit_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_dateedit_input_method_hints(void* self);
void q_dateedit_set_input_method_hints(void* self, int64_t hints);
void q_dateedit_render2(void* self, void* target, void* targetOffset);
void q_dateedit_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_dateedit_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_dateedit_render22(void* self, void* painter, void* targetOffset);
void q_dateedit_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_dateedit_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_dateedit_grab1(void* self, void* rectangle);
void q_dateedit_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_dateedit_grab_shortcut2(void* self, void* key, int64_t context);
void q_dateedit_set_shortcut_enabled2(void* self, int id, bool enable);
void q_dateedit_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_dateedit_set_window_flag2(void* self, int64_t param1, bool on);
void q_dateedit_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_dateedit_create_window_container2(void* window, void* parent);
QWidget* q_dateedit_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_dateedit_object_name(void* self);
void q_dateedit_set_object_name(void* self, const char* name);
bool q_dateedit_is_widget_type(void* self);
bool q_dateedit_is_window_type(void* self);
bool q_dateedit_is_quick_item_type(void* self);
bool q_dateedit_signals_blocked(void* self);
bool q_dateedit_block_signals(void* self, bool b);
QThread* q_dateedit_thread(void* self);
void q_dateedit_move_to_thread(void* self, void* thread);
int32_t q_dateedit_start_timer(void* self, int interval);
void q_dateedit_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_dateedit_children(void* self);
void q_dateedit_install_event_filter(void* self, void* filterObj);
void q_dateedit_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_dateedit_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_dateedit_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_dateedit_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_dateedit_disconnect_with_q_meta_object_connection(void* param1);
void q_dateedit_dump_object_tree(void* self);
void q_dateedit_dump_object_info(void* self);
bool q_dateedit_set_property(void* self, const char* name, void* value);
QVariant* q_dateedit_property(void* self, const char* name);
const char** q_dateedit_dynamic_property_names(void* self);
QBindingStorage* q_dateedit_binding_storage(void* self);
QBindingStorage* q_dateedit_binding_storage2(void* self);
void q_dateedit_destroyed(void* self);
void q_dateedit_on_destroyed(void* self, void (*slot)(void*));
QObject* q_dateedit_parent(void* self);
bool q_dateedit_inherits(void* self, const char* classname);
void q_dateedit_delete_later(void* self);
int32_t q_dateedit_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_dateedit_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_dateedit_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_dateedit_destroyed1(void* self, void* param1);
void q_dateedit_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_dateedit_painting_active(void* self);
int32_t q_dateedit_width_m_m(void* self);
int32_t q_dateedit_height_m_m(void* self);
int32_t q_dateedit_logical_dpi_x(void* self);
int32_t q_dateedit_logical_dpi_y(void* self);
int32_t q_dateedit_physical_dpi_x(void* self);
int32_t q_dateedit_physical_dpi_y(void* self);
double q_dateedit_device_pixel_ratio(void* self);
double q_dateedit_device_pixel_ratio_f(void* self);
int32_t q_dateedit_color_count(void* self);
int32_t q_dateedit_depth(void* self);
double q_dateedit_device_pixel_ratio_f_scale();
QSize* q_dateedit_size_hint(void* self);
QSize* q_dateedit_qbase_size_hint(void* self);
void q_dateedit_on_size_hint(void* self, QSize* (*slot)());
void q_dateedit_clear(void* self);
void q_dateedit_qbase_clear(void* self);
void q_dateedit_on_clear(void* self, void (*slot)());
void q_dateedit_step_by(void* self, int steps);
void q_dateedit_qbase_step_by(void* self, int steps);
void q_dateedit_on_step_by(void* self, void (*slot)(void*, int));
bool q_dateedit_event(void* self, void* event);
bool q_dateedit_qbase_event(void* self, void* event);
void q_dateedit_on_event(void* self, bool (*slot)(void*, void*));
void q_dateedit_key_press_event(void* self, void* event);
void q_dateedit_qbase_key_press_event(void* self, void* event);
void q_dateedit_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_dateedit_wheel_event(void* self, void* event);
void q_dateedit_qbase_wheel_event(void* self, void* event);
void q_dateedit_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_dateedit_focus_in_event(void* self, void* event);
void q_dateedit_qbase_focus_in_event(void* self, void* event);
void q_dateedit_on_focus_in_event(void* self, void (*slot)(void*, void*));
bool q_dateedit_focus_next_prev_child(void* self, bool next);
bool q_dateedit_qbase_focus_next_prev_child(void* self, bool next);
void q_dateedit_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
int64_t q_dateedit_validate(void* self, const char* input, int* pos);
int64_t q_dateedit_qbase_validate(void* self, const char* input, int* pos);
void q_dateedit_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
void q_dateedit_fixup(void* self, const char* input);
void q_dateedit_qbase_fixup(void* self, const char* input);
void q_dateedit_on_fixup(void* self, void (*slot)(void*, const char*));
QDateTime* q_dateedit_date_time_from_text(void* self, const char* text);
QDateTime* q_dateedit_qbase_date_time_from_text(void* self, const char* text);
void q_dateedit_on_date_time_from_text(void* self, QDateTime* (*slot)(void*, const char*));
const char* q_dateedit_text_from_date_time(void* self, void* dt);
const char* q_dateedit_qbase_text_from_date_time(void* self, void* dt);
void q_dateedit_on_text_from_date_time(void* self, const char* (*slot)(void*, void*));
int64_t q_dateedit_step_enabled(void* self);
int64_t q_dateedit_qbase_step_enabled(void* self);
void q_dateedit_on_step_enabled(void* self, int64_t (*slot)());
void q_dateedit_mouse_press_event(void* self, void* event);
void q_dateedit_qbase_mouse_press_event(void* self, void* event);
void q_dateedit_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_dateedit_paint_event(void* self, void* event);
void q_dateedit_qbase_paint_event(void* self, void* event);
void q_dateedit_on_paint_event(void* self, void (*slot)(void*, void*));
void q_dateedit_init_style_option(void* self, void* option);
void q_dateedit_qbase_init_style_option(void* self, void* option);
void q_dateedit_on_init_style_option(void* self, void (*slot)(void*, void*));
QSize* q_dateedit_minimum_size_hint(void* self);
QSize* q_dateedit_qbase_minimum_size_hint(void* self);
void q_dateedit_on_minimum_size_hint(void* self, QSize* (*slot)());
QVariant* q_dateedit_input_method_query(void* self, int64_t param1);
QVariant* q_dateedit_qbase_input_method_query(void* self, int64_t param1);
void q_dateedit_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_dateedit_resize_event(void* self, void* event);
void q_dateedit_qbase_resize_event(void* self, void* event);
void q_dateedit_on_resize_event(void* self, void (*slot)(void*, void*));
void q_dateedit_key_release_event(void* self, void* event);
void q_dateedit_qbase_key_release_event(void* self, void* event);
void q_dateedit_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_dateedit_focus_out_event(void* self, void* event);
void q_dateedit_qbase_focus_out_event(void* self, void* event);
void q_dateedit_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_dateedit_context_menu_event(void* self, void* event);
void q_dateedit_qbase_context_menu_event(void* self, void* event);
void q_dateedit_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_dateedit_change_event(void* self, void* event);
void q_dateedit_qbase_change_event(void* self, void* event);
void q_dateedit_on_change_event(void* self, void (*slot)(void*, void*));
void q_dateedit_close_event(void* self, void* event);
void q_dateedit_qbase_close_event(void* self, void* event);
void q_dateedit_on_close_event(void* self, void (*slot)(void*, void*));
void q_dateedit_hide_event(void* self, void* event);
void q_dateedit_qbase_hide_event(void* self, void* event);
void q_dateedit_on_hide_event(void* self, void (*slot)(void*, void*));
void q_dateedit_mouse_release_event(void* self, void* event);
void q_dateedit_qbase_mouse_release_event(void* self, void* event);
void q_dateedit_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_dateedit_mouse_move_event(void* self, void* event);
void q_dateedit_qbase_mouse_move_event(void* self, void* event);
void q_dateedit_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_dateedit_timer_event(void* self, void* event);
void q_dateedit_qbase_timer_event(void* self, void* event);
void q_dateedit_on_timer_event(void* self, void (*slot)(void*, void*));
void q_dateedit_show_event(void* self, void* event);
void q_dateedit_qbase_show_event(void* self, void* event);
void q_dateedit_on_show_event(void* self, void (*slot)(void*, void*));
int32_t q_dateedit_dev_type(void* self);
int32_t q_dateedit_qbase_dev_type(void* self);
void q_dateedit_on_dev_type(void* self, int32_t (*slot)());
void q_dateedit_set_visible(void* self, bool visible);
void q_dateedit_qbase_set_visible(void* self, bool visible);
void q_dateedit_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_dateedit_height_for_width(void* self, int param1);
int32_t q_dateedit_qbase_height_for_width(void* self, int param1);
void q_dateedit_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_dateedit_has_height_for_width(void* self);
bool q_dateedit_qbase_has_height_for_width(void* self);
void q_dateedit_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_dateedit_paint_engine(void* self);
QPaintEngine* q_dateedit_qbase_paint_engine(void* self);
void q_dateedit_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_dateedit_mouse_double_click_event(void* self, void* event);
void q_dateedit_qbase_mouse_double_click_event(void* self, void* event);
void q_dateedit_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_dateedit_enter_event(void* self, void* event);
void q_dateedit_qbase_enter_event(void* self, void* event);
void q_dateedit_on_enter_event(void* self, void (*slot)(void*, void*));
void q_dateedit_leave_event(void* self, void* event);
void q_dateedit_qbase_leave_event(void* self, void* event);
void q_dateedit_on_leave_event(void* self, void (*slot)(void*, void*));
void q_dateedit_move_event(void* self, void* event);
void q_dateedit_qbase_move_event(void* self, void* event);
void q_dateedit_on_move_event(void* self, void (*slot)(void*, void*));
void q_dateedit_tablet_event(void* self, void* event);
void q_dateedit_qbase_tablet_event(void* self, void* event);
void q_dateedit_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_dateedit_action_event(void* self, void* event);
void q_dateedit_qbase_action_event(void* self, void* event);
void q_dateedit_on_action_event(void* self, void (*slot)(void*, void*));
void q_dateedit_drag_enter_event(void* self, void* event);
void q_dateedit_qbase_drag_enter_event(void* self, void* event);
void q_dateedit_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_dateedit_drag_move_event(void* self, void* event);
void q_dateedit_qbase_drag_move_event(void* self, void* event);
void q_dateedit_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_dateedit_drag_leave_event(void* self, void* event);
void q_dateedit_qbase_drag_leave_event(void* self, void* event);
void q_dateedit_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_dateedit_drop_event(void* self, void* event);
void q_dateedit_qbase_drop_event(void* self, void* event);
void q_dateedit_on_drop_event(void* self, void (*slot)(void*, void*));
bool q_dateedit_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_dateedit_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_dateedit_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_dateedit_metric(void* self, int64_t param1);
int32_t q_dateedit_qbase_metric(void* self, int64_t param1);
void q_dateedit_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_dateedit_init_painter(void* self, void* painter);
void q_dateedit_qbase_init_painter(void* self, void* painter);
void q_dateedit_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_dateedit_redirected(void* self, void* offset);
QPaintDevice* q_dateedit_qbase_redirected(void* self, void* offset);
void q_dateedit_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_dateedit_shared_painter(void* self);
QPainter* q_dateedit_qbase_shared_painter(void* self);
void q_dateedit_on_shared_painter(void* self, QPainter* (*slot)());
void q_dateedit_input_method_event(void* self, void* param1);
void q_dateedit_qbase_input_method_event(void* self, void* param1);
void q_dateedit_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_dateedit_event_filter(void* self, void* watched, void* event);
bool q_dateedit_qbase_event_filter(void* self, void* watched, void* event);
void q_dateedit_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_dateedit_child_event(void* self, void* event);
void q_dateedit_qbase_child_event(void* self, void* event);
void q_dateedit_on_child_event(void* self, void (*slot)(void*, void*));
void q_dateedit_custom_event(void* self, void* event);
void q_dateedit_qbase_custom_event(void* self, void* event);
void q_dateedit_on_custom_event(void* self, void (*slot)(void*, void*));
void q_dateedit_connect_notify(void* self, void* signal);
void q_dateedit_qbase_connect_notify(void* self, void* signal);
void q_dateedit_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_dateedit_disconnect_notify(void* self, void* signal);
void q_dateedit_qbase_disconnect_notify(void* self, void* signal);
void q_dateedit_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QLineEdit* q_dateedit_line_edit(void* self);
QLineEdit* q_dateedit_qbase_line_edit(void* self);
void q_dateedit_on_line_edit(void* self, QLineEdit* (*slot)());
void q_dateedit_set_line_edit(void* self, void* edit);
void q_dateedit_qbase_set_line_edit(void* self, void* edit);
void q_dateedit_on_set_line_edit(void* self, void (*slot)(void*, void*));
void q_dateedit_update_micro_focus(void* self);
void q_dateedit_qbase_update_micro_focus(void* self);
void q_dateedit_on_update_micro_focus(void* self, void (*slot)());
void q_dateedit_create(void* self);
void q_dateedit_qbase_create(void* self);
void q_dateedit_on_create(void* self, void (*slot)());
void q_dateedit_destroy(void* self);
void q_dateedit_qbase_destroy(void* self);
void q_dateedit_on_destroy(void* self, void (*slot)());
bool q_dateedit_focus_next_child(void* self);
bool q_dateedit_qbase_focus_next_child(void* self);
void q_dateedit_on_focus_next_child(void* self, bool (*slot)());
bool q_dateedit_focus_previous_child(void* self);
bool q_dateedit_qbase_focus_previous_child(void* self);
void q_dateedit_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_dateedit_sender(void* self);
QObject* q_dateedit_qbase_sender(void* self);
void q_dateedit_on_sender(void* self, QObject* (*slot)());
int32_t q_dateedit_sender_signal_index(void* self);
int32_t q_dateedit_qbase_sender_signal_index(void* self);
void q_dateedit_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_dateedit_receivers(void* self, const char* signal);
int32_t q_dateedit_qbase_receivers(void* self, const char* signal);
void q_dateedit_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_dateedit_is_signal_connected(void* self, void* signal);
bool q_dateedit_qbase_is_signal_connected(void* self, void* signal);
void q_dateedit_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_dateedit_delete(void* self);

/// https://doc.qt.io/qt-6/qdatetimeedit.html#types

typedef enum {
    QDATETIMEEDIT_SECTION_NOSECTION = 0,
    QDATETIMEEDIT_SECTION_AMPMSECTION = 1,
    QDATETIMEEDIT_SECTION_MSECSECTION = 2,
    QDATETIMEEDIT_SECTION_SECONDSECTION = 4,
    QDATETIMEEDIT_SECTION_MINUTESECTION = 8,
    QDATETIMEEDIT_SECTION_HOURSECTION = 16,
    QDATETIMEEDIT_SECTION_DAYSECTION = 256,
    QDATETIMEEDIT_SECTION_MONTHSECTION = 512,
    QDATETIMEEDIT_SECTION_YEARSECTION = 1024,
    QDATETIMEEDIT_SECTION_TIMESECTIONS_MASK = 31,
    QDATETIMEEDIT_SECTION_DATESECTIONS_MASK = 1792
} QDateTimeEdit__Section;

#endif
