#pragma once
#ifndef SRCQT6C_LIBQHEADERVIEW_H
#define SRCQT6C_LIBQHEADERVIEW_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqabstractitemdelegate.h"
#include "libqabstractitemmodel.h"
#include "libqabstractitemview.h"
#include "libqabstractscrollarea.h"
#include "libqaction.h"
#include "libqevent.h"
#include "libqanystringview.h"
#include "libqbackingstore.h"
#include "libqbindingstorage.h"
#include "libqbitmap.h"
#include "libqcursor.h"
#include "libqfont.h"
#include "libqfontinfo.h"
#include "libqfontmetrics.h"
#include "libqframe.h"
#include "libqgraphicseffect.h"
#include "libqgraphicsproxywidget.h"
#include "libqicon.h"
#include "libqitemselectionmodel.h"
#include "libqkeysequence.h"
#include "libqlayout.h"
#include "libqlocale.h"
#include "libqmargins.h"
#include "libqmetaobject.h"
#include "libqobject.h"
#include "libqpaintdevice.h"
#include "libqpaintengine.h"
#include "libqpainter.h"
#include "libqpalette.h"
#include "libqpixmap.h"
#include "libqpoint.h"
#include "libqrect.h"
#include "libqregion.h"
#include "libqscreen.h"
#include "libqscrollbar.h"
#include "libqsize.h"
#include "libqsizepolicy.h"
#include <string.h>
#include "libqstyle.h"
#include "libqstyleoption.h"
#include "libqthread.h"
#include "libqvariant.h"
#include "libqwidget.h"
#include "libqwindow.h"

QHeaderView* q_headerview_new(int64_t orientation);
QHeaderView* q_headerview_new2(int64_t orientation, void* parent);
QMetaObject* q_headerview_meta_object(void* self);
void* q_headerview_metacast(void* self, const char* param1);
int32_t q_headerview_metacall(void* self, int64_t param1, int param2, void* param3);
void q_headerview_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_headerview_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_headerview_tr(const char* s);
void q_headerview_set_model(void* self, void* model);
void q_headerview_on_set_model(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_set_model(void* self, void* model);
int64_t q_headerview_orientation(void* self);
int32_t q_headerview_offset(void* self);
int32_t q_headerview_length(void* self);
QSize* q_headerview_size_hint(void* self);
void q_headerview_on_size_hint(void* self, QSize* (*slot)());
QSize* q_headerview_qbase_size_hint(void* self);
void q_headerview_set_visible(void* self, bool v);
void q_headerview_on_set_visible(void* self, void (*slot)(void*, bool));
void q_headerview_qbase_set_visible(void* self, bool v);
int32_t q_headerview_section_size_hint(void* self, int logicalIndex);
int32_t q_headerview_visual_index_at(void* self, int position);
int32_t q_headerview_logical_index_at(void* self, int position);
int32_t q_headerview_logical_index_at2(void* self, int x, int y);
int32_t q_headerview_logical_index_at_with_pos(void* self, void* pos);
int32_t q_headerview_section_size(void* self, int logicalIndex);
int32_t q_headerview_section_position(void* self, int logicalIndex);
int32_t q_headerview_section_viewport_position(void* self, int logicalIndex);
void q_headerview_move_section(void* self, int from, int to);
void q_headerview_swap_sections(void* self, int first, int second);
void q_headerview_resize_section(void* self, int logicalIndex, int size);
void q_headerview_resize_sections(void* self, int64_t mode);
bool q_headerview_is_section_hidden(void* self, int logicalIndex);
void q_headerview_set_section_hidden(void* self, int logicalIndex, bool hide);
int32_t q_headerview_hidden_section_count(void* self);
void q_headerview_hide_section(void* self, int logicalIndex);
void q_headerview_show_section(void* self, int logicalIndex);
int32_t q_headerview_count(void* self);
int32_t q_headerview_visual_index(void* self, int logicalIndex);
int32_t q_headerview_logical_index(void* self, int visualIndex);
void q_headerview_set_sections_movable(void* self, bool movable);
bool q_headerview_sections_movable(void* self);
void q_headerview_set_first_section_movable(void* self, bool movable);
bool q_headerview_is_first_section_movable(void* self);
void q_headerview_set_sections_clickable(void* self, bool clickable);
bool q_headerview_sections_clickable(void* self);
void q_headerview_set_highlight_sections(void* self, bool highlight);
bool q_headerview_highlight_sections(void* self);
int64_t q_headerview_section_resize_mode(void* self, int logicalIndex);
void q_headerview_set_section_resize_mode(void* self, int64_t mode);
void q_headerview_set_section_resize_mode2(void* self, int logicalIndex, int64_t mode);
void q_headerview_set_resize_contents_precision(void* self, int precision);
int32_t q_headerview_resize_contents_precision(void* self);
int32_t q_headerview_stretch_section_count(void* self);
void q_headerview_set_sort_indicator_shown(void* self, bool show);
bool q_headerview_is_sort_indicator_shown(void* self);
void q_headerview_set_sort_indicator(void* self, int logicalIndex, int64_t order);
int32_t q_headerview_sort_indicator_section(void* self);
int64_t q_headerview_sort_indicator_order(void* self);
void q_headerview_set_sort_indicator_clearable(void* self, bool clearable);
bool q_headerview_is_sort_indicator_clearable(void* self);
bool q_headerview_stretch_last_section(void* self);
void q_headerview_set_stretch_last_section(void* self, bool stretch);
bool q_headerview_cascading_section_resizes(void* self);
void q_headerview_set_cascading_section_resizes(void* self, bool enable);
int32_t q_headerview_default_section_size(void* self);
void q_headerview_set_default_section_size(void* self, int size);
void q_headerview_reset_default_section_size(void* self);
int32_t q_headerview_minimum_section_size(void* self);
void q_headerview_set_minimum_section_size(void* self, int size);
int32_t q_headerview_maximum_section_size(void* self);
void q_headerview_set_maximum_section_size(void* self, int size);
int64_t q_headerview_default_alignment(void* self);
void q_headerview_set_default_alignment(void* self, int64_t alignment);
void q_headerview_do_items_layout(void* self);
void q_headerview_on_do_items_layout(void* self, void (*slot)());
void q_headerview_qbase_do_items_layout(void* self);
bool q_headerview_sections_moved(void* self);
bool q_headerview_sections_hidden(void* self);
char* q_headerview_save_state(void* self);
bool q_headerview_restore_state(void* self, const char* state);
void q_headerview_reset(void* self);
void q_headerview_on_reset(void* self, void (*slot)());
void q_headerview_qbase_reset(void* self);
void q_headerview_set_offset(void* self, int offset);
void q_headerview_set_offset_to_section_position(void* self, int visualIndex);
void q_headerview_set_offset_to_last_section(void* self);
void q_headerview_header_data_changed(void* self, int64_t orientation, int logicalFirst, int logicalLast);
void q_headerview_section_moved(void* self, int logicalIndex, int oldVisualIndex, int newVisualIndex);
void q_headerview_on_section_moved(void* self, void (*slot)(void*, int, int, int));
void q_headerview_section_resized(void* self, int logicalIndex, int oldSize, int newSize);
void q_headerview_on_section_resized(void* self, void (*slot)(void*, int, int, int));
void q_headerview_section_pressed(void* self, int logicalIndex);
void q_headerview_on_section_pressed(void* self, void (*slot)(void*, int));
void q_headerview_section_clicked(void* self, int logicalIndex);
void q_headerview_on_section_clicked(void* self, void (*slot)(void*, int));
void q_headerview_section_entered(void* self, int logicalIndex);
void q_headerview_on_section_entered(void* self, void (*slot)(void*, int));
void q_headerview_section_double_clicked(void* self, int logicalIndex);
void q_headerview_on_section_double_clicked(void* self, void (*slot)(void*, int));
void q_headerview_section_count_changed(void* self, int oldCount, int newCount);
void q_headerview_on_section_count_changed(void* self, void (*slot)(void*, int, int));
void q_headerview_section_handle_double_clicked(void* self, int logicalIndex);
void q_headerview_on_section_handle_double_clicked(void* self, void (*slot)(void*, int));
void q_headerview_geometries_changed(void* self);
void q_headerview_on_geometries_changed(void* self, void (*slot)(void*));
void q_headerview_sort_indicator_changed(void* self, int logicalIndex, int64_t order);
void q_headerview_on_sort_indicator_changed(void* self, void (*slot)(void*, int, int64_t));
void q_headerview_sort_indicator_clearable_changed(void* self, bool clearable);
void q_headerview_on_sort_indicator_clearable_changed(void* self, void (*slot)(void*, bool));
void q_headerview_update_section(void* self, int logicalIndex);
void q_headerview_on_update_section(void* self, void (*slot)(void*, int));
void q_headerview_qbase_update_section(void* self, int logicalIndex);
void q_headerview_resize_sections2(void* self);
void q_headerview_on_resize_sections2(void* self, void (*slot)());
void q_headerview_qbase_resize_sections2(void* self);
void q_headerview_sections_inserted(void* self, void* parent, int logicalFirst, int logicalLast);
void q_headerview_on_sections_inserted(void* self, void (*slot)(void*, void*, int, int));
void q_headerview_qbase_sections_inserted(void* self, void* parent, int logicalFirst, int logicalLast);
void q_headerview_sections_about_to_be_removed(void* self, void* parent, int logicalFirst, int logicalLast);
void q_headerview_on_sections_about_to_be_removed(void* self, void (*slot)(void*, void*, int, int));
void q_headerview_qbase_sections_about_to_be_removed(void* self, void* parent, int logicalFirst, int logicalLast);
void q_headerview_initialize(void* self);
void q_headerview_on_initialize(void* self, void (*slot)());
void q_headerview_qbase_initialize(void* self);
void q_headerview_initialize_sections(void* self);
void q_headerview_on_initialize_sections(void* self, void (*slot)());
void q_headerview_qbase_initialize_sections(void* self);
void q_headerview_initialize_sections2(void* self, int start, int end);
void q_headerview_on_initialize_sections2(void* self, void (*slot)(void*, int, int));
void q_headerview_qbase_initialize_sections2(void* self, int start, int end);
void q_headerview_current_changed(void* self, void* current, void* old);
void q_headerview_on_current_changed(void* self, void (*slot)(void*, void*, void*));
void q_headerview_qbase_current_changed(void* self, void* current, void* old);
bool q_headerview_event(void* self, void* e);
void q_headerview_on_event(void* self, bool (*slot)(void*, void*));
bool q_headerview_qbase_event(void* self, void* e);
void q_headerview_paint_event(void* self, void* e);
void q_headerview_on_paint_event(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_paint_event(void* self, void* e);
void q_headerview_mouse_press_event(void* self, void* e);
void q_headerview_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_mouse_press_event(void* self, void* e);
void q_headerview_mouse_move_event(void* self, void* e);
void q_headerview_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_mouse_move_event(void* self, void* e);
void q_headerview_mouse_release_event(void* self, void* e);
void q_headerview_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_mouse_release_event(void* self, void* e);
void q_headerview_mouse_double_click_event(void* self, void* e);
void q_headerview_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_mouse_double_click_event(void* self, void* e);
bool q_headerview_viewport_event(void* self, void* e);
void q_headerview_on_viewport_event(void* self, bool (*slot)(void*, void*));
bool q_headerview_qbase_viewport_event(void* self, void* e);
void q_headerview_paint_section(void* self, void* painter, void* rect, int logicalIndex);
void q_headerview_on_paint_section(void* self, void (*slot)(void*, void*, void*, int));
void q_headerview_qbase_paint_section(void* self, void* painter, void* rect, int logicalIndex);
QSize* q_headerview_section_size_from_contents(void* self, int logicalIndex);
void q_headerview_on_section_size_from_contents(void* self, QSize* (*slot)(void*, int));
QSize* q_headerview_qbase_section_size_from_contents(void* self, int logicalIndex);
int32_t q_headerview_horizontal_offset(void* self);
void q_headerview_on_horizontal_offset(void* self, int32_t (*slot)());
int32_t q_headerview_qbase_horizontal_offset(void* self);
int32_t q_headerview_vertical_offset(void* self);
void q_headerview_on_vertical_offset(void* self, int32_t (*slot)());
int32_t q_headerview_qbase_vertical_offset(void* self);
void q_headerview_update_geometries(void* self);
void q_headerview_on_update_geometries(void* self, void (*slot)());
void q_headerview_qbase_update_geometries(void* self);
void q_headerview_scroll_contents_by(void* self, int dx, int dy);
void q_headerview_on_scroll_contents_by(void* self, void (*slot)(void*, int, int));
void q_headerview_qbase_scroll_contents_by(void* self, int dx, int dy);
void q_headerview_data_changed(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_headerview_on_data_changed(void* self, void (*slot)(void*, void*, void*, int*));
void q_headerview_qbase_data_changed(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_headerview_rows_inserted(void* self, void* parent, int start, int end);
void q_headerview_on_rows_inserted(void* self, void (*slot)(void*, void*, int, int));
void q_headerview_qbase_rows_inserted(void* self, void* parent, int start, int end);
QRect* q_headerview_visual_rect(void* self, void* index);
void q_headerview_on_visual_rect(void* self, QRect* (*slot)(void*, void*));
QRect* q_headerview_qbase_visual_rect(void* self, void* index);
void q_headerview_scroll_to(void* self, void* index, int64_t hint);
void q_headerview_on_scroll_to(void* self, void (*slot)(void*, void*, int64_t));
void q_headerview_qbase_scroll_to(void* self, void* index, int64_t hint);
QModelIndex* q_headerview_index_at(void* self, void* p);
void q_headerview_on_index_at(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_headerview_qbase_index_at(void* self, void* p);
bool q_headerview_is_index_hidden(void* self, void* index);
void q_headerview_on_is_index_hidden(void* self, bool (*slot)(void*, void*));
bool q_headerview_qbase_is_index_hidden(void* self, void* index);
QModelIndex* q_headerview_move_cursor(void* self, int64_t param1, int64_t param2);
void q_headerview_on_move_cursor(void* self, QModelIndex* (*slot)(void*, int64_t, int64_t));
QModelIndex* q_headerview_qbase_move_cursor(void* self, int64_t param1, int64_t param2);
void q_headerview_set_selection(void* self, void* rect, int64_t flags);
void q_headerview_on_set_selection(void* self, void (*slot)(void*, void*, int64_t));
void q_headerview_qbase_set_selection(void* self, void* rect, int64_t flags);
QRegion* q_headerview_visual_region_for_selection(void* self, void* selection);
void q_headerview_on_visual_region_for_selection(void* self, QRegion* (*slot)(void*, void*));
QRegion* q_headerview_qbase_visual_region_for_selection(void* self, void* selection);
void q_headerview_init_style_option_for_index(void* self, void* option, int logicalIndex);
void q_headerview_on_init_style_option_for_index(void* self, void (*slot)(void*, void*, int));
void q_headerview_qbase_init_style_option_for_index(void* self, void* option, int logicalIndex);
void q_headerview_init_style_option(void* self, void* option);
void q_headerview_on_init_style_option(void* self, void (*slot)(void*, void*));
void q_headerview_qbase_init_style_option(void* self, void* option);
const char* q_headerview_tr2(const char* s, const char* c);
const char* q_headerview_tr3(const char* s, const char* c, int n);
QAbstractItemModel* q_headerview_model(void* self);
QItemSelectionModel* q_headerview_selection_model(void* self);
void q_headerview_set_item_delegate(void* self, void* delegate);
QAbstractItemDelegate* q_headerview_item_delegate(void* self);
void q_headerview_set_selection_mode(void* self, int64_t mode);
int64_t q_headerview_selection_mode(void* self);
void q_headerview_set_selection_behavior(void* self, int64_t behavior);
int64_t q_headerview_selection_behavior(void* self);
QModelIndex* q_headerview_current_index(void* self);
QModelIndex* q_headerview_root_index(void* self);
void q_headerview_set_edit_triggers(void* self, int64_t triggers);
int64_t q_headerview_edit_triggers(void* self);
void q_headerview_set_vertical_scroll_mode(void* self, int64_t mode);
int64_t q_headerview_vertical_scroll_mode(void* self);
void q_headerview_reset_vertical_scroll_mode(void* self);
void q_headerview_set_horizontal_scroll_mode(void* self, int64_t mode);
int64_t q_headerview_horizontal_scroll_mode(void* self);
void q_headerview_reset_horizontal_scroll_mode(void* self);
void q_headerview_set_auto_scroll(void* self, bool enable);
bool q_headerview_has_auto_scroll(void* self);
void q_headerview_set_auto_scroll_margin(void* self, int margin);
int32_t q_headerview_auto_scroll_margin(void* self);
void q_headerview_set_tab_key_navigation(void* self, bool enable);
bool q_headerview_tab_key_navigation(void* self);
void q_headerview_set_drop_indicator_shown(void* self, bool enable);
bool q_headerview_show_drop_indicator(void* self);
void q_headerview_set_drag_enabled(void* self, bool enable);
bool q_headerview_drag_enabled(void* self);
void q_headerview_set_drag_drop_overwrite_mode(void* self, bool overwrite);
bool q_headerview_drag_drop_overwrite_mode(void* self);
void q_headerview_set_drag_drop_mode(void* self, int64_t behavior);
int64_t q_headerview_drag_drop_mode(void* self);
void q_headerview_set_default_drop_action(void* self, int64_t dropAction);
int64_t q_headerview_default_drop_action(void* self);
void q_headerview_set_alternating_row_colors(void* self, bool enable);
bool q_headerview_alternating_row_colors(void* self);
void q_headerview_set_icon_size(void* self, void* size);
QSize* q_headerview_icon_size(void* self);
void q_headerview_set_text_elide_mode(void* self, int64_t mode);
int64_t q_headerview_text_elide_mode(void* self);
QSize* q_headerview_size_hint_for_index(void* self, void* index);
void q_headerview_open_persistent_editor(void* self, void* index);
void q_headerview_close_persistent_editor(void* self, void* index);
bool q_headerview_is_persistent_editor_open(void* self, void* index);
void q_headerview_set_index_widget(void* self, void* index, void* widget);
QWidget* q_headerview_index_widget(void* self, void* index);
void q_headerview_set_item_delegate_for_row(void* self, int row, void* delegate);
QAbstractItemDelegate* q_headerview_item_delegate_for_row(void* self, int row);
void q_headerview_set_item_delegate_for_column(void* self, int column, void* delegate);
QAbstractItemDelegate* q_headerview_item_delegate_for_column(void* self, int column);
QAbstractItemDelegate* q_headerview_item_delegate_with_index(void* self, void* index);
void q_headerview_edit(void* self, void* index);
void q_headerview_clear_selection(void* self);
void q_headerview_set_current_index(void* self, void* index);
void q_headerview_scroll_to_top(void* self);
void q_headerview_scroll_to_bottom(void* self);
void q_headerview_update(void* self, void* index);
void q_headerview_pressed(void* self, void* index);
void q_headerview_on_pressed(void* self, void (*slot)(void*, void*));
void q_headerview_clicked(void* self, void* index);
void q_headerview_on_clicked(void* self, void (*slot)(void*, void*));
void q_headerview_double_clicked(void* self, void* index);
void q_headerview_on_double_clicked(void* self, void (*slot)(void*, void*));
void q_headerview_activated(void* self, void* index);
void q_headerview_on_activated(void* self, void (*slot)(void*, void*));
void q_headerview_entered(void* self, void* index);
void q_headerview_on_entered(void* self, void (*slot)(void*, void*));
void q_headerview_viewport_entered(void* self);
void q_headerview_on_viewport_entered(void* self, void (*slot)(void*));
void q_headerview_icon_size_changed(void* self, void* size);
void q_headerview_on_icon_size_changed(void* self, void (*slot)(void*, void*));
int64_t q_headerview_vertical_scroll_bar_policy(void* self);
void q_headerview_set_vertical_scroll_bar_policy(void* self, int64_t verticalScrollBarPolicy);
QScrollBar* q_headerview_vertical_scroll_bar(void* self);
void q_headerview_set_vertical_scroll_bar(void* self, void* scrollbar);
int64_t q_headerview_horizontal_scroll_bar_policy(void* self);
void q_headerview_set_horizontal_scroll_bar_policy(void* self, int64_t horizontalScrollBarPolicy);
QScrollBar* q_headerview_horizontal_scroll_bar(void* self);
void q_headerview_set_horizontal_scroll_bar(void* self, void* scrollbar);
QWidget* q_headerview_corner_widget(void* self);
void q_headerview_set_corner_widget(void* self, void* widget);
void q_headerview_add_scroll_bar_widget(void* self, void* widget, int64_t alignment);
libqt_list /* of QWidget* */ q_headerview_scroll_bar_widgets(void* self, int64_t alignment);
QWidget* q_headerview_viewport(void* self);
void q_headerview_set_viewport(void* self, void* widget);
QSize* q_headerview_maximum_viewport_size(void* self);
int64_t q_headerview_size_adjust_policy(void* self);
void q_headerview_set_size_adjust_policy(void* self, int64_t policy);
int32_t q_headerview_frame_style(void* self);
void q_headerview_set_frame_style(void* self, int frameStyle);
int32_t q_headerview_frame_width(void* self);
int64_t q_headerview_frame_shape(void* self);
void q_headerview_set_frame_shape(void* self, int64_t frameShape);
int64_t q_headerview_frame_shadow(void* self);
void q_headerview_set_frame_shadow(void* self, int64_t frameShadow);
int32_t q_headerview_line_width(void* self);
void q_headerview_set_line_width(void* self, int lineWidth);
int32_t q_headerview_mid_line_width(void* self);
void q_headerview_set_mid_line_width(void* self, int midLineWidth);
QRect* q_headerview_frame_rect(void* self);
void q_headerview_set_frame_rect(void* self, void* frameRect);
uintptr_t q_headerview_win_id(void* self);
void q_headerview_create_win_id(void* self);
uintptr_t q_headerview_internal_win_id(void* self);
uintptr_t q_headerview_effective_win_id(void* self);
QStyle* q_headerview_style(void* self);
void q_headerview_set_style(void* self, void* style);
bool q_headerview_is_top_level(void* self);
bool q_headerview_is_window(void* self);
bool q_headerview_is_modal(void* self);
int64_t q_headerview_window_modality(void* self);
void q_headerview_set_window_modality(void* self, int64_t windowModality);
bool q_headerview_is_enabled(void* self);
bool q_headerview_is_enabled_to(void* self, void* param1);
void q_headerview_set_enabled(void* self, bool enabled);
void q_headerview_set_disabled(void* self, bool disabled);
void q_headerview_set_window_modified(void* self, bool windowModified);
QRect* q_headerview_frame_geometry(void* self);
QRect* q_headerview_geometry(void* self);
QRect* q_headerview_normal_geometry(void* self);
int32_t q_headerview_x(void* self);
int32_t q_headerview_y(void* self);
QPoint* q_headerview_pos(void* self);
QSize* q_headerview_frame_size(void* self);
QSize* q_headerview_size(void* self);
int32_t q_headerview_width(void* self);
int32_t q_headerview_height(void* self);
QRect* q_headerview_rect(void* self);
QRect* q_headerview_children_rect(void* self);
QRegion* q_headerview_children_region(void* self);
QSize* q_headerview_minimum_size(void* self);
QSize* q_headerview_maximum_size(void* self);
int32_t q_headerview_minimum_width(void* self);
int32_t q_headerview_minimum_height(void* self);
int32_t q_headerview_maximum_width(void* self);
int32_t q_headerview_maximum_height(void* self);
void q_headerview_set_minimum_size(void* self, void* minimumSize);
void q_headerview_set_minimum_size2(void* self, int minw, int minh);
void q_headerview_set_maximum_size(void* self, void* maximumSize);
void q_headerview_set_maximum_size2(void* self, int maxw, int maxh);
void q_headerview_set_minimum_width(void* self, int minw);
void q_headerview_set_minimum_height(void* self, int minh);
void q_headerview_set_maximum_width(void* self, int maxw);
void q_headerview_set_maximum_height(void* self, int maxh);
QSize* q_headerview_size_increment(void* self);
void q_headerview_set_size_increment(void* self, void* sizeIncrement);
void q_headerview_set_size_increment2(void* self, int w, int h);
QSize* q_headerview_base_size(void* self);
void q_headerview_set_base_size(void* self, void* baseSize);
void q_headerview_set_base_size2(void* self, int basew, int baseh);
void q_headerview_set_fixed_size(void* self, void* fixedSize);
void q_headerview_set_fixed_size2(void* self, int w, int h);
void q_headerview_set_fixed_width(void* self, int w);
void q_headerview_set_fixed_height(void* self, int h);
QPointF* q_headerview_map_to_global(void* self, void* param1);
QPoint* q_headerview_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_headerview_map_from_global(void* self, void* param1);
QPoint* q_headerview_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_headerview_map_to_parent(void* self, void* param1);
QPoint* q_headerview_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_headerview_map_from_parent(void* self, void* param1);
QPoint* q_headerview_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_headerview_map_to(void* self, void* param1, void* param2);
QPoint* q_headerview_map_to2(void* self, void* param1, void* param2);
QPointF* q_headerview_map_from(void* self, void* param1, void* param2);
QPoint* q_headerview_map_from2(void* self, void* param1, void* param2);
QWidget* q_headerview_window(void* self);
QWidget* q_headerview_native_parent_widget(void* self);
QWidget* q_headerview_top_level_widget(void* self);
QPalette* q_headerview_palette(void* self);
void q_headerview_set_palette(void* self, void* palette);
void q_headerview_set_background_role(void* self, int64_t backgroundRole);
int64_t q_headerview_background_role(void* self);
void q_headerview_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_headerview_foreground_role(void* self);
QFont* q_headerview_font(void* self);
void q_headerview_set_font(void* self, void* font);
QFontMetrics* q_headerview_font_metrics(void* self);
QFontInfo* q_headerview_font_info(void* self);
QCursor* q_headerview_cursor(void* self);
void q_headerview_set_cursor(void* self, void* cursor);
void q_headerview_unset_cursor(void* self);
void q_headerview_set_mouse_tracking(void* self, bool enable);
bool q_headerview_has_mouse_tracking(void* self);
bool q_headerview_under_mouse(void* self);
void q_headerview_set_tablet_tracking(void* self, bool enable);
bool q_headerview_has_tablet_tracking(void* self);
void q_headerview_set_mask(void* self, void* mask);
void q_headerview_set_mask_with_mask(void* self, void* mask);
QRegion* q_headerview_mask(void* self);
void q_headerview_clear_mask(void* self);
void q_headerview_render(void* self, void* target);
void q_headerview_render_with_painter(void* self, void* painter);
QPixmap* q_headerview_grab(void* self);
QGraphicsEffect* q_headerview_graphics_effect(void* self);
void q_headerview_set_graphics_effect(void* self, void* effect);
void q_headerview_grab_gesture(void* self, int64_t typeVal);
void q_headerview_ungrab_gesture(void* self, int64_t typeVal);
void q_headerview_set_window_title(void* self, const char* windowTitle);
void q_headerview_set_style_sheet(void* self, const char* styleSheet);
const char* q_headerview_style_sheet(void* self);
const char* q_headerview_window_title(void* self);
void q_headerview_set_window_icon(void* self, void* icon);
QIcon* q_headerview_window_icon(void* self);
void q_headerview_set_window_icon_text(void* self, const char* windowIconText);
const char* q_headerview_window_icon_text(void* self);
void q_headerview_set_window_role(void* self, const char* windowRole);
const char* q_headerview_window_role(void* self);
void q_headerview_set_window_file_path(void* self, const char* filePath);
const char* q_headerview_window_file_path(void* self);
void q_headerview_set_window_opacity(void* self, double level);
double q_headerview_window_opacity(void* self);
bool q_headerview_is_window_modified(void* self);
void q_headerview_set_tool_tip(void* self, const char* toolTip);
const char* q_headerview_tool_tip(void* self);
void q_headerview_set_tool_tip_duration(void* self, int msec);
int32_t q_headerview_tool_tip_duration(void* self);
void q_headerview_set_status_tip(void* self, const char* statusTip);
const char* q_headerview_status_tip(void* self);
void q_headerview_set_whats_this(void* self, const char* whatsThis);
const char* q_headerview_whats_this(void* self);
const char* q_headerview_accessible_name(void* self);
void q_headerview_set_accessible_name(void* self, const char* name);
const char* q_headerview_accessible_description(void* self);
void q_headerview_set_accessible_description(void* self, const char* description);
void q_headerview_set_layout_direction(void* self, int64_t direction);
int64_t q_headerview_layout_direction(void* self);
void q_headerview_unset_layout_direction(void* self);
void q_headerview_set_locale(void* self, void* locale);
QLocale* q_headerview_locale(void* self);
void q_headerview_unset_locale(void* self);
bool q_headerview_is_right_to_left(void* self);
bool q_headerview_is_left_to_right(void* self);
void q_headerview_set_focus(void* self);
bool q_headerview_is_active_window(void* self);
void q_headerview_activate_window(void* self);
void q_headerview_clear_focus(void* self);
void q_headerview_set_focus_with_reason(void* self, int64_t reason);
int64_t q_headerview_focus_policy(void* self);
void q_headerview_set_focus_policy(void* self, int64_t policy);
bool q_headerview_has_focus(void* self);
void q_headerview_set_tab_order(void* param1, void* param2);
void q_headerview_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_headerview_focus_proxy(void* self);
int64_t q_headerview_context_menu_policy(void* self);
void q_headerview_set_context_menu_policy(void* self, int64_t policy);
void q_headerview_grab_mouse(void* self);
void q_headerview_grab_mouse_with_q_cursor(void* self, void* param1);
void q_headerview_release_mouse(void* self);
void q_headerview_grab_keyboard(void* self);
void q_headerview_release_keyboard(void* self);
int32_t q_headerview_grab_shortcut(void* self, void* key);
void q_headerview_release_shortcut(void* self, int id);
void q_headerview_set_shortcut_enabled(void* self, int id);
void q_headerview_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_headerview_mouse_grabber();
QWidget* q_headerview_keyboard_grabber();
bool q_headerview_updates_enabled(void* self);
void q_headerview_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_headerview_graphics_proxy_widget(void* self);
void q_headerview_repaint(void* self);
void q_headerview_update2(void* self, int x, int y, int w, int h);
void q_headerview_update_with_q_rect(void* self, void* param1);
void q_headerview_update_with_q_region(void* self, void* param1);
void q_headerview_repaint2(void* self, int x, int y, int w, int h);
void q_headerview_repaint_with_q_rect(void* self, void* param1);
void q_headerview_repaint_with_q_region(void* self, void* param1);
void q_headerview_set_hidden(void* self, bool hidden);
void q_headerview_show(void* self);
void q_headerview_hide(void* self);
void q_headerview_show_minimized(void* self);
void q_headerview_show_maximized(void* self);
void q_headerview_show_full_screen(void* self);
void q_headerview_show_normal(void* self);
bool q_headerview_close(void* self);
void q_headerview_raise(void* self);
void q_headerview_lower(void* self);
void q_headerview_stack_under(void* self, void* param1);
void q_headerview_move(void* self, int x, int y);
void q_headerview_move_with_q_point(void* self, void* param1);
void q_headerview_resize(void* self, int w, int h);
void q_headerview_resize_with_q_size(void* self, void* param1);
void q_headerview_set_geometry(void* self, int x, int y, int w, int h);
void q_headerview_set_geometry_with_geometry(void* self, void* geometry);
char* q_headerview_save_geometry(void* self);
bool q_headerview_restore_geometry(void* self, const char* geometry);
void q_headerview_adjust_size(void* self);
bool q_headerview_is_visible(void* self);
bool q_headerview_is_visible_to(void* self, void* param1);
bool q_headerview_is_hidden(void* self);
bool q_headerview_is_minimized(void* self);
bool q_headerview_is_maximized(void* self);
bool q_headerview_is_full_screen(void* self);
int64_t q_headerview_window_state(void* self);
void q_headerview_set_window_state(void* self, int64_t state);
void q_headerview_override_window_state(void* self, int64_t state);
QSizePolicy* q_headerview_size_policy(void* self);
void q_headerview_set_size_policy(void* self, void* sizePolicy);
void q_headerview_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_headerview_visible_region(void* self);
void q_headerview_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_headerview_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_headerview_contents_margins(void* self);
QRect* q_headerview_contents_rect(void* self);
QLayout* q_headerview_layout(void* self);
void q_headerview_set_layout(void* self, void* layout);
void q_headerview_update_geometry(void* self);
void q_headerview_set_parent(void* self, void* parent);
void q_headerview_set_parent2(void* self, void* parent, int64_t f);
void q_headerview_scroll(void* self, int dx, int dy);
void q_headerview_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_headerview_focus_widget(void* self);
QWidget* q_headerview_next_in_focus_chain(void* self);
QWidget* q_headerview_previous_in_focus_chain(void* self);
bool q_headerview_accept_drops(void* self);
void q_headerview_set_accept_drops(void* self, bool on);
void q_headerview_add_action(void* self, void* action);
void q_headerview_add_actions(void* self, void* actions[]);
void q_headerview_insert_actions(void* self, void* before, void* actions[]);
void q_headerview_insert_action(void* self, void* before, void* action);
void q_headerview_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_headerview_actions(void* self);
QAction* q_headerview_add_action_with_text(void* self, const char* text);
QAction* q_headerview_add_action2(void* self, void* icon, const char* text);
QAction* q_headerview_add_action3(void* self, const char* text, void* shortcut);
QAction* q_headerview_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_headerview_parent_widget(void* self);
void q_headerview_set_window_flags(void* self, int64_t typeVal);
int64_t q_headerview_window_flags(void* self);
void q_headerview_set_window_flag(void* self, int64_t param1);
void q_headerview_override_window_flags(void* self, int64_t typeVal);
int64_t q_headerview_window_type(void* self);
QWidget* q_headerview_find(uint64_t param1);
QWidget* q_headerview_child_at(void* self, int x, int y);
QWidget* q_headerview_child_at_with_q_point(void* self, void* p);
void q_headerview_set_attribute(void* self, int64_t param1);
bool q_headerview_test_attribute(void* self, int64_t param1);
void q_headerview_ensure_polished(void* self);
bool q_headerview_is_ancestor_of(void* self, void* child);
bool q_headerview_auto_fill_background(void* self);
void q_headerview_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_headerview_backing_store(void* self);
QWindow* q_headerview_window_handle(void* self);
QScreen* q_headerview_screen(void* self);
void q_headerview_set_screen(void* self, void* screen);
QWidget* q_headerview_create_window_container(void* window);
void q_headerview_window_title_changed(void* self, const char* title);
void q_headerview_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_headerview_window_icon_changed(void* self, void* icon);
void q_headerview_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_headerview_window_icon_text_changed(void* self, const char* iconText);
void q_headerview_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_headerview_custom_context_menu_requested(void* self, void* pos);
void q_headerview_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_headerview_input_method_hints(void* self);
void q_headerview_set_input_method_hints(void* self, int64_t hints);
void q_headerview_render2(void* self, void* target, void* targetOffset);
void q_headerview_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_headerview_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_headerview_render22(void* self, void* painter, void* targetOffset);
void q_headerview_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_headerview_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_headerview_grab1(void* self, void* rectangle);
void q_headerview_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_headerview_grab_shortcut2(void* self, void* key, int64_t context);
void q_headerview_set_shortcut_enabled2(void* self, int id, bool enable);
void q_headerview_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_headerview_set_window_flag2(void* self, int64_t param1, bool on);
void q_headerview_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_headerview_create_window_container2(void* window, void* parent);
QWidget* q_headerview_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_headerview_object_name(void* self);
void q_headerview_set_object_name(void* self, const char* name);
bool q_headerview_is_widget_type(void* self);
bool q_headerview_is_window_type(void* self);
bool q_headerview_is_quick_item_type(void* self);
bool q_headerview_signals_blocked(void* self);
bool q_headerview_block_signals(void* self, bool b);
QThread* q_headerview_thread(void* self);
void q_headerview_move_to_thread(void* self, void* thread);
int32_t q_headerview_start_timer(void* self, int interval);
void q_headerview_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_headerview_children(void* self);
void q_headerview_install_event_filter(void* self, void* filterObj);
void q_headerview_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_headerview_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_headerview_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_headerview_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_headerview_disconnect_with_q_meta_object_connection(void* param1);
void q_headerview_dump_object_tree(void* self);
void q_headerview_dump_object_info(void* self);
bool q_headerview_set_property(void* self, const char* name, void* value);
QVariant* q_headerview_property(void* self, const char* name);
const char** q_headerview_dynamic_property_names(void* self);
QBindingStorage* q_headerview_binding_storage(void* self);
QBindingStorage* q_headerview_binding_storage2(void* self);
void q_headerview_destroyed(void* self);
void q_headerview_on_destroyed(void* self, void (*slot)(void*));
QObject* q_headerview_parent(void* self);
bool q_headerview_inherits(void* self, const char* classname);
void q_headerview_delete_later(void* self);
int32_t q_headerview_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_headerview_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_headerview_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_headerview_destroyed1(void* self, void* param1);
void q_headerview_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_headerview_painting_active(void* self);
int32_t q_headerview_width_m_m(void* self);
int32_t q_headerview_height_m_m(void* self);
int32_t q_headerview_logical_dpi_x(void* self);
int32_t q_headerview_logical_dpi_y(void* self);
int32_t q_headerview_physical_dpi_x(void* self);
int32_t q_headerview_physical_dpi_y(void* self);
double q_headerview_device_pixel_ratio(void* self);
double q_headerview_device_pixel_ratio_f(void* self);
int32_t q_headerview_color_count(void* self);
int32_t q_headerview_depth(void* self);
double q_headerview_device_pixel_ratio_f_scale();
void q_headerview_set_selection_model(void* self, void* selectionModel);
void q_headerview_qbase_set_selection_model(void* self, void* selectionModel);
void q_headerview_on_set_selection_model(void* self, void (*slot)(void*, void*));
void q_headerview_keyboard_search(void* self, const char* search);
void q_headerview_qbase_keyboard_search(void* self, const char* search);
void q_headerview_on_keyboard_search(void* self, void (*slot)(void*, const char*));
int32_t q_headerview_size_hint_for_row(void* self, int row);
int32_t q_headerview_qbase_size_hint_for_row(void* self, int row);
void q_headerview_on_size_hint_for_row(void* self, int32_t (*slot)(void*, int));
int32_t q_headerview_size_hint_for_column(void* self, int column);
int32_t q_headerview_qbase_size_hint_for_column(void* self, int column);
void q_headerview_on_size_hint_for_column(void* self, int32_t (*slot)(void*, int));
QAbstractItemDelegate* q_headerview_item_delegate_for_index(void* self, void* index);
QAbstractItemDelegate* q_headerview_qbase_item_delegate_for_index(void* self, void* index);
void q_headerview_on_item_delegate_for_index(void* self, QAbstractItemDelegate* (*slot)(void*, void*));
QVariant* q_headerview_input_method_query(void* self, int64_t query);
QVariant* q_headerview_qbase_input_method_query(void* self, int64_t query);
void q_headerview_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_headerview_set_root_index(void* self, void* index);
void q_headerview_qbase_set_root_index(void* self, void* index);
void q_headerview_on_set_root_index(void* self, void (*slot)(void*, void*));
void q_headerview_select_all(void* self);
void q_headerview_qbase_select_all(void* self);
void q_headerview_on_select_all(void* self, void (*slot)());
void q_headerview_rows_about_to_be_removed(void* self, void* parent, int start, int end);
void q_headerview_qbase_rows_about_to_be_removed(void* self, void* parent, int start, int end);
void q_headerview_on_rows_about_to_be_removed(void* self, void (*slot)(void*, void*, int, int));
void q_headerview_selection_changed(void* self, void* selected, void* deselected);
void q_headerview_qbase_selection_changed(void* self, void* selected, void* deselected);
void q_headerview_on_selection_changed(void* self, void (*slot)(void*, void*, void*));
void q_headerview_update_editor_data(void* self);
void q_headerview_qbase_update_editor_data(void* self);
void q_headerview_on_update_editor_data(void* self, void (*slot)());
void q_headerview_update_editor_geometries(void* self);
void q_headerview_qbase_update_editor_geometries(void* self);
void q_headerview_on_update_editor_geometries(void* self, void (*slot)());
void q_headerview_vertical_scrollbar_action(void* self, int action);
void q_headerview_qbase_vertical_scrollbar_action(void* self, int action);
void q_headerview_on_vertical_scrollbar_action(void* self, void (*slot)(void*, int));
void q_headerview_horizontal_scrollbar_action(void* self, int action);
void q_headerview_qbase_horizontal_scrollbar_action(void* self, int action);
void q_headerview_on_horizontal_scrollbar_action(void* self, void (*slot)(void*, int));
void q_headerview_vertical_scrollbar_value_changed(void* self, int value);
void q_headerview_qbase_vertical_scrollbar_value_changed(void* self, int value);
void q_headerview_on_vertical_scrollbar_value_changed(void* self, void (*slot)(void*, int));
void q_headerview_horizontal_scrollbar_value_changed(void* self, int value);
void q_headerview_qbase_horizontal_scrollbar_value_changed(void* self, int value);
void q_headerview_on_horizontal_scrollbar_value_changed(void* self, void (*slot)(void*, int));
void q_headerview_close_editor(void* self, void* editor, int64_t hint);
void q_headerview_qbase_close_editor(void* self, void* editor, int64_t hint);
void q_headerview_on_close_editor(void* self, void (*slot)(void*, void*, int64_t));
void q_headerview_commit_data(void* self, void* editor);
void q_headerview_qbase_commit_data(void* self, void* editor);
void q_headerview_on_commit_data(void* self, void (*slot)(void*, void*));
void q_headerview_editor_destroyed(void* self, void* editor);
void q_headerview_qbase_editor_destroyed(void* self, void* editor);
void q_headerview_on_editor_destroyed(void* self, void (*slot)(void*, void*));
libqt_list /* of QModelIndex* */ q_headerview_selected_indexes(void* self);
libqt_list /* of QModelIndex* */ q_headerview_qbase_selected_indexes(void* self);
void q_headerview_on_selected_indexes(void* self, libqt_list /* of QModelIndex* */ (*slot)());
bool q_headerview_edit2(void* self, void* index, int64_t trigger, void* event);
bool q_headerview_qbase_edit2(void* self, void* index, int64_t trigger, void* event);
void q_headerview_on_edit2(void* self, bool (*slot)(void*, void*, int64_t, void*));
int64_t q_headerview_selection_command(void* self, void* index, void* event);
int64_t q_headerview_qbase_selection_command(void* self, void* index, void* event);
void q_headerview_on_selection_command(void* self, int64_t (*slot)(void*, void*, void*));
void q_headerview_start_drag(void* self, int64_t supportedActions);
void q_headerview_qbase_start_drag(void* self, int64_t supportedActions);
void q_headerview_on_start_drag(void* self, void (*slot)(void*, int64_t));
void q_headerview_init_view_item_option(void* self, void* option);
void q_headerview_qbase_init_view_item_option(void* self, void* option);
void q_headerview_on_init_view_item_option(void* self, void (*slot)(void*, void*));
bool q_headerview_focus_next_prev_child(void* self, bool next);
bool q_headerview_qbase_focus_next_prev_child(void* self, bool next);
void q_headerview_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
void q_headerview_drag_enter_event(void* self, void* event);
void q_headerview_qbase_drag_enter_event(void* self, void* event);
void q_headerview_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_headerview_drag_move_event(void* self, void* event);
void q_headerview_qbase_drag_move_event(void* self, void* event);
void q_headerview_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_headerview_drag_leave_event(void* self, void* event);
void q_headerview_qbase_drag_leave_event(void* self, void* event);
void q_headerview_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_headerview_drop_event(void* self, void* event);
void q_headerview_qbase_drop_event(void* self, void* event);
void q_headerview_on_drop_event(void* self, void (*slot)(void*, void*));
void q_headerview_focus_in_event(void* self, void* event);
void q_headerview_qbase_focus_in_event(void* self, void* event);
void q_headerview_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_headerview_focus_out_event(void* self, void* event);
void q_headerview_qbase_focus_out_event(void* self, void* event);
void q_headerview_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_headerview_key_press_event(void* self, void* event);
void q_headerview_qbase_key_press_event(void* self, void* event);
void q_headerview_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_headerview_resize_event(void* self, void* event);
void q_headerview_qbase_resize_event(void* self, void* event);
void q_headerview_on_resize_event(void* self, void (*slot)(void*, void*));
void q_headerview_timer_event(void* self, void* event);
void q_headerview_qbase_timer_event(void* self, void* event);
void q_headerview_on_timer_event(void* self, void (*slot)(void*, void*));
void q_headerview_input_method_event(void* self, void* event);
void q_headerview_qbase_input_method_event(void* self, void* event);
void q_headerview_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_headerview_event_filter(void* self, void* object, void* event);
bool q_headerview_qbase_event_filter(void* self, void* object, void* event);
void q_headerview_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
QSize* q_headerview_viewport_size_hint(void* self);
QSize* q_headerview_qbase_viewport_size_hint(void* self);
void q_headerview_on_viewport_size_hint(void* self, QSize* (*slot)());
QSize* q_headerview_minimum_size_hint(void* self);
QSize* q_headerview_qbase_minimum_size_hint(void* self);
void q_headerview_on_minimum_size_hint(void* self, QSize* (*slot)());
void q_headerview_setup_viewport(void* self, void* viewport);
void q_headerview_qbase_setup_viewport(void* self, void* viewport);
void q_headerview_on_setup_viewport(void* self, void (*slot)(void*, void*));
void q_headerview_wheel_event(void* self, void* param1);
void q_headerview_qbase_wheel_event(void* self, void* param1);
void q_headerview_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_headerview_context_menu_event(void* self, void* param1);
void q_headerview_qbase_context_menu_event(void* self, void* param1);
void q_headerview_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_headerview_change_event(void* self, void* param1);
void q_headerview_qbase_change_event(void* self, void* param1);
void q_headerview_on_change_event(void* self, void (*slot)(void*, void*));
int32_t q_headerview_dev_type(void* self);
int32_t q_headerview_qbase_dev_type(void* self);
void q_headerview_on_dev_type(void* self, int32_t (*slot)());
int32_t q_headerview_height_for_width(void* self, int param1);
int32_t q_headerview_qbase_height_for_width(void* self, int param1);
void q_headerview_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_headerview_has_height_for_width(void* self);
bool q_headerview_qbase_has_height_for_width(void* self);
void q_headerview_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_headerview_paint_engine(void* self);
QPaintEngine* q_headerview_qbase_paint_engine(void* self);
void q_headerview_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_headerview_key_release_event(void* self, void* event);
void q_headerview_qbase_key_release_event(void* self, void* event);
void q_headerview_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_headerview_enter_event(void* self, void* event);
void q_headerview_qbase_enter_event(void* self, void* event);
void q_headerview_on_enter_event(void* self, void (*slot)(void*, void*));
void q_headerview_leave_event(void* self, void* event);
void q_headerview_qbase_leave_event(void* self, void* event);
void q_headerview_on_leave_event(void* self, void (*slot)(void*, void*));
void q_headerview_move_event(void* self, void* event);
void q_headerview_qbase_move_event(void* self, void* event);
void q_headerview_on_move_event(void* self, void (*slot)(void*, void*));
void q_headerview_close_event(void* self, void* event);
void q_headerview_qbase_close_event(void* self, void* event);
void q_headerview_on_close_event(void* self, void (*slot)(void*, void*));
void q_headerview_tablet_event(void* self, void* event);
void q_headerview_qbase_tablet_event(void* self, void* event);
void q_headerview_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_headerview_action_event(void* self, void* event);
void q_headerview_qbase_action_event(void* self, void* event);
void q_headerview_on_action_event(void* self, void (*slot)(void*, void*));
void q_headerview_show_event(void* self, void* event);
void q_headerview_qbase_show_event(void* self, void* event);
void q_headerview_on_show_event(void* self, void (*slot)(void*, void*));
void q_headerview_hide_event(void* self, void* event);
void q_headerview_qbase_hide_event(void* self, void* event);
void q_headerview_on_hide_event(void* self, void (*slot)(void*, void*));
bool q_headerview_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_headerview_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_headerview_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_headerview_metric(void* self, int64_t param1);
int32_t q_headerview_qbase_metric(void* self, int64_t param1);
void q_headerview_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_headerview_init_painter(void* self, void* painter);
void q_headerview_qbase_init_painter(void* self, void* painter);
void q_headerview_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_headerview_redirected(void* self, void* offset);
QPaintDevice* q_headerview_qbase_redirected(void* self, void* offset);
void q_headerview_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_headerview_shared_painter(void* self);
QPainter* q_headerview_qbase_shared_painter(void* self);
void q_headerview_on_shared_painter(void* self, QPainter* (*slot)());
void q_headerview_child_event(void* self, void* event);
void q_headerview_qbase_child_event(void* self, void* event);
void q_headerview_on_child_event(void* self, void (*slot)(void*, void*));
void q_headerview_custom_event(void* self, void* event);
void q_headerview_qbase_custom_event(void* self, void* event);
void q_headerview_on_custom_event(void* self, void (*slot)(void*, void*));
void q_headerview_connect_notify(void* self, void* signal);
void q_headerview_qbase_connect_notify(void* self, void* signal);
void q_headerview_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_headerview_disconnect_notify(void* self, void* signal);
void q_headerview_qbase_disconnect_notify(void* self, void* signal);
void q_headerview_on_disconnect_notify(void* self, void (*slot)(void*, void*));
int64_t q_headerview_state(void* self);
int64_t q_headerview_qbase_state(void* self);
void q_headerview_on_state(void* self, int64_t (*slot)());
void q_headerview_set_state(void* self, int64_t state);
void q_headerview_qbase_set_state(void* self, int64_t state);
void q_headerview_on_set_state(void* self, void (*slot)(void*, int64_t));
void q_headerview_schedule_delayed_items_layout(void* self);
void q_headerview_qbase_schedule_delayed_items_layout(void* self);
void q_headerview_on_schedule_delayed_items_layout(void* self, void (*slot)());
void q_headerview_execute_delayed_items_layout(void* self);
void q_headerview_qbase_execute_delayed_items_layout(void* self);
void q_headerview_on_execute_delayed_items_layout(void* self, void (*slot)());
void q_headerview_set_dirty_region(void* self, void* region);
void q_headerview_qbase_set_dirty_region(void* self, void* region);
void q_headerview_on_set_dirty_region(void* self, void (*slot)(void*, void*));
void q_headerview_scroll_dirty_region(void* self, int dx, int dy);
void q_headerview_qbase_scroll_dirty_region(void* self, int dx, int dy);
void q_headerview_on_scroll_dirty_region(void* self, void (*slot)(void*, int, int));
QPoint* q_headerview_dirty_region_offset(void* self);
QPoint* q_headerview_qbase_dirty_region_offset(void* self);
void q_headerview_on_dirty_region_offset(void* self, QPoint* (*slot)());
void q_headerview_start_auto_scroll(void* self);
void q_headerview_qbase_start_auto_scroll(void* self);
void q_headerview_on_start_auto_scroll(void* self, void (*slot)());
void q_headerview_stop_auto_scroll(void* self);
void q_headerview_qbase_stop_auto_scroll(void* self);
void q_headerview_on_stop_auto_scroll(void* self, void (*slot)());
void q_headerview_do_auto_scroll(void* self);
void q_headerview_qbase_do_auto_scroll(void* self);
void q_headerview_on_do_auto_scroll(void* self, void (*slot)());
int64_t q_headerview_drop_indicator_position(void* self);
int64_t q_headerview_qbase_drop_indicator_position(void* self);
void q_headerview_on_drop_indicator_position(void* self, int64_t (*slot)());
void q_headerview_set_viewport_margins(void* self, int left, int top, int right, int bottom);
void q_headerview_qbase_set_viewport_margins(void* self, int left, int top, int right, int bottom);
void q_headerview_on_set_viewport_margins(void* self, void (*slot)(void*, int, int, int, int));
QMargins* q_headerview_viewport_margins(void* self);
QMargins* q_headerview_qbase_viewport_margins(void* self);
void q_headerview_on_viewport_margins(void* self, QMargins* (*slot)());
void q_headerview_draw_frame(void* self, void* param1);
void q_headerview_qbase_draw_frame(void* self, void* param1);
void q_headerview_on_draw_frame(void* self, void (*slot)(void*, void*));
void q_headerview_update_micro_focus(void* self);
void q_headerview_qbase_update_micro_focus(void* self);
void q_headerview_on_update_micro_focus(void* self, void (*slot)());
void q_headerview_create(void* self);
void q_headerview_qbase_create(void* self);
void q_headerview_on_create(void* self, void (*slot)());
void q_headerview_destroy(void* self);
void q_headerview_qbase_destroy(void* self);
void q_headerview_on_destroy(void* self, void (*slot)());
bool q_headerview_focus_next_child(void* self);
bool q_headerview_qbase_focus_next_child(void* self);
void q_headerview_on_focus_next_child(void* self, bool (*slot)());
bool q_headerview_focus_previous_child(void* self);
bool q_headerview_qbase_focus_previous_child(void* self);
void q_headerview_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_headerview_sender(void* self);
QObject* q_headerview_qbase_sender(void* self);
void q_headerview_on_sender(void* self, QObject* (*slot)());
int32_t q_headerview_sender_signal_index(void* self);
int32_t q_headerview_qbase_sender_signal_index(void* self);
void q_headerview_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_headerview_receivers(void* self, const char* signal);
int32_t q_headerview_qbase_receivers(void* self, const char* signal);
void q_headerview_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_headerview_is_signal_connected(void* self, void* signal);
bool q_headerview_qbase_is_signal_connected(void* self, void* signal);
void q_headerview_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_headerview_delete(void* self);

/// https://doc.qt.io/qt-6/qheaderview.html#types

typedef enum {
    QHEADERVIEW_RESIZEMODE_INTERACTIVE = 0,
    QHEADERVIEW_RESIZEMODE_STRETCH = 1,
    QHEADERVIEW_RESIZEMODE_FIXED = 2,
    QHEADERVIEW_RESIZEMODE_RESIZETOCONTENTS = 3,
    QHEADERVIEW_RESIZEMODE_CUSTOM = 2
} QHeaderView__ResizeMode;

#endif
