#pragma once
#ifndef SRCQT6C_LIBQSPLITTER_H
#define SRCQT6C_LIBQSPLITTER_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqaction.h"
#include "libqevent.h"
#include "libqanystringview.h"
#include "libqbackingstore.h"
#include "libqbindingstorage.h"
#include "libqbitmap.h"
#include "libqcursor.h"
#include "libqfont.h"
#include "libqfontinfo.h"
#include "libqfontmetrics.h"
#include "libqframe.h"
#include "libqgraphicseffect.h"
#include "libqgraphicsproxywidget.h"
#include "libqicon.h"
#include "libqkeysequence.h"
#include "libqlayout.h"
#include "libqlocale.h"
#include "libqmargins.h"
#include "libqmetaobject.h"
#include "libqobject.h"
#include "libqpaintdevice.h"
#include "libqpaintengine.h"
#include "libqpainter.h"
#include "libqpalette.h"
#include "libqpixmap.h"
#include "libqpoint.h"
#include "libqrect.h"
#include "libqregion.h"
#include "libqscreen.h"
#include "libqsize.h"
#include "libqsizepolicy.h"
#include <string.h>
#include "libqstyle.h"
#include "libqstyleoption.h"
#include "libqthread.h"
#include "libqvariant.h"
#include "libqwidget.h"
#include "libqwindow.h"

QSplitter* q_splitter_new(void* parent);
QSplitter* q_splitter_new2();
QSplitter* q_splitter_new3(int64_t param1);
QSplitter* q_splitter_new4(int64_t param1, void* parent);
QMetaObject* q_splitter_meta_object(void* self);
void* q_splitter_metacast(void* self, const char* param1);
int32_t q_splitter_metacall(void* self, int64_t param1, int param2, void* param3);
void q_splitter_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_splitter_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_splitter_tr(const char* s);
void q_splitter_add_widget(void* self, void* widget);
void q_splitter_insert_widget(void* self, int index, void* widget);
QWidget* q_splitter_replace_widget(void* self, int index, void* widget);
void q_splitter_set_orientation(void* self, int64_t orientation);
int64_t q_splitter_orientation(void* self);
void q_splitter_set_children_collapsible(void* self, bool childrenCollapsible);
bool q_splitter_children_collapsible(void* self);
void q_splitter_set_collapsible(void* self, int index, bool param2);
bool q_splitter_is_collapsible(void* self, int index);
void q_splitter_set_opaque_resize(void* self);
bool q_splitter_opaque_resize(void* self);
void q_splitter_refresh(void* self);
QSize* q_splitter_size_hint(void* self);
void q_splitter_on_size_hint(void* self, QSize* (*slot)());
QSize* q_splitter_qbase_size_hint(void* self);
QSize* q_splitter_minimum_size_hint(void* self);
void q_splitter_on_minimum_size_hint(void* self, QSize* (*slot)());
QSize* q_splitter_qbase_minimum_size_hint(void* self);
libqt_list /* of int */ q_splitter_sizes(void* self);
void q_splitter_set_sizes(void* self, int* list[]);
char* q_splitter_save_state(void* self);
bool q_splitter_restore_state(void* self, const char* state);
int32_t q_splitter_handle_width(void* self);
void q_splitter_set_handle_width(void* self, int handleWidth);
int32_t q_splitter_index_of(void* self, void* w);
QWidget* q_splitter_widget(void* self, int index);
int32_t q_splitter_count(void* self);
void q_splitter_get_range(void* self, int index, int* param2, int* param3);
QSplitterHandle* q_splitter_handle(void* self, int index);
void q_splitter_set_stretch_factor(void* self, int index, int stretch);
void q_splitter_splitter_moved(void* self, int pos, int index);
void q_splitter_on_splitter_moved(void* self, void (*slot)(void*, int, int));
QSplitterHandle* q_splitter_create_handle(void* self);
void q_splitter_on_create_handle(void* self, QSplitterHandle* (*slot)());
QSplitterHandle* q_splitter_qbase_create_handle(void* self);
void q_splitter_child_event(void* self, void* param1);
void q_splitter_on_child_event(void* self, void (*slot)(void*, void*));
void q_splitter_qbase_child_event(void* self, void* param1);
bool q_splitter_event(void* self, void* param1);
void q_splitter_on_event(void* self, bool (*slot)(void*, void*));
bool q_splitter_qbase_event(void* self, void* param1);
void q_splitter_resize_event(void* self, void* param1);
void q_splitter_on_resize_event(void* self, void (*slot)(void*, void*));
void q_splitter_qbase_resize_event(void* self, void* param1);
void q_splitter_change_event(void* self, void* param1);
void q_splitter_on_change_event(void* self, void (*slot)(void*, void*));
void q_splitter_qbase_change_event(void* self, void* param1);
void q_splitter_move_splitter(void* self, int pos, int index);
void q_splitter_on_move_splitter(void* self, void (*slot)(void*, int, int));
void q_splitter_qbase_move_splitter(void* self, int pos, int index);
void q_splitter_set_rubber_band(void* self, int position);
void q_splitter_on_set_rubber_band(void* self, void (*slot)(void*, int));
void q_splitter_qbase_set_rubber_band(void* self, int position);
int32_t q_splitter_closest_legal_position(void* self, int param1, int param2);
void q_splitter_on_closest_legal_position(void* self, int32_t (*slot)(void*, int, int));
int32_t q_splitter_qbase_closest_legal_position(void* self, int param1, int param2);
const char* q_splitter_tr2(const char* s, const char* c);
const char* q_splitter_tr3(const char* s, const char* c, int n);
void q_splitter_set_opaque_resize1(void* self, bool opaque);
int32_t q_splitter_frame_style(void* self);
void q_splitter_set_frame_style(void* self, int frameStyle);
int32_t q_splitter_frame_width(void* self);
int64_t q_splitter_frame_shape(void* self);
void q_splitter_set_frame_shape(void* self, int64_t frameShape);
int64_t q_splitter_frame_shadow(void* self);
void q_splitter_set_frame_shadow(void* self, int64_t frameShadow);
int32_t q_splitter_line_width(void* self);
void q_splitter_set_line_width(void* self, int lineWidth);
int32_t q_splitter_mid_line_width(void* self);
void q_splitter_set_mid_line_width(void* self, int midLineWidth);
QRect* q_splitter_frame_rect(void* self);
void q_splitter_set_frame_rect(void* self, void* frameRect);
uintptr_t q_splitter_win_id(void* self);
void q_splitter_create_win_id(void* self);
uintptr_t q_splitter_internal_win_id(void* self);
uintptr_t q_splitter_effective_win_id(void* self);
QStyle* q_splitter_style(void* self);
void q_splitter_set_style(void* self, void* style);
bool q_splitter_is_top_level(void* self);
bool q_splitter_is_window(void* self);
bool q_splitter_is_modal(void* self);
int64_t q_splitter_window_modality(void* self);
void q_splitter_set_window_modality(void* self, int64_t windowModality);
bool q_splitter_is_enabled(void* self);
bool q_splitter_is_enabled_to(void* self, void* param1);
void q_splitter_set_enabled(void* self, bool enabled);
void q_splitter_set_disabled(void* self, bool disabled);
void q_splitter_set_window_modified(void* self, bool windowModified);
QRect* q_splitter_frame_geometry(void* self);
QRect* q_splitter_geometry(void* self);
QRect* q_splitter_normal_geometry(void* self);
int32_t q_splitter_x(void* self);
int32_t q_splitter_y(void* self);
QPoint* q_splitter_pos(void* self);
QSize* q_splitter_frame_size(void* self);
QSize* q_splitter_size(void* self);
int32_t q_splitter_width(void* self);
int32_t q_splitter_height(void* self);
QRect* q_splitter_rect(void* self);
QRect* q_splitter_children_rect(void* self);
QRegion* q_splitter_children_region(void* self);
QSize* q_splitter_minimum_size(void* self);
QSize* q_splitter_maximum_size(void* self);
int32_t q_splitter_minimum_width(void* self);
int32_t q_splitter_minimum_height(void* self);
int32_t q_splitter_maximum_width(void* self);
int32_t q_splitter_maximum_height(void* self);
void q_splitter_set_minimum_size(void* self, void* minimumSize);
void q_splitter_set_minimum_size2(void* self, int minw, int minh);
void q_splitter_set_maximum_size(void* self, void* maximumSize);
void q_splitter_set_maximum_size2(void* self, int maxw, int maxh);
void q_splitter_set_minimum_width(void* self, int minw);
void q_splitter_set_minimum_height(void* self, int minh);
void q_splitter_set_maximum_width(void* self, int maxw);
void q_splitter_set_maximum_height(void* self, int maxh);
QSize* q_splitter_size_increment(void* self);
void q_splitter_set_size_increment(void* self, void* sizeIncrement);
void q_splitter_set_size_increment2(void* self, int w, int h);
QSize* q_splitter_base_size(void* self);
void q_splitter_set_base_size(void* self, void* baseSize);
void q_splitter_set_base_size2(void* self, int basew, int baseh);
void q_splitter_set_fixed_size(void* self, void* fixedSize);
void q_splitter_set_fixed_size2(void* self, int w, int h);
void q_splitter_set_fixed_width(void* self, int w);
void q_splitter_set_fixed_height(void* self, int h);
QPointF* q_splitter_map_to_global(void* self, void* param1);
QPoint* q_splitter_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_splitter_map_from_global(void* self, void* param1);
QPoint* q_splitter_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_splitter_map_to_parent(void* self, void* param1);
QPoint* q_splitter_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_splitter_map_from_parent(void* self, void* param1);
QPoint* q_splitter_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_splitter_map_to(void* self, void* param1, void* param2);
QPoint* q_splitter_map_to2(void* self, void* param1, void* param2);
QPointF* q_splitter_map_from(void* self, void* param1, void* param2);
QPoint* q_splitter_map_from2(void* self, void* param1, void* param2);
QWidget* q_splitter_window(void* self);
QWidget* q_splitter_native_parent_widget(void* self);
QWidget* q_splitter_top_level_widget(void* self);
QPalette* q_splitter_palette(void* self);
void q_splitter_set_palette(void* self, void* palette);
void q_splitter_set_background_role(void* self, int64_t backgroundRole);
int64_t q_splitter_background_role(void* self);
void q_splitter_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_splitter_foreground_role(void* self);
QFont* q_splitter_font(void* self);
void q_splitter_set_font(void* self, void* font);
QFontMetrics* q_splitter_font_metrics(void* self);
QFontInfo* q_splitter_font_info(void* self);
QCursor* q_splitter_cursor(void* self);
void q_splitter_set_cursor(void* self, void* cursor);
void q_splitter_unset_cursor(void* self);
void q_splitter_set_mouse_tracking(void* self, bool enable);
bool q_splitter_has_mouse_tracking(void* self);
bool q_splitter_under_mouse(void* self);
void q_splitter_set_tablet_tracking(void* self, bool enable);
bool q_splitter_has_tablet_tracking(void* self);
void q_splitter_set_mask(void* self, void* mask);
void q_splitter_set_mask_with_mask(void* self, void* mask);
QRegion* q_splitter_mask(void* self);
void q_splitter_clear_mask(void* self);
void q_splitter_render(void* self, void* target);
void q_splitter_render_with_painter(void* self, void* painter);
QPixmap* q_splitter_grab(void* self);
QGraphicsEffect* q_splitter_graphics_effect(void* self);
void q_splitter_set_graphics_effect(void* self, void* effect);
void q_splitter_grab_gesture(void* self, int64_t typeVal);
void q_splitter_ungrab_gesture(void* self, int64_t typeVal);
void q_splitter_set_window_title(void* self, const char* windowTitle);
void q_splitter_set_style_sheet(void* self, const char* styleSheet);
const char* q_splitter_style_sheet(void* self);
const char* q_splitter_window_title(void* self);
void q_splitter_set_window_icon(void* self, void* icon);
QIcon* q_splitter_window_icon(void* self);
void q_splitter_set_window_icon_text(void* self, const char* windowIconText);
const char* q_splitter_window_icon_text(void* self);
void q_splitter_set_window_role(void* self, const char* windowRole);
const char* q_splitter_window_role(void* self);
void q_splitter_set_window_file_path(void* self, const char* filePath);
const char* q_splitter_window_file_path(void* self);
void q_splitter_set_window_opacity(void* self, double level);
double q_splitter_window_opacity(void* self);
bool q_splitter_is_window_modified(void* self);
void q_splitter_set_tool_tip(void* self, const char* toolTip);
const char* q_splitter_tool_tip(void* self);
void q_splitter_set_tool_tip_duration(void* self, int msec);
int32_t q_splitter_tool_tip_duration(void* self);
void q_splitter_set_status_tip(void* self, const char* statusTip);
const char* q_splitter_status_tip(void* self);
void q_splitter_set_whats_this(void* self, const char* whatsThis);
const char* q_splitter_whats_this(void* self);
const char* q_splitter_accessible_name(void* self);
void q_splitter_set_accessible_name(void* self, const char* name);
const char* q_splitter_accessible_description(void* self);
void q_splitter_set_accessible_description(void* self, const char* description);
void q_splitter_set_layout_direction(void* self, int64_t direction);
int64_t q_splitter_layout_direction(void* self);
void q_splitter_unset_layout_direction(void* self);
void q_splitter_set_locale(void* self, void* locale);
QLocale* q_splitter_locale(void* self);
void q_splitter_unset_locale(void* self);
bool q_splitter_is_right_to_left(void* self);
bool q_splitter_is_left_to_right(void* self);
void q_splitter_set_focus(void* self);
bool q_splitter_is_active_window(void* self);
void q_splitter_activate_window(void* self);
void q_splitter_clear_focus(void* self);
void q_splitter_set_focus_with_reason(void* self, int64_t reason);
int64_t q_splitter_focus_policy(void* self);
void q_splitter_set_focus_policy(void* self, int64_t policy);
bool q_splitter_has_focus(void* self);
void q_splitter_set_tab_order(void* param1, void* param2);
void q_splitter_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_splitter_focus_proxy(void* self);
int64_t q_splitter_context_menu_policy(void* self);
void q_splitter_set_context_menu_policy(void* self, int64_t policy);
void q_splitter_grab_mouse(void* self);
void q_splitter_grab_mouse_with_q_cursor(void* self, void* param1);
void q_splitter_release_mouse(void* self);
void q_splitter_grab_keyboard(void* self);
void q_splitter_release_keyboard(void* self);
int32_t q_splitter_grab_shortcut(void* self, void* key);
void q_splitter_release_shortcut(void* self, int id);
void q_splitter_set_shortcut_enabled(void* self, int id);
void q_splitter_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_splitter_mouse_grabber();
QWidget* q_splitter_keyboard_grabber();
bool q_splitter_updates_enabled(void* self);
void q_splitter_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_splitter_graphics_proxy_widget(void* self);
void q_splitter_update(void* self);
void q_splitter_repaint(void* self);
void q_splitter_update2(void* self, int x, int y, int w, int h);
void q_splitter_update_with_q_rect(void* self, void* param1);
void q_splitter_update_with_q_region(void* self, void* param1);
void q_splitter_repaint2(void* self, int x, int y, int w, int h);
void q_splitter_repaint_with_q_rect(void* self, void* param1);
void q_splitter_repaint_with_q_region(void* self, void* param1);
void q_splitter_set_hidden(void* self, bool hidden);
void q_splitter_show(void* self);
void q_splitter_hide(void* self);
void q_splitter_show_minimized(void* self);
void q_splitter_show_maximized(void* self);
void q_splitter_show_full_screen(void* self);
void q_splitter_show_normal(void* self);
bool q_splitter_close(void* self);
void q_splitter_raise(void* self);
void q_splitter_lower(void* self);
void q_splitter_stack_under(void* self, void* param1);
void q_splitter_move(void* self, int x, int y);
void q_splitter_move_with_q_point(void* self, void* param1);
void q_splitter_resize(void* self, int w, int h);
void q_splitter_resize_with_q_size(void* self, void* param1);
void q_splitter_set_geometry(void* self, int x, int y, int w, int h);
void q_splitter_set_geometry_with_geometry(void* self, void* geometry);
char* q_splitter_save_geometry(void* self);
bool q_splitter_restore_geometry(void* self, const char* geometry);
void q_splitter_adjust_size(void* self);
bool q_splitter_is_visible(void* self);
bool q_splitter_is_visible_to(void* self, void* param1);
bool q_splitter_is_hidden(void* self);
bool q_splitter_is_minimized(void* self);
bool q_splitter_is_maximized(void* self);
bool q_splitter_is_full_screen(void* self);
int64_t q_splitter_window_state(void* self);
void q_splitter_set_window_state(void* self, int64_t state);
void q_splitter_override_window_state(void* self, int64_t state);
QSizePolicy* q_splitter_size_policy(void* self);
void q_splitter_set_size_policy(void* self, void* sizePolicy);
void q_splitter_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_splitter_visible_region(void* self);
void q_splitter_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_splitter_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_splitter_contents_margins(void* self);
QRect* q_splitter_contents_rect(void* self);
QLayout* q_splitter_layout(void* self);
void q_splitter_set_layout(void* self, void* layout);
void q_splitter_update_geometry(void* self);
void q_splitter_set_parent(void* self, void* parent);
void q_splitter_set_parent2(void* self, void* parent, int64_t f);
void q_splitter_scroll(void* self, int dx, int dy);
void q_splitter_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_splitter_focus_widget(void* self);
QWidget* q_splitter_next_in_focus_chain(void* self);
QWidget* q_splitter_previous_in_focus_chain(void* self);
bool q_splitter_accept_drops(void* self);
void q_splitter_set_accept_drops(void* self, bool on);
void q_splitter_add_action(void* self, void* action);
void q_splitter_add_actions(void* self, void* actions[]);
void q_splitter_insert_actions(void* self, void* before, void* actions[]);
void q_splitter_insert_action(void* self, void* before, void* action);
void q_splitter_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_splitter_actions(void* self);
QAction* q_splitter_add_action_with_text(void* self, const char* text);
QAction* q_splitter_add_action2(void* self, void* icon, const char* text);
QAction* q_splitter_add_action3(void* self, const char* text, void* shortcut);
QAction* q_splitter_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_splitter_parent_widget(void* self);
void q_splitter_set_window_flags(void* self, int64_t typeVal);
int64_t q_splitter_window_flags(void* self);
void q_splitter_set_window_flag(void* self, int64_t param1);
void q_splitter_override_window_flags(void* self, int64_t typeVal);
int64_t q_splitter_window_type(void* self);
QWidget* q_splitter_find(uint64_t param1);
QWidget* q_splitter_child_at(void* self, int x, int y);
QWidget* q_splitter_child_at_with_q_point(void* self, void* p);
void q_splitter_set_attribute(void* self, int64_t param1);
bool q_splitter_test_attribute(void* self, int64_t param1);
void q_splitter_ensure_polished(void* self);
bool q_splitter_is_ancestor_of(void* self, void* child);
bool q_splitter_auto_fill_background(void* self);
void q_splitter_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_splitter_backing_store(void* self);
QWindow* q_splitter_window_handle(void* self);
QScreen* q_splitter_screen(void* self);
void q_splitter_set_screen(void* self, void* screen);
QWidget* q_splitter_create_window_container(void* window);
void q_splitter_window_title_changed(void* self, const char* title);
void q_splitter_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_splitter_window_icon_changed(void* self, void* icon);
void q_splitter_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_splitter_window_icon_text_changed(void* self, const char* iconText);
void q_splitter_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_splitter_custom_context_menu_requested(void* self, void* pos);
void q_splitter_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_splitter_input_method_hints(void* self);
void q_splitter_set_input_method_hints(void* self, int64_t hints);
void q_splitter_render2(void* self, void* target, void* targetOffset);
void q_splitter_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_splitter_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_splitter_render22(void* self, void* painter, void* targetOffset);
void q_splitter_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_splitter_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_splitter_grab1(void* self, void* rectangle);
void q_splitter_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_splitter_grab_shortcut2(void* self, void* key, int64_t context);
void q_splitter_set_shortcut_enabled2(void* self, int id, bool enable);
void q_splitter_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_splitter_set_window_flag2(void* self, int64_t param1, bool on);
void q_splitter_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_splitter_create_window_container2(void* window, void* parent);
QWidget* q_splitter_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_splitter_object_name(void* self);
void q_splitter_set_object_name(void* self, const char* name);
bool q_splitter_is_widget_type(void* self);
bool q_splitter_is_window_type(void* self);
bool q_splitter_is_quick_item_type(void* self);
bool q_splitter_signals_blocked(void* self);
bool q_splitter_block_signals(void* self, bool b);
QThread* q_splitter_thread(void* self);
void q_splitter_move_to_thread(void* self, void* thread);
int32_t q_splitter_start_timer(void* self, int interval);
void q_splitter_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_splitter_children(void* self);
void q_splitter_install_event_filter(void* self, void* filterObj);
void q_splitter_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_splitter_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_splitter_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_splitter_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_splitter_disconnect_with_q_meta_object_connection(void* param1);
void q_splitter_dump_object_tree(void* self);
void q_splitter_dump_object_info(void* self);
bool q_splitter_set_property(void* self, const char* name, void* value);
QVariant* q_splitter_property(void* self, const char* name);
const char** q_splitter_dynamic_property_names(void* self);
QBindingStorage* q_splitter_binding_storage(void* self);
QBindingStorage* q_splitter_binding_storage2(void* self);
void q_splitter_destroyed(void* self);
void q_splitter_on_destroyed(void* self, void (*slot)(void*));
QObject* q_splitter_parent(void* self);
bool q_splitter_inherits(void* self, const char* classname);
void q_splitter_delete_later(void* self);
int32_t q_splitter_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_splitter_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_splitter_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_splitter_destroyed1(void* self, void* param1);
void q_splitter_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_splitter_painting_active(void* self);
int32_t q_splitter_width_m_m(void* self);
int32_t q_splitter_height_m_m(void* self);
int32_t q_splitter_logical_dpi_x(void* self);
int32_t q_splitter_logical_dpi_y(void* self);
int32_t q_splitter_physical_dpi_x(void* self);
int32_t q_splitter_physical_dpi_y(void* self);
double q_splitter_device_pixel_ratio(void* self);
double q_splitter_device_pixel_ratio_f(void* self);
int32_t q_splitter_color_count(void* self);
int32_t q_splitter_depth(void* self);
double q_splitter_device_pixel_ratio_f_scale();
void q_splitter_paint_event(void* self, void* param1);
void q_splitter_qbase_paint_event(void* self, void* param1);
void q_splitter_on_paint_event(void* self, void (*slot)(void*, void*));
void q_splitter_init_style_option(void* self, void* option);
void q_splitter_qbase_init_style_option(void* self, void* option);
void q_splitter_on_init_style_option(void* self, void (*slot)(void*, void*));
int32_t q_splitter_dev_type(void* self);
int32_t q_splitter_qbase_dev_type(void* self);
void q_splitter_on_dev_type(void* self, int32_t (*slot)());
void q_splitter_set_visible(void* self, bool visible);
void q_splitter_qbase_set_visible(void* self, bool visible);
void q_splitter_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_splitter_height_for_width(void* self, int param1);
int32_t q_splitter_qbase_height_for_width(void* self, int param1);
void q_splitter_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_splitter_has_height_for_width(void* self);
bool q_splitter_qbase_has_height_for_width(void* self);
void q_splitter_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_splitter_paint_engine(void* self);
QPaintEngine* q_splitter_qbase_paint_engine(void* self);
void q_splitter_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_splitter_mouse_press_event(void* self, void* event);
void q_splitter_qbase_mouse_press_event(void* self, void* event);
void q_splitter_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_splitter_mouse_release_event(void* self, void* event);
void q_splitter_qbase_mouse_release_event(void* self, void* event);
void q_splitter_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_splitter_mouse_double_click_event(void* self, void* event);
void q_splitter_qbase_mouse_double_click_event(void* self, void* event);
void q_splitter_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_splitter_mouse_move_event(void* self, void* event);
void q_splitter_qbase_mouse_move_event(void* self, void* event);
void q_splitter_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_splitter_wheel_event(void* self, void* event);
void q_splitter_qbase_wheel_event(void* self, void* event);
void q_splitter_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_splitter_key_press_event(void* self, void* event);
void q_splitter_qbase_key_press_event(void* self, void* event);
void q_splitter_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_splitter_key_release_event(void* self, void* event);
void q_splitter_qbase_key_release_event(void* self, void* event);
void q_splitter_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_splitter_focus_in_event(void* self, void* event);
void q_splitter_qbase_focus_in_event(void* self, void* event);
void q_splitter_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_splitter_focus_out_event(void* self, void* event);
void q_splitter_qbase_focus_out_event(void* self, void* event);
void q_splitter_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_splitter_enter_event(void* self, void* event);
void q_splitter_qbase_enter_event(void* self, void* event);
void q_splitter_on_enter_event(void* self, void (*slot)(void*, void*));
void q_splitter_leave_event(void* self, void* event);
void q_splitter_qbase_leave_event(void* self, void* event);
void q_splitter_on_leave_event(void* self, void (*slot)(void*, void*));
void q_splitter_move_event(void* self, void* event);
void q_splitter_qbase_move_event(void* self, void* event);
void q_splitter_on_move_event(void* self, void (*slot)(void*, void*));
void q_splitter_close_event(void* self, void* event);
void q_splitter_qbase_close_event(void* self, void* event);
void q_splitter_on_close_event(void* self, void (*slot)(void*, void*));
void q_splitter_context_menu_event(void* self, void* event);
void q_splitter_qbase_context_menu_event(void* self, void* event);
void q_splitter_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_splitter_tablet_event(void* self, void* event);
void q_splitter_qbase_tablet_event(void* self, void* event);
void q_splitter_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_splitter_action_event(void* self, void* event);
void q_splitter_qbase_action_event(void* self, void* event);
void q_splitter_on_action_event(void* self, void (*slot)(void*, void*));
void q_splitter_drag_enter_event(void* self, void* event);
void q_splitter_qbase_drag_enter_event(void* self, void* event);
void q_splitter_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_splitter_drag_move_event(void* self, void* event);
void q_splitter_qbase_drag_move_event(void* self, void* event);
void q_splitter_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_splitter_drag_leave_event(void* self, void* event);
void q_splitter_qbase_drag_leave_event(void* self, void* event);
void q_splitter_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_splitter_drop_event(void* self, void* event);
void q_splitter_qbase_drop_event(void* self, void* event);
void q_splitter_on_drop_event(void* self, void (*slot)(void*, void*));
void q_splitter_show_event(void* self, void* event);
void q_splitter_qbase_show_event(void* self, void* event);
void q_splitter_on_show_event(void* self, void (*slot)(void*, void*));
void q_splitter_hide_event(void* self, void* event);
void q_splitter_qbase_hide_event(void* self, void* event);
void q_splitter_on_hide_event(void* self, void (*slot)(void*, void*));
bool q_splitter_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_splitter_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_splitter_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_splitter_metric(void* self, int64_t param1);
int32_t q_splitter_qbase_metric(void* self, int64_t param1);
void q_splitter_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_splitter_init_painter(void* self, void* painter);
void q_splitter_qbase_init_painter(void* self, void* painter);
void q_splitter_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_splitter_redirected(void* self, void* offset);
QPaintDevice* q_splitter_qbase_redirected(void* self, void* offset);
void q_splitter_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_splitter_shared_painter(void* self);
QPainter* q_splitter_qbase_shared_painter(void* self);
void q_splitter_on_shared_painter(void* self, QPainter* (*slot)());
void q_splitter_input_method_event(void* self, void* param1);
void q_splitter_qbase_input_method_event(void* self, void* param1);
void q_splitter_on_input_method_event(void* self, void (*slot)(void*, void*));
QVariant* q_splitter_input_method_query(void* self, int64_t param1);
QVariant* q_splitter_qbase_input_method_query(void* self, int64_t param1);
void q_splitter_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
bool q_splitter_focus_next_prev_child(void* self, bool next);
bool q_splitter_qbase_focus_next_prev_child(void* self, bool next);
void q_splitter_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
bool q_splitter_event_filter(void* self, void* watched, void* event);
bool q_splitter_qbase_event_filter(void* self, void* watched, void* event);
void q_splitter_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_splitter_timer_event(void* self, void* event);
void q_splitter_qbase_timer_event(void* self, void* event);
void q_splitter_on_timer_event(void* self, void (*slot)(void*, void*));
void q_splitter_custom_event(void* self, void* event);
void q_splitter_qbase_custom_event(void* self, void* event);
void q_splitter_on_custom_event(void* self, void (*slot)(void*, void*));
void q_splitter_connect_notify(void* self, void* signal);
void q_splitter_qbase_connect_notify(void* self, void* signal);
void q_splitter_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_splitter_disconnect_notify(void* self, void* signal);
void q_splitter_qbase_disconnect_notify(void* self, void* signal);
void q_splitter_on_disconnect_notify(void* self, void (*slot)(void*, void*));
void q_splitter_draw_frame(void* self, void* param1);
void q_splitter_qbase_draw_frame(void* self, void* param1);
void q_splitter_on_draw_frame(void* self, void (*slot)(void*, void*));
void q_splitter_update_micro_focus(void* self);
void q_splitter_qbase_update_micro_focus(void* self);
void q_splitter_on_update_micro_focus(void* self, void (*slot)());
void q_splitter_create(void* self);
void q_splitter_qbase_create(void* self);
void q_splitter_on_create(void* self, void (*slot)());
void q_splitter_destroy(void* self);
void q_splitter_qbase_destroy(void* self);
void q_splitter_on_destroy(void* self, void (*slot)());
bool q_splitter_focus_next_child(void* self);
bool q_splitter_qbase_focus_next_child(void* self);
void q_splitter_on_focus_next_child(void* self, bool (*slot)());
bool q_splitter_focus_previous_child(void* self);
bool q_splitter_qbase_focus_previous_child(void* self);
void q_splitter_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_splitter_sender(void* self);
QObject* q_splitter_qbase_sender(void* self);
void q_splitter_on_sender(void* self, QObject* (*slot)());
int32_t q_splitter_sender_signal_index(void* self);
int32_t q_splitter_qbase_sender_signal_index(void* self);
void q_splitter_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_splitter_receivers(void* self, const char* signal);
int32_t q_splitter_qbase_receivers(void* self, const char* signal);
void q_splitter_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_splitter_is_signal_connected(void* self, void* signal);
bool q_splitter_qbase_is_signal_connected(void* self, void* signal);
void q_splitter_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_splitter_delete(void* self);

QSplitterHandle* q_splitterhandle_new(int64_t o, void* parent);
QMetaObject* q_splitterhandle_meta_object(void* self);
void* q_splitterhandle_metacast(void* self, const char* param1);
int32_t q_splitterhandle_metacall(void* self, int64_t param1, int param2, void* param3);
void q_splitterhandle_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_splitterhandle_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_splitterhandle_tr(const char* s);
void q_splitterhandle_set_orientation(void* self, int64_t o);
int64_t q_splitterhandle_orientation(void* self);
bool q_splitterhandle_opaque_resize(void* self);
QSplitter* q_splitterhandle_splitter(void* self);
QSize* q_splitterhandle_size_hint(void* self);
void q_splitterhandle_on_size_hint(void* self, QSize* (*slot)());
QSize* q_splitterhandle_qbase_size_hint(void* self);
void q_splitterhandle_paint_event(void* self, void* param1);
void q_splitterhandle_on_paint_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_qbase_paint_event(void* self, void* param1);
void q_splitterhandle_mouse_move_event(void* self, void* param1);
void q_splitterhandle_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_qbase_mouse_move_event(void* self, void* param1);
void q_splitterhandle_mouse_press_event(void* self, void* param1);
void q_splitterhandle_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_qbase_mouse_press_event(void* self, void* param1);
void q_splitterhandle_mouse_release_event(void* self, void* param1);
void q_splitterhandle_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_qbase_mouse_release_event(void* self, void* param1);
void q_splitterhandle_resize_event(void* self, void* param1);
void q_splitterhandle_on_resize_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_qbase_resize_event(void* self, void* param1);
bool q_splitterhandle_event(void* self, void* param1);
void q_splitterhandle_on_event(void* self, bool (*slot)(void*, void*));
bool q_splitterhandle_qbase_event(void* self, void* param1);
void q_splitterhandle_move_splitter(void* self, int p);
void q_splitterhandle_on_move_splitter(void* self, void (*slot)(void*, int));
void q_splitterhandle_qbase_move_splitter(void* self, int p);
int32_t q_splitterhandle_closest_legal_position(void* self, int p);
void q_splitterhandle_on_closest_legal_position(void* self, int32_t (*slot)(void*, int));
int32_t q_splitterhandle_qbase_closest_legal_position(void* self, int p);
const char* q_splitterhandle_tr2(const char* s, const char* c);
const char* q_splitterhandle_tr3(const char* s, const char* c, int n);
uintptr_t q_splitterhandle_win_id(void* self);
void q_splitterhandle_create_win_id(void* self);
uintptr_t q_splitterhandle_internal_win_id(void* self);
uintptr_t q_splitterhandle_effective_win_id(void* self);
QStyle* q_splitterhandle_style(void* self);
void q_splitterhandle_set_style(void* self, void* style);
bool q_splitterhandle_is_top_level(void* self);
bool q_splitterhandle_is_window(void* self);
bool q_splitterhandle_is_modal(void* self);
int64_t q_splitterhandle_window_modality(void* self);
void q_splitterhandle_set_window_modality(void* self, int64_t windowModality);
bool q_splitterhandle_is_enabled(void* self);
bool q_splitterhandle_is_enabled_to(void* self, void* param1);
void q_splitterhandle_set_enabled(void* self, bool enabled);
void q_splitterhandle_set_disabled(void* self, bool disabled);
void q_splitterhandle_set_window_modified(void* self, bool windowModified);
QRect* q_splitterhandle_frame_geometry(void* self);
QRect* q_splitterhandle_geometry(void* self);
QRect* q_splitterhandle_normal_geometry(void* self);
int32_t q_splitterhandle_x(void* self);
int32_t q_splitterhandle_y(void* self);
QPoint* q_splitterhandle_pos(void* self);
QSize* q_splitterhandle_frame_size(void* self);
QSize* q_splitterhandle_size(void* self);
int32_t q_splitterhandle_width(void* self);
int32_t q_splitterhandle_height(void* self);
QRect* q_splitterhandle_rect(void* self);
QRect* q_splitterhandle_children_rect(void* self);
QRegion* q_splitterhandle_children_region(void* self);
QSize* q_splitterhandle_minimum_size(void* self);
QSize* q_splitterhandle_maximum_size(void* self);
int32_t q_splitterhandle_minimum_width(void* self);
int32_t q_splitterhandle_minimum_height(void* self);
int32_t q_splitterhandle_maximum_width(void* self);
int32_t q_splitterhandle_maximum_height(void* self);
void q_splitterhandle_set_minimum_size(void* self, void* minimumSize);
void q_splitterhandle_set_minimum_size2(void* self, int minw, int minh);
void q_splitterhandle_set_maximum_size(void* self, void* maximumSize);
void q_splitterhandle_set_maximum_size2(void* self, int maxw, int maxh);
void q_splitterhandle_set_minimum_width(void* self, int minw);
void q_splitterhandle_set_minimum_height(void* self, int minh);
void q_splitterhandle_set_maximum_width(void* self, int maxw);
void q_splitterhandle_set_maximum_height(void* self, int maxh);
QSize* q_splitterhandle_size_increment(void* self);
void q_splitterhandle_set_size_increment(void* self, void* sizeIncrement);
void q_splitterhandle_set_size_increment2(void* self, int w, int h);
QSize* q_splitterhandle_base_size(void* self);
void q_splitterhandle_set_base_size(void* self, void* baseSize);
void q_splitterhandle_set_base_size2(void* self, int basew, int baseh);
void q_splitterhandle_set_fixed_size(void* self, void* fixedSize);
void q_splitterhandle_set_fixed_size2(void* self, int w, int h);
void q_splitterhandle_set_fixed_width(void* self, int w);
void q_splitterhandle_set_fixed_height(void* self, int h);
QPointF* q_splitterhandle_map_to_global(void* self, void* param1);
QPoint* q_splitterhandle_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_splitterhandle_map_from_global(void* self, void* param1);
QPoint* q_splitterhandle_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_splitterhandle_map_to_parent(void* self, void* param1);
QPoint* q_splitterhandle_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_splitterhandle_map_from_parent(void* self, void* param1);
QPoint* q_splitterhandle_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_splitterhandle_map_to(void* self, void* param1, void* param2);
QPoint* q_splitterhandle_map_to2(void* self, void* param1, void* param2);
QPointF* q_splitterhandle_map_from(void* self, void* param1, void* param2);
QPoint* q_splitterhandle_map_from2(void* self, void* param1, void* param2);
QWidget* q_splitterhandle_window(void* self);
QWidget* q_splitterhandle_native_parent_widget(void* self);
QWidget* q_splitterhandle_top_level_widget(void* self);
QPalette* q_splitterhandle_palette(void* self);
void q_splitterhandle_set_palette(void* self, void* palette);
void q_splitterhandle_set_background_role(void* self, int64_t backgroundRole);
int64_t q_splitterhandle_background_role(void* self);
void q_splitterhandle_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_splitterhandle_foreground_role(void* self);
QFont* q_splitterhandle_font(void* self);
void q_splitterhandle_set_font(void* self, void* font);
QFontMetrics* q_splitterhandle_font_metrics(void* self);
QFontInfo* q_splitterhandle_font_info(void* self);
QCursor* q_splitterhandle_cursor(void* self);
void q_splitterhandle_set_cursor(void* self, void* cursor);
void q_splitterhandle_unset_cursor(void* self);
void q_splitterhandle_set_mouse_tracking(void* self, bool enable);
bool q_splitterhandle_has_mouse_tracking(void* self);
bool q_splitterhandle_under_mouse(void* self);
void q_splitterhandle_set_tablet_tracking(void* self, bool enable);
bool q_splitterhandle_has_tablet_tracking(void* self);
void q_splitterhandle_set_mask(void* self, void* mask);
void q_splitterhandle_set_mask_with_mask(void* self, void* mask);
QRegion* q_splitterhandle_mask(void* self);
void q_splitterhandle_clear_mask(void* self);
void q_splitterhandle_render(void* self, void* target);
void q_splitterhandle_render_with_painter(void* self, void* painter);
QPixmap* q_splitterhandle_grab(void* self);
QGraphicsEffect* q_splitterhandle_graphics_effect(void* self);
void q_splitterhandle_set_graphics_effect(void* self, void* effect);
void q_splitterhandle_grab_gesture(void* self, int64_t typeVal);
void q_splitterhandle_ungrab_gesture(void* self, int64_t typeVal);
void q_splitterhandle_set_window_title(void* self, const char* windowTitle);
void q_splitterhandle_set_style_sheet(void* self, const char* styleSheet);
const char* q_splitterhandle_style_sheet(void* self);
const char* q_splitterhandle_window_title(void* self);
void q_splitterhandle_set_window_icon(void* self, void* icon);
QIcon* q_splitterhandle_window_icon(void* self);
void q_splitterhandle_set_window_icon_text(void* self, const char* windowIconText);
const char* q_splitterhandle_window_icon_text(void* self);
void q_splitterhandle_set_window_role(void* self, const char* windowRole);
const char* q_splitterhandle_window_role(void* self);
void q_splitterhandle_set_window_file_path(void* self, const char* filePath);
const char* q_splitterhandle_window_file_path(void* self);
void q_splitterhandle_set_window_opacity(void* self, double level);
double q_splitterhandle_window_opacity(void* self);
bool q_splitterhandle_is_window_modified(void* self);
void q_splitterhandle_set_tool_tip(void* self, const char* toolTip);
const char* q_splitterhandle_tool_tip(void* self);
void q_splitterhandle_set_tool_tip_duration(void* self, int msec);
int32_t q_splitterhandle_tool_tip_duration(void* self);
void q_splitterhandle_set_status_tip(void* self, const char* statusTip);
const char* q_splitterhandle_status_tip(void* self);
void q_splitterhandle_set_whats_this(void* self, const char* whatsThis);
const char* q_splitterhandle_whats_this(void* self);
const char* q_splitterhandle_accessible_name(void* self);
void q_splitterhandle_set_accessible_name(void* self, const char* name);
const char* q_splitterhandle_accessible_description(void* self);
void q_splitterhandle_set_accessible_description(void* self, const char* description);
void q_splitterhandle_set_layout_direction(void* self, int64_t direction);
int64_t q_splitterhandle_layout_direction(void* self);
void q_splitterhandle_unset_layout_direction(void* self);
void q_splitterhandle_set_locale(void* self, void* locale);
QLocale* q_splitterhandle_locale(void* self);
void q_splitterhandle_unset_locale(void* self);
bool q_splitterhandle_is_right_to_left(void* self);
bool q_splitterhandle_is_left_to_right(void* self);
void q_splitterhandle_set_focus(void* self);
bool q_splitterhandle_is_active_window(void* self);
void q_splitterhandle_activate_window(void* self);
void q_splitterhandle_clear_focus(void* self);
void q_splitterhandle_set_focus_with_reason(void* self, int64_t reason);
int64_t q_splitterhandle_focus_policy(void* self);
void q_splitterhandle_set_focus_policy(void* self, int64_t policy);
bool q_splitterhandle_has_focus(void* self);
void q_splitterhandle_set_tab_order(void* param1, void* param2);
void q_splitterhandle_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_splitterhandle_focus_proxy(void* self);
int64_t q_splitterhandle_context_menu_policy(void* self);
void q_splitterhandle_set_context_menu_policy(void* self, int64_t policy);
void q_splitterhandle_grab_mouse(void* self);
void q_splitterhandle_grab_mouse_with_q_cursor(void* self, void* param1);
void q_splitterhandle_release_mouse(void* self);
void q_splitterhandle_grab_keyboard(void* self);
void q_splitterhandle_release_keyboard(void* self);
int32_t q_splitterhandle_grab_shortcut(void* self, void* key);
void q_splitterhandle_release_shortcut(void* self, int id);
void q_splitterhandle_set_shortcut_enabled(void* self, int id);
void q_splitterhandle_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_splitterhandle_mouse_grabber();
QWidget* q_splitterhandle_keyboard_grabber();
bool q_splitterhandle_updates_enabled(void* self);
void q_splitterhandle_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_splitterhandle_graphics_proxy_widget(void* self);
void q_splitterhandle_update(void* self);
void q_splitterhandle_repaint(void* self);
void q_splitterhandle_update2(void* self, int x, int y, int w, int h);
void q_splitterhandle_update_with_q_rect(void* self, void* param1);
void q_splitterhandle_update_with_q_region(void* self, void* param1);
void q_splitterhandle_repaint2(void* self, int x, int y, int w, int h);
void q_splitterhandle_repaint_with_q_rect(void* self, void* param1);
void q_splitterhandle_repaint_with_q_region(void* self, void* param1);
void q_splitterhandle_set_hidden(void* self, bool hidden);
void q_splitterhandle_show(void* self);
void q_splitterhandle_hide(void* self);
void q_splitterhandle_show_minimized(void* self);
void q_splitterhandle_show_maximized(void* self);
void q_splitterhandle_show_full_screen(void* self);
void q_splitterhandle_show_normal(void* self);
bool q_splitterhandle_close(void* self);
void q_splitterhandle_raise(void* self);
void q_splitterhandle_lower(void* self);
void q_splitterhandle_stack_under(void* self, void* param1);
void q_splitterhandle_move(void* self, int x, int y);
void q_splitterhandle_move_with_q_point(void* self, void* param1);
void q_splitterhandle_resize(void* self, int w, int h);
void q_splitterhandle_resize_with_q_size(void* self, void* param1);
void q_splitterhandle_set_geometry(void* self, int x, int y, int w, int h);
void q_splitterhandle_set_geometry_with_geometry(void* self, void* geometry);
char* q_splitterhandle_save_geometry(void* self);
bool q_splitterhandle_restore_geometry(void* self, const char* geometry);
void q_splitterhandle_adjust_size(void* self);
bool q_splitterhandle_is_visible(void* self);
bool q_splitterhandle_is_visible_to(void* self, void* param1);
bool q_splitterhandle_is_hidden(void* self);
bool q_splitterhandle_is_minimized(void* self);
bool q_splitterhandle_is_maximized(void* self);
bool q_splitterhandle_is_full_screen(void* self);
int64_t q_splitterhandle_window_state(void* self);
void q_splitterhandle_set_window_state(void* self, int64_t state);
void q_splitterhandle_override_window_state(void* self, int64_t state);
QSizePolicy* q_splitterhandle_size_policy(void* self);
void q_splitterhandle_set_size_policy(void* self, void* sizePolicy);
void q_splitterhandle_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_splitterhandle_visible_region(void* self);
void q_splitterhandle_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_splitterhandle_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_splitterhandle_contents_margins(void* self);
QRect* q_splitterhandle_contents_rect(void* self);
QLayout* q_splitterhandle_layout(void* self);
void q_splitterhandle_set_layout(void* self, void* layout);
void q_splitterhandle_update_geometry(void* self);
void q_splitterhandle_set_parent(void* self, void* parent);
void q_splitterhandle_set_parent2(void* self, void* parent, int64_t f);
void q_splitterhandle_scroll(void* self, int dx, int dy);
void q_splitterhandle_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_splitterhandle_focus_widget(void* self);
QWidget* q_splitterhandle_next_in_focus_chain(void* self);
QWidget* q_splitterhandle_previous_in_focus_chain(void* self);
bool q_splitterhandle_accept_drops(void* self);
void q_splitterhandle_set_accept_drops(void* self, bool on);
void q_splitterhandle_add_action(void* self, void* action);
void q_splitterhandle_add_actions(void* self, void* actions[]);
void q_splitterhandle_insert_actions(void* self, void* before, void* actions[]);
void q_splitterhandle_insert_action(void* self, void* before, void* action);
void q_splitterhandle_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_splitterhandle_actions(void* self);
QAction* q_splitterhandle_add_action_with_text(void* self, const char* text);
QAction* q_splitterhandle_add_action2(void* self, void* icon, const char* text);
QAction* q_splitterhandle_add_action3(void* self, const char* text, void* shortcut);
QAction* q_splitterhandle_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_splitterhandle_parent_widget(void* self);
void q_splitterhandle_set_window_flags(void* self, int64_t typeVal);
int64_t q_splitterhandle_window_flags(void* self);
void q_splitterhandle_set_window_flag(void* self, int64_t param1);
void q_splitterhandle_override_window_flags(void* self, int64_t typeVal);
int64_t q_splitterhandle_window_type(void* self);
QWidget* q_splitterhandle_find(uint64_t param1);
QWidget* q_splitterhandle_child_at(void* self, int x, int y);
QWidget* q_splitterhandle_child_at_with_q_point(void* self, void* p);
void q_splitterhandle_set_attribute(void* self, int64_t param1);
bool q_splitterhandle_test_attribute(void* self, int64_t param1);
void q_splitterhandle_ensure_polished(void* self);
bool q_splitterhandle_is_ancestor_of(void* self, void* child);
bool q_splitterhandle_auto_fill_background(void* self);
void q_splitterhandle_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_splitterhandle_backing_store(void* self);
QWindow* q_splitterhandle_window_handle(void* self);
QScreen* q_splitterhandle_screen(void* self);
void q_splitterhandle_set_screen(void* self, void* screen);
QWidget* q_splitterhandle_create_window_container(void* window);
void q_splitterhandle_window_title_changed(void* self, const char* title);
void q_splitterhandle_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_splitterhandle_window_icon_changed(void* self, void* icon);
void q_splitterhandle_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_splitterhandle_window_icon_text_changed(void* self, const char* iconText);
void q_splitterhandle_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_splitterhandle_custom_context_menu_requested(void* self, void* pos);
void q_splitterhandle_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_splitterhandle_input_method_hints(void* self);
void q_splitterhandle_set_input_method_hints(void* self, int64_t hints);
void q_splitterhandle_render2(void* self, void* target, void* targetOffset);
void q_splitterhandle_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_splitterhandle_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_splitterhandle_render22(void* self, void* painter, void* targetOffset);
void q_splitterhandle_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_splitterhandle_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_splitterhandle_grab1(void* self, void* rectangle);
void q_splitterhandle_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_splitterhandle_grab_shortcut2(void* self, void* key, int64_t context);
void q_splitterhandle_set_shortcut_enabled2(void* self, int id, bool enable);
void q_splitterhandle_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_splitterhandle_set_window_flag2(void* self, int64_t param1, bool on);
void q_splitterhandle_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_splitterhandle_create_window_container2(void* window, void* parent);
QWidget* q_splitterhandle_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_splitterhandle_object_name(void* self);
void q_splitterhandle_set_object_name(void* self, const char* name);
bool q_splitterhandle_is_widget_type(void* self);
bool q_splitterhandle_is_window_type(void* self);
bool q_splitterhandle_is_quick_item_type(void* self);
bool q_splitterhandle_signals_blocked(void* self);
bool q_splitterhandle_block_signals(void* self, bool b);
QThread* q_splitterhandle_thread(void* self);
void q_splitterhandle_move_to_thread(void* self, void* thread);
int32_t q_splitterhandle_start_timer(void* self, int interval);
void q_splitterhandle_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_splitterhandle_children(void* self);
void q_splitterhandle_install_event_filter(void* self, void* filterObj);
void q_splitterhandle_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_splitterhandle_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_splitterhandle_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_splitterhandle_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_splitterhandle_disconnect_with_q_meta_object_connection(void* param1);
void q_splitterhandle_dump_object_tree(void* self);
void q_splitterhandle_dump_object_info(void* self);
bool q_splitterhandle_set_property(void* self, const char* name, void* value);
QVariant* q_splitterhandle_property(void* self, const char* name);
const char** q_splitterhandle_dynamic_property_names(void* self);
QBindingStorage* q_splitterhandle_binding_storage(void* self);
QBindingStorage* q_splitterhandle_binding_storage2(void* self);
void q_splitterhandle_destroyed(void* self);
void q_splitterhandle_on_destroyed(void* self, void (*slot)(void*));
QObject* q_splitterhandle_parent(void* self);
bool q_splitterhandle_inherits(void* self, const char* classname);
void q_splitterhandle_delete_later(void* self);
int32_t q_splitterhandle_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_splitterhandle_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_splitterhandle_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_splitterhandle_destroyed1(void* self, void* param1);
void q_splitterhandle_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_splitterhandle_painting_active(void* self);
int32_t q_splitterhandle_width_m_m(void* self);
int32_t q_splitterhandle_height_m_m(void* self);
int32_t q_splitterhandle_logical_dpi_x(void* self);
int32_t q_splitterhandle_logical_dpi_y(void* self);
int32_t q_splitterhandle_physical_dpi_x(void* self);
int32_t q_splitterhandle_physical_dpi_y(void* self);
double q_splitterhandle_device_pixel_ratio(void* self);
double q_splitterhandle_device_pixel_ratio_f(void* self);
int32_t q_splitterhandle_color_count(void* self);
int32_t q_splitterhandle_depth(void* self);
double q_splitterhandle_device_pixel_ratio_f_scale();
int32_t q_splitterhandle_dev_type(void* self);
int32_t q_splitterhandle_qbase_dev_type(void* self);
void q_splitterhandle_on_dev_type(void* self, int32_t (*slot)());
void q_splitterhandle_set_visible(void* self, bool visible);
void q_splitterhandle_qbase_set_visible(void* self, bool visible);
void q_splitterhandle_on_set_visible(void* self, void (*slot)(void*, bool));
QSize* q_splitterhandle_minimum_size_hint(void* self);
QSize* q_splitterhandle_qbase_minimum_size_hint(void* self);
void q_splitterhandle_on_minimum_size_hint(void* self, QSize* (*slot)());
int32_t q_splitterhandle_height_for_width(void* self, int param1);
int32_t q_splitterhandle_qbase_height_for_width(void* self, int param1);
void q_splitterhandle_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_splitterhandle_has_height_for_width(void* self);
bool q_splitterhandle_qbase_has_height_for_width(void* self);
void q_splitterhandle_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_splitterhandle_paint_engine(void* self);
QPaintEngine* q_splitterhandle_qbase_paint_engine(void* self);
void q_splitterhandle_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_splitterhandle_mouse_double_click_event(void* self, void* event);
void q_splitterhandle_qbase_mouse_double_click_event(void* self, void* event);
void q_splitterhandle_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_wheel_event(void* self, void* event);
void q_splitterhandle_qbase_wheel_event(void* self, void* event);
void q_splitterhandle_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_key_press_event(void* self, void* event);
void q_splitterhandle_qbase_key_press_event(void* self, void* event);
void q_splitterhandle_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_key_release_event(void* self, void* event);
void q_splitterhandle_qbase_key_release_event(void* self, void* event);
void q_splitterhandle_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_focus_in_event(void* self, void* event);
void q_splitterhandle_qbase_focus_in_event(void* self, void* event);
void q_splitterhandle_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_focus_out_event(void* self, void* event);
void q_splitterhandle_qbase_focus_out_event(void* self, void* event);
void q_splitterhandle_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_enter_event(void* self, void* event);
void q_splitterhandle_qbase_enter_event(void* self, void* event);
void q_splitterhandle_on_enter_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_leave_event(void* self, void* event);
void q_splitterhandle_qbase_leave_event(void* self, void* event);
void q_splitterhandle_on_leave_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_move_event(void* self, void* event);
void q_splitterhandle_qbase_move_event(void* self, void* event);
void q_splitterhandle_on_move_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_close_event(void* self, void* event);
void q_splitterhandle_qbase_close_event(void* self, void* event);
void q_splitterhandle_on_close_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_context_menu_event(void* self, void* event);
void q_splitterhandle_qbase_context_menu_event(void* self, void* event);
void q_splitterhandle_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_tablet_event(void* self, void* event);
void q_splitterhandle_qbase_tablet_event(void* self, void* event);
void q_splitterhandle_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_action_event(void* self, void* event);
void q_splitterhandle_qbase_action_event(void* self, void* event);
void q_splitterhandle_on_action_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_drag_enter_event(void* self, void* event);
void q_splitterhandle_qbase_drag_enter_event(void* self, void* event);
void q_splitterhandle_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_drag_move_event(void* self, void* event);
void q_splitterhandle_qbase_drag_move_event(void* self, void* event);
void q_splitterhandle_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_drag_leave_event(void* self, void* event);
void q_splitterhandle_qbase_drag_leave_event(void* self, void* event);
void q_splitterhandle_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_drop_event(void* self, void* event);
void q_splitterhandle_qbase_drop_event(void* self, void* event);
void q_splitterhandle_on_drop_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_show_event(void* self, void* event);
void q_splitterhandle_qbase_show_event(void* self, void* event);
void q_splitterhandle_on_show_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_hide_event(void* self, void* event);
void q_splitterhandle_qbase_hide_event(void* self, void* event);
void q_splitterhandle_on_hide_event(void* self, void (*slot)(void*, void*));
bool q_splitterhandle_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_splitterhandle_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_splitterhandle_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
void q_splitterhandle_change_event(void* self, void* param1);
void q_splitterhandle_qbase_change_event(void* self, void* param1);
void q_splitterhandle_on_change_event(void* self, void (*slot)(void*, void*));
int32_t q_splitterhandle_metric(void* self, int64_t param1);
int32_t q_splitterhandle_qbase_metric(void* self, int64_t param1);
void q_splitterhandle_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_splitterhandle_init_painter(void* self, void* painter);
void q_splitterhandle_qbase_init_painter(void* self, void* painter);
void q_splitterhandle_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_splitterhandle_redirected(void* self, void* offset);
QPaintDevice* q_splitterhandle_qbase_redirected(void* self, void* offset);
void q_splitterhandle_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_splitterhandle_shared_painter(void* self);
QPainter* q_splitterhandle_qbase_shared_painter(void* self);
void q_splitterhandle_on_shared_painter(void* self, QPainter* (*slot)());
void q_splitterhandle_input_method_event(void* self, void* param1);
void q_splitterhandle_qbase_input_method_event(void* self, void* param1);
void q_splitterhandle_on_input_method_event(void* self, void (*slot)(void*, void*));
QVariant* q_splitterhandle_input_method_query(void* self, int64_t param1);
QVariant* q_splitterhandle_qbase_input_method_query(void* self, int64_t param1);
void q_splitterhandle_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
bool q_splitterhandle_focus_next_prev_child(void* self, bool next);
bool q_splitterhandle_qbase_focus_next_prev_child(void* self, bool next);
void q_splitterhandle_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
bool q_splitterhandle_event_filter(void* self, void* watched, void* event);
bool q_splitterhandle_qbase_event_filter(void* self, void* watched, void* event);
void q_splitterhandle_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_splitterhandle_timer_event(void* self, void* event);
void q_splitterhandle_qbase_timer_event(void* self, void* event);
void q_splitterhandle_on_timer_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_child_event(void* self, void* event);
void q_splitterhandle_qbase_child_event(void* self, void* event);
void q_splitterhandle_on_child_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_custom_event(void* self, void* event);
void q_splitterhandle_qbase_custom_event(void* self, void* event);
void q_splitterhandle_on_custom_event(void* self, void (*slot)(void*, void*));
void q_splitterhandle_connect_notify(void* self, void* signal);
void q_splitterhandle_qbase_connect_notify(void* self, void* signal);
void q_splitterhandle_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_splitterhandle_disconnect_notify(void* self, void* signal);
void q_splitterhandle_qbase_disconnect_notify(void* self, void* signal);
void q_splitterhandle_on_disconnect_notify(void* self, void (*slot)(void*, void*));
void q_splitterhandle_update_micro_focus(void* self);
void q_splitterhandle_qbase_update_micro_focus(void* self);
void q_splitterhandle_on_update_micro_focus(void* self, void (*slot)());
void q_splitterhandle_create(void* self);
void q_splitterhandle_qbase_create(void* self);
void q_splitterhandle_on_create(void* self, void (*slot)());
void q_splitterhandle_destroy(void* self);
void q_splitterhandle_qbase_destroy(void* self);
void q_splitterhandle_on_destroy(void* self, void (*slot)());
bool q_splitterhandle_focus_next_child(void* self);
bool q_splitterhandle_qbase_focus_next_child(void* self);
void q_splitterhandle_on_focus_next_child(void* self, bool (*slot)());
bool q_splitterhandle_focus_previous_child(void* self);
bool q_splitterhandle_qbase_focus_previous_child(void* self);
void q_splitterhandle_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_splitterhandle_sender(void* self);
QObject* q_splitterhandle_qbase_sender(void* self);
void q_splitterhandle_on_sender(void* self, QObject* (*slot)());
int32_t q_splitterhandle_sender_signal_index(void* self);
int32_t q_splitterhandle_qbase_sender_signal_index(void* self);
void q_splitterhandle_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_splitterhandle_receivers(void* self, const char* signal);
int32_t q_splitterhandle_qbase_receivers(void* self, const char* signal);
void q_splitterhandle_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_splitterhandle_is_signal_connected(void* self, void* signal);
bool q_splitterhandle_qbase_is_signal_connected(void* self, void* signal);
void q_splitterhandle_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_splitterhandle_delete(void* self);

#endif
