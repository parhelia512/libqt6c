#pragma once
#ifndef SRCQT6C_LIBQSTANDARDITEMMODEL_H
#define SRCQT6C_LIBQSTANDARDITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqabstractitemmodel.h"
#include "libqanystringview.h"
#include "libqbindingstorage.h"
#include "libqbrush.h"
#include "libqevent.h"
#include "libqdatastream.h"
#include "libqfont.h"
#include "libqicon.h"
#include "libqmetaobject.h"
#include "libqmimedata.h"
#include "libqobject.h"
#include "libqsize.h"
#include <string.h>
#include "libqthread.h"
#include "libqvariant.h"

QStandardItem* q_standarditem_new();
QStandardItem* q_standarditem_new2(const char* text);
QStandardItem* q_standarditem_new3(void* icon, const char* text);
QStandardItem* q_standarditem_new4(int rows);
QStandardItem* q_standarditem_new5(int rows, int columns);
QVariant* q_standarditem_data(void* self, int role);
void q_standarditem_on_data(void* self, QVariant* (*slot)(void*, int));
QVariant* q_standarditem_qbase_data(void* self, int role);
void q_standarditem_multi_data(void* self, void* roleDataSpan);
void q_standarditem_on_multi_data(void* self, void (*slot)(void*, void*));
void q_standarditem_qbase_multi_data(void* self, void* roleDataSpan);
void q_standarditem_set_data(void* self, void* value, int role);
void q_standarditem_on_set_data(void* self, void (*slot)(void*, void*, int));
void q_standarditem_qbase_set_data(void* self, void* value, int role);
void q_standarditem_clear_data(void* self);
const char* q_standarditem_text(void* self);
void q_standarditem_set_text(void* self, const char* text);
QIcon* q_standarditem_icon(void* self);
void q_standarditem_set_icon(void* self, void* icon);
const char* q_standarditem_tool_tip(void* self);
void q_standarditem_set_tool_tip(void* self, const char* toolTip);
const char* q_standarditem_status_tip(void* self);
void q_standarditem_set_status_tip(void* self, const char* statusTip);
const char* q_standarditem_whats_this(void* self);
void q_standarditem_set_whats_this(void* self, const char* whatsThis);
QSize* q_standarditem_size_hint(void* self);
void q_standarditem_set_size_hint(void* self, void* sizeHint);
QFont* q_standarditem_font(void* self);
void q_standarditem_set_font(void* self, void* font);
int64_t q_standarditem_text_alignment(void* self);
void q_standarditem_set_text_alignment(void* self, int64_t textAlignment);
QBrush* q_standarditem_background(void* self);
void q_standarditem_set_background(void* self, void* brush);
QBrush* q_standarditem_foreground(void* self);
void q_standarditem_set_foreground(void* self, void* brush);
int64_t q_standarditem_check_state(void* self);
void q_standarditem_set_check_state(void* self, int64_t checkState);
const char* q_standarditem_accessible_text(void* self);
void q_standarditem_set_accessible_text(void* self, const char* accessibleText);
const char* q_standarditem_accessible_description(void* self);
void q_standarditem_set_accessible_description(void* self, const char* accessibleDescription);
int64_t q_standarditem_flags(void* self);
void q_standarditem_set_flags(void* self, int64_t flags);
bool q_standarditem_is_enabled(void* self);
void q_standarditem_set_enabled(void* self, bool enabled);
bool q_standarditem_is_editable(void* self);
void q_standarditem_set_editable(void* self, bool editable);
bool q_standarditem_is_selectable(void* self);
void q_standarditem_set_selectable(void* self, bool selectable);
bool q_standarditem_is_checkable(void* self);
void q_standarditem_set_checkable(void* self, bool checkable);
bool q_standarditem_is_auto_tristate(void* self);
void q_standarditem_set_auto_tristate(void* self, bool tristate);
bool q_standarditem_is_user_tristate(void* self);
void q_standarditem_set_user_tristate(void* self, bool tristate);
bool q_standarditem_is_drag_enabled(void* self);
void q_standarditem_set_drag_enabled(void* self, bool dragEnabled);
bool q_standarditem_is_drop_enabled(void* self);
void q_standarditem_set_drop_enabled(void* self, bool dropEnabled);
QStandardItem* q_standarditem_parent(void* self);
int32_t q_standarditem_row(void* self);
int32_t q_standarditem_column(void* self);
QModelIndex* q_standarditem_index(void* self);
QStandardItemModel* q_standarditem_model(void* self);
int32_t q_standarditem_row_count(void* self);
void q_standarditem_set_row_count(void* self, int rows);
int32_t q_standarditem_column_count(void* self);
void q_standarditem_set_column_count(void* self, int columns);
bool q_standarditem_has_children(void* self);
QStandardItem* q_standarditem_child(void* self, int row);
void q_standarditem_set_child(void* self, int row, int column, void* item);
void q_standarditem_set_child2(void* self, int row, void* item);
void q_standarditem_insert_row(void* self, int row, void* items[]);
void q_standarditem_insert_column(void* self, int column, void* items[]);
void q_standarditem_insert_rows(void* self, int row, void* items[]);
void q_standarditem_insert_rows2(void* self, int row, int count);
void q_standarditem_insert_columns(void* self, int column, int count);
void q_standarditem_remove_row(void* self, int row);
void q_standarditem_remove_column(void* self, int column);
void q_standarditem_remove_rows(void* self, int row, int count);
void q_standarditem_remove_columns(void* self, int column, int count);
void q_standarditem_append_row(void* self, void* items[]);
void q_standarditem_append_rows(void* self, void* items[]);
void q_standarditem_append_column(void* self, void* items[]);
void q_standarditem_insert_row2(void* self, int row, void* item);
void q_standarditem_append_row_with_item(void* self, void* item);
QStandardItem* q_standarditem_take_child(void* self, int row);
libqt_list /* of QStandardItem* */ q_standarditem_take_row(void* self, int row);
libqt_list /* of QStandardItem* */ q_standarditem_take_column(void* self, int column);
void q_standarditem_sort_children(void* self, int column);
QStandardItem* q_standarditem_clone(void* self);
void q_standarditem_on_clone(void* self, QStandardItem* (*slot)());
QStandardItem* q_standarditem_qbase_clone(void* self);
int32_t q_standarditem_type(void* self);
void q_standarditem_on_type(void* self, int32_t (*slot)());
int32_t q_standarditem_qbase_type(void* self);
void q_standarditem_read(void* self, void* in);
void q_standarditem_on_read(void* self, void (*slot)(void*, void*));
void q_standarditem_qbase_read(void* self, void* in);
void q_standarditem_write(void* self, void* out);
void q_standarditem_on_write(void* self, void (*slot)(void*, void*));
void q_standarditem_qbase_write(void* self, void* out);
bool q_standarditem_operator_lesser(void* self, void* other);
void q_standarditem_on_operator_lesser(void* self, bool (*slot)(void*, void*));
bool q_standarditem_qbase_operator_lesser(void* self, void* other);
void q_standarditem_operator_assign(void* self, void* other);
void q_standarditem_on_operator_assign(void* self, void (*slot)(void*, void*));
void q_standarditem_qbase_operator_assign(void* self, void* other);
void q_standarditem_emit_data_changed(void* self);
void q_standarditem_on_emit_data_changed(void* self, void (*slot)());
void q_standarditem_qbase_emit_data_changed(void* self);
QStandardItem* q_standarditem_child2(void* self, int row, int column);
QStandardItem* q_standarditem_take_child2(void* self, int row, int column);
void q_standarditem_sort_children2(void* self, int column, int64_t order);
void q_standarditem_delete(void* self);

QStandardItemModel* q_standarditemmodel_new();
QStandardItemModel* q_standarditemmodel_new2(int rows, int columns);
QStandardItemModel* q_standarditemmodel_new3(void* parent);
QStandardItemModel* q_standarditemmodel_new4(int rows, int columns, void* parent);
QMetaObject* q_standarditemmodel_meta_object(void* self);
void* q_standarditemmodel_metacast(void* self, const char* param1);
int32_t q_standarditemmodel_metacall(void* self, int64_t param1, int param2, void* param3);
void q_standarditemmodel_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_standarditemmodel_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_standarditemmodel_tr(const char* s);
void q_standarditemmodel_set_item_role_names(void* self, libqt_map /* of int to char* */ roleNames);
libqt_map /* of int to char* */ q_standarditemmodel_role_names(void* self);
void q_standarditemmodel_on_role_names(void* self, libqt_map /* of int to char* */ (*slot)());
libqt_map /* of int to char* */ q_standarditemmodel_qbase_role_names(void* self);
QModelIndex* q_standarditemmodel_index(void* self, int row, int column, void* parent);
void q_standarditemmodel_on_index(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_standarditemmodel_qbase_index(void* self, int row, int column, void* parent);
QModelIndex* q_standarditemmodel_parent(void* self, void* child);
void q_standarditemmodel_on_parent(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_standarditemmodel_qbase_parent(void* self, void* child);
int32_t q_standarditemmodel_row_count(void* self, void* parent);
void q_standarditemmodel_on_row_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_standarditemmodel_qbase_row_count(void* self, void* parent);
int32_t q_standarditemmodel_column_count(void* self, void* parent);
void q_standarditemmodel_on_column_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_standarditemmodel_qbase_column_count(void* self, void* parent);
bool q_standarditemmodel_has_children(void* self, void* parent);
void q_standarditemmodel_on_has_children(void* self, bool (*slot)(void*, void*));
bool q_standarditemmodel_qbase_has_children(void* self, void* parent);
QVariant* q_standarditemmodel_data(void* self, void* index, int role);
void q_standarditemmodel_on_data(void* self, QVariant* (*slot)(void*, void*, int));
QVariant* q_standarditemmodel_qbase_data(void* self, void* index, int role);
void q_standarditemmodel_multi_data(void* self, void* index, void* roleDataSpan);
void q_standarditemmodel_on_multi_data(void* self, void (*slot)(void*, void*, void*));
void q_standarditemmodel_qbase_multi_data(void* self, void* index, void* roleDataSpan);
bool q_standarditemmodel_set_data(void* self, void* index, void* value, int role);
void q_standarditemmodel_on_set_data(void* self, bool (*slot)(void*, void*, void*, int));
bool q_standarditemmodel_qbase_set_data(void* self, void* index, void* value, int role);
bool q_standarditemmodel_clear_item_data(void* self, void* index);
void q_standarditemmodel_on_clear_item_data(void* self, bool (*slot)(void*, void*));
bool q_standarditemmodel_qbase_clear_item_data(void* self, void* index);
QVariant* q_standarditemmodel_header_data(void* self, int section, int64_t orientation, int role);
void q_standarditemmodel_on_header_data(void* self, QVariant* (*slot)(void*, int, int64_t, int));
QVariant* q_standarditemmodel_qbase_header_data(void* self, int section, int64_t orientation, int role);
bool q_standarditemmodel_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
void q_standarditemmodel_on_set_header_data(void* self, bool (*slot)(void*, int, int64_t, void*, int));
bool q_standarditemmodel_qbase_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
bool q_standarditemmodel_insert_rows(void* self, int row, int count, void* parent);
void q_standarditemmodel_on_insert_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_standarditemmodel_qbase_insert_rows(void* self, int row, int count, void* parent);
bool q_standarditemmodel_insert_columns(void* self, int column, int count, void* parent);
void q_standarditemmodel_on_insert_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_standarditemmodel_qbase_insert_columns(void* self, int column, int count, void* parent);
bool q_standarditemmodel_remove_rows(void* self, int row, int count, void* parent);
void q_standarditemmodel_on_remove_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_standarditemmodel_qbase_remove_rows(void* self, int row, int count, void* parent);
bool q_standarditemmodel_remove_columns(void* self, int column, int count, void* parent);
void q_standarditemmodel_on_remove_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_standarditemmodel_qbase_remove_columns(void* self, int column, int count, void* parent);
int64_t q_standarditemmodel_flags(void* self, void* index);
void q_standarditemmodel_on_flags(void* self, int64_t (*slot)(void*, void*));
int64_t q_standarditemmodel_qbase_flags(void* self, void* index);
int64_t q_standarditemmodel_supported_drop_actions(void* self);
void q_standarditemmodel_on_supported_drop_actions(void* self, int64_t (*slot)());
int64_t q_standarditemmodel_qbase_supported_drop_actions(void* self);
libqt_map /* of int to QVariant* */ q_standarditemmodel_item_data(void* self, void* index);
void q_standarditemmodel_on_item_data(void* self, libqt_map /* of int to QVariant* */ (*slot)(void*, void*));
libqt_map /* of int to QVariant* */ q_standarditemmodel_qbase_item_data(void* self, void* index);
bool q_standarditemmodel_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
void q_standarditemmodel_on_set_item_data(void* self, bool (*slot)(void*, void*, libqt_map /* of int to QVariant* */));
bool q_standarditemmodel_qbase_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
void q_standarditemmodel_clear(void* self);
void q_standarditemmodel_sort(void* self, int column, int64_t order);
void q_standarditemmodel_on_sort(void* self, void (*slot)(void*, int, int64_t));
void q_standarditemmodel_qbase_sort(void* self, int column, int64_t order);
QStandardItem* q_standarditemmodel_item_from_index(void* self, void* index);
QModelIndex* q_standarditemmodel_index_from_item(void* self, void* item);
QStandardItem* q_standarditemmodel_item(void* self, int row);
void q_standarditemmodel_set_item(void* self, int row, int column, void* item);
void q_standarditemmodel_set_item2(void* self, int row, void* item);
QStandardItem* q_standarditemmodel_invisible_root_item(void* self);
QStandardItem* q_standarditemmodel_horizontal_header_item(void* self, int column);
void q_standarditemmodel_set_horizontal_header_item(void* self, int column, void* item);
QStandardItem* q_standarditemmodel_vertical_header_item(void* self, int row);
void q_standarditemmodel_set_vertical_header_item(void* self, int row, void* item);
void q_standarditemmodel_set_horizontal_header_labels(void* self, const char* labels[]);
void q_standarditemmodel_set_vertical_header_labels(void* self, const char* labels[]);
void q_standarditemmodel_set_row_count(void* self, int rows);
void q_standarditemmodel_set_column_count(void* self, int columns);
void q_standarditemmodel_append_row(void* self, void* items[]);
void q_standarditemmodel_append_column(void* self, void* items[]);
void q_standarditemmodel_append_row_with_item(void* self, void* item);
void q_standarditemmodel_insert_row(void* self, int row, void* items[]);
void q_standarditemmodel_insert_column(void* self, int column, void* items[]);
void q_standarditemmodel_insert_row2(void* self, int row, void* item);
bool q_standarditemmodel_insert_row_with_row(void* self, int row);
bool q_standarditemmodel_insert_column_with_column(void* self, int column);
QStandardItem* q_standarditemmodel_take_item(void* self, int row);
libqt_list /* of QStandardItem* */ q_standarditemmodel_take_row(void* self, int row);
libqt_list /* of QStandardItem* */ q_standarditemmodel_take_column(void* self, int column);
QStandardItem* q_standarditemmodel_take_horizontal_header_item(void* self, int column);
QStandardItem* q_standarditemmodel_take_vertical_header_item(void* self, int row);
QStandardItem* q_standarditemmodel_item_prototype(void* self);
void q_standarditemmodel_set_item_prototype(void* self, void* item);
libqt_list /* of QStandardItem* */ q_standarditemmodel_find_items(void* self, const char* text);
int32_t q_standarditemmodel_sort_role(void* self);
void q_standarditemmodel_set_sort_role(void* self, int role);
const char** q_standarditemmodel_mime_types(void* self);
void q_standarditemmodel_on_mime_types(void* self, const char** (*slot)());
const char** q_standarditemmodel_qbase_mime_types(void* self);
QMimeData* q_standarditemmodel_mime_data(void* self, void* indexes[]);
void q_standarditemmodel_on_mime_data(void* self, QMimeData* (*slot)(void*, void*));
QMimeData* q_standarditemmodel_qbase_mime_data(void* self, void* indexes[]);
bool q_standarditemmodel_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_standarditemmodel_on_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
bool q_standarditemmodel_qbase_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_standarditemmodel_item_changed(void* self, void* item);
void q_standarditemmodel_on_item_changed(void* self, void (*slot)(void*, void*));
const char* q_standarditemmodel_tr2(const char* s, const char* c);
const char* q_standarditemmodel_tr3(const char* s, const char* c, int n);
QStandardItem* q_standarditemmodel_item2(void* self, int row, int column);
bool q_standarditemmodel_insert_row22(void* self, int row, void* parent);
bool q_standarditemmodel_insert_column2(void* self, int column, void* parent);
QStandardItem* q_standarditemmodel_take_item2(void* self, int row, int column);
libqt_list /* of QStandardItem* */ q_standarditemmodel_find_items2(void* self, const char* text, int64_t flags);
libqt_list /* of QStandardItem* */ q_standarditemmodel_find_items3(void* self, const char* text, int64_t flags, int column);
bool q_standarditemmodel_has_index(void* self, int row, int column);
bool q_standarditemmodel_remove_row(void* self, int row);
bool q_standarditemmodel_remove_column(void* self, int column);
bool q_standarditemmodel_move_row(void* self, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
bool q_standarditemmodel_move_column(void* self, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
bool q_standarditemmodel_check_index(void* self, void* index);
void q_standarditemmodel_data_changed(void* self, void* topLeft, void* bottomRight);
void q_standarditemmodel_on_data_changed(void* self, void (*slot)(void*, void*, void*));
void q_standarditemmodel_header_data_changed(void* self, int64_t orientation, int first, int last);
void q_standarditemmodel_on_header_data_changed(void* self, void (*slot)(void*, int64_t, int, int));
void q_standarditemmodel_layout_changed(void* self);
void q_standarditemmodel_on_layout_changed(void* self, void (*slot)(void*));
void q_standarditemmodel_layout_about_to_be_changed(void* self);
void q_standarditemmodel_on_layout_about_to_be_changed(void* self, void (*slot)(void*));
bool q_standarditemmodel_has_index3(void* self, int row, int column, void* parent);
bool q_standarditemmodel_remove_row2(void* self, int row, void* parent);
bool q_standarditemmodel_remove_column2(void* self, int column, void* parent);
bool q_standarditemmodel_check_index2(void* self, void* index, int64_t options);
void q_standarditemmodel_data_changed3(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_standarditemmodel_on_data_changed3(void* self, void (*slot)(void*, void*, void*, int*));
void q_standarditemmodel_layout_changed1(void* self, void* parents[]);
void q_standarditemmodel_on_layout_changed1(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_layout_changed2(void* self, void* parents[], int64_t hint);
void q_standarditemmodel_on_layout_changed2(void* self, void (*slot)(void*, void*, int64_t));
void q_standarditemmodel_layout_about_to_be_changed1(void* self, void* parents[]);
void q_standarditemmodel_on_layout_about_to_be_changed1(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_layout_about_to_be_changed2(void* self, void* parents[], int64_t hint);
void q_standarditemmodel_on_layout_about_to_be_changed2(void* self, void (*slot)(void*, void*, int64_t));
const char* q_standarditemmodel_object_name(void* self);
void q_standarditemmodel_set_object_name(void* self, const char* name);
bool q_standarditemmodel_is_widget_type(void* self);
bool q_standarditemmodel_is_window_type(void* self);
bool q_standarditemmodel_is_quick_item_type(void* self);
bool q_standarditemmodel_signals_blocked(void* self);
bool q_standarditemmodel_block_signals(void* self, bool b);
QThread* q_standarditemmodel_thread(void* self);
void q_standarditemmodel_move_to_thread(void* self, void* thread);
int32_t q_standarditemmodel_start_timer(void* self, int interval);
void q_standarditemmodel_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_standarditemmodel_children(void* self);
void q_standarditemmodel_set_parent(void* self, void* parent);
void q_standarditemmodel_install_event_filter(void* self, void* filterObj);
void q_standarditemmodel_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_standarditemmodel_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_standarditemmodel_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_standarditemmodel_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_standarditemmodel_disconnect_with_q_meta_object_connection(void* param1);
void q_standarditemmodel_dump_object_tree(void* self);
void q_standarditemmodel_dump_object_info(void* self);
bool q_standarditemmodel_set_property(void* self, const char* name, void* value);
QVariant* q_standarditemmodel_property(void* self, const char* name);
const char** q_standarditemmodel_dynamic_property_names(void* self);
QBindingStorage* q_standarditemmodel_binding_storage(void* self);
QBindingStorage* q_standarditemmodel_binding_storage2(void* self);
void q_standarditemmodel_destroyed(void* self);
void q_standarditemmodel_on_destroyed(void* self, void (*slot)(void*));
bool q_standarditemmodel_inherits(void* self, const char* classname);
void q_standarditemmodel_delete_later(void* self);
int32_t q_standarditemmodel_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_standarditemmodel_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_standarditemmodel_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_standarditemmodel_destroyed1(void* self, void* param1);
void q_standarditemmodel_on_destroyed1(void* self, void (*slot)(void*, void*));
QModelIndex* q_standarditemmodel_sibling(void* self, int row, int column, void* idx);
QModelIndex* q_standarditemmodel_qbase_sibling(void* self, int row, int column, void* idx);
void q_standarditemmodel_on_sibling(void* self, QModelIndex* (*slot)(void*, int, int, void*));
bool q_standarditemmodel_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
bool q_standarditemmodel_qbase_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_standarditemmodel_on_can_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
int64_t q_standarditemmodel_supported_drag_actions(void* self);
int64_t q_standarditemmodel_qbase_supported_drag_actions(void* self);
void q_standarditemmodel_on_supported_drag_actions(void* self, int64_t (*slot)());
bool q_standarditemmodel_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
bool q_standarditemmodel_qbase_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void q_standarditemmodel_on_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_standarditemmodel_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
bool q_standarditemmodel_qbase_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
void q_standarditemmodel_on_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_standarditemmodel_fetch_more(void* self, void* parent);
void q_standarditemmodel_qbase_fetch_more(void* self, void* parent);
void q_standarditemmodel_on_fetch_more(void* self, void (*slot)(void*, void*));
bool q_standarditemmodel_can_fetch_more(void* self, void* parent);
bool q_standarditemmodel_qbase_can_fetch_more(void* self, void* parent);
void q_standarditemmodel_on_can_fetch_more(void* self, bool (*slot)(void*, void*));
QModelIndex* q_standarditemmodel_buddy(void* self, void* index);
QModelIndex* q_standarditemmodel_qbase_buddy(void* self, void* index);
void q_standarditemmodel_on_buddy(void* self, QModelIndex* (*slot)(void*, void*));
libqt_list /* of QModelIndex* */ q_standarditemmodel_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
libqt_list /* of QModelIndex* */ q_standarditemmodel_qbase_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
void q_standarditemmodel_on_match(void* self, libqt_list /* of QModelIndex* */ (*slot)(void*, void*, int, void*, int, int64_t));
QSize* q_standarditemmodel_span(void* self, void* index);
QSize* q_standarditemmodel_qbase_span(void* self, void* index);
void q_standarditemmodel_on_span(void* self, QSize* (*slot)(void*, void*));
bool q_standarditemmodel_submit(void* self);
bool q_standarditemmodel_qbase_submit(void* self);
void q_standarditemmodel_on_submit(void* self, bool (*slot)());
void q_standarditemmodel_revert(void* self);
void q_standarditemmodel_qbase_revert(void* self);
void q_standarditemmodel_on_revert(void* self, void (*slot)());
void q_standarditemmodel_reset_internal_data(void* self);
void q_standarditemmodel_qbase_reset_internal_data(void* self);
void q_standarditemmodel_on_reset_internal_data(void* self, void (*slot)());
bool q_standarditemmodel_event(void* self, void* event);
bool q_standarditemmodel_qbase_event(void* self, void* event);
void q_standarditemmodel_on_event(void* self, bool (*slot)(void*, void*));
bool q_standarditemmodel_event_filter(void* self, void* watched, void* event);
bool q_standarditemmodel_qbase_event_filter(void* self, void* watched, void* event);
void q_standarditemmodel_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_standarditemmodel_timer_event(void* self, void* event);
void q_standarditemmodel_qbase_timer_event(void* self, void* event);
void q_standarditemmodel_on_timer_event(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_child_event(void* self, void* event);
void q_standarditemmodel_qbase_child_event(void* self, void* event);
void q_standarditemmodel_on_child_event(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_custom_event(void* self, void* event);
void q_standarditemmodel_qbase_custom_event(void* self, void* event);
void q_standarditemmodel_on_custom_event(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_connect_notify(void* self, void* signal);
void q_standarditemmodel_qbase_connect_notify(void* self, void* signal);
void q_standarditemmodel_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_standarditemmodel_disconnect_notify(void* self, void* signal);
void q_standarditemmodel_qbase_disconnect_notify(void* self, void* signal);
void q_standarditemmodel_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QModelIndex* q_standarditemmodel_create_index(void* self, int row, int column);
QModelIndex* q_standarditemmodel_qbase_create_index(void* self, int row, int column);
void q_standarditemmodel_on_create_index(void* self, QModelIndex* (*slot)(void*, int, int));
void q_standarditemmodel_encode_data(void* self, void* indexes[], void* stream);
void q_standarditemmodel_qbase_encode_data(void* self, void* indexes[], void* stream);
void q_standarditemmodel_on_encode_data(void* self, void (*slot)(void*, void*, void*));
bool q_standarditemmodel_decode_data(void* self, int row, int column, void* parent, void* stream);
bool q_standarditemmodel_qbase_decode_data(void* self, int row, int column, void* parent, void* stream);
void q_standarditemmodel_on_decode_data(void* self, bool (*slot)(void*, int, int, void*, void*));
void q_standarditemmodel_begin_insert_rows(void* self, void* parent, int first, int last);
void q_standarditemmodel_qbase_begin_insert_rows(void* self, void* parent, int first, int last);
void q_standarditemmodel_on_begin_insert_rows(void* self, void (*slot)(void*, void*, int, int));
void q_standarditemmodel_end_insert_rows(void* self);
void q_standarditemmodel_qbase_end_insert_rows(void* self);
void q_standarditemmodel_on_end_insert_rows(void* self, void (*slot)());
void q_standarditemmodel_begin_remove_rows(void* self, void* parent, int first, int last);
void q_standarditemmodel_qbase_begin_remove_rows(void* self, void* parent, int first, int last);
void q_standarditemmodel_on_begin_remove_rows(void* self, void (*slot)(void*, void*, int, int));
void q_standarditemmodel_end_remove_rows(void* self);
void q_standarditemmodel_qbase_end_remove_rows(void* self);
void q_standarditemmodel_on_end_remove_rows(void* self, void (*slot)());
bool q_standarditemmodel_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
bool q_standarditemmodel_qbase_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
void q_standarditemmodel_on_begin_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_standarditemmodel_end_move_rows(void* self);
void q_standarditemmodel_qbase_end_move_rows(void* self);
void q_standarditemmodel_on_end_move_rows(void* self, void (*slot)());
void q_standarditemmodel_begin_insert_columns(void* self, void* parent, int first, int last);
void q_standarditemmodel_qbase_begin_insert_columns(void* self, void* parent, int first, int last);
void q_standarditemmodel_on_begin_insert_columns(void* self, void (*slot)(void*, void*, int, int));
void q_standarditemmodel_end_insert_columns(void* self);
void q_standarditemmodel_qbase_end_insert_columns(void* self);
void q_standarditemmodel_on_end_insert_columns(void* self, void (*slot)());
void q_standarditemmodel_begin_remove_columns(void* self, void* parent, int first, int last);
void q_standarditemmodel_qbase_begin_remove_columns(void* self, void* parent, int first, int last);
void q_standarditemmodel_on_begin_remove_columns(void* self, void (*slot)(void*, void*, int, int));
void q_standarditemmodel_end_remove_columns(void* self);
void q_standarditemmodel_qbase_end_remove_columns(void* self);
void q_standarditemmodel_on_end_remove_columns(void* self, void (*slot)());
bool q_standarditemmodel_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
bool q_standarditemmodel_qbase_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
void q_standarditemmodel_on_begin_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_standarditemmodel_end_move_columns(void* self);
void q_standarditemmodel_qbase_end_move_columns(void* self);
void q_standarditemmodel_on_end_move_columns(void* self, void (*slot)());
void q_standarditemmodel_begin_reset_model(void* self);
void q_standarditemmodel_qbase_begin_reset_model(void* self);
void q_standarditemmodel_on_begin_reset_model(void* self, void (*slot)());
void q_standarditemmodel_end_reset_model(void* self);
void q_standarditemmodel_qbase_end_reset_model(void* self);
void q_standarditemmodel_on_end_reset_model(void* self, void (*slot)());
void q_standarditemmodel_change_persistent_index(void* self, void* from, void* to);
void q_standarditemmodel_qbase_change_persistent_index(void* self, void* from, void* to);
void q_standarditemmodel_on_change_persistent_index(void* self, void (*slot)(void*, void*, void*));
void q_standarditemmodel_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_standarditemmodel_qbase_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_standarditemmodel_on_change_persistent_index_list(void* self, void (*slot)(void*, void*, void*));
libqt_list /* of QModelIndex* */ q_standarditemmodel_persistent_index_list(void* self);
libqt_list /* of QModelIndex* */ q_standarditemmodel_qbase_persistent_index_list(void* self);
void q_standarditemmodel_on_persistent_index_list(void* self, libqt_list /* of QModelIndex* */ (*slot)());
QObject* q_standarditemmodel_sender(void* self);
QObject* q_standarditemmodel_qbase_sender(void* self);
void q_standarditemmodel_on_sender(void* self, QObject* (*slot)());
int32_t q_standarditemmodel_sender_signal_index(void* self);
int32_t q_standarditemmodel_qbase_sender_signal_index(void* self);
void q_standarditemmodel_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_standarditemmodel_receivers(void* self, const char* signal);
int32_t q_standarditemmodel_qbase_receivers(void* self, const char* signal);
void q_standarditemmodel_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_standarditemmodel_is_signal_connected(void* self, void* signal);
bool q_standarditemmodel_qbase_is_signal_connected(void* self, void* signal);
void q_standarditemmodel_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_standarditemmodel_delete(void* self);

/// https://doc.qt.io/qt-6/qstandarditemmodel.html#types

typedef enum {
    QSTANDARDITEM_ITEMTYPE_TYPE = 0,
    QSTANDARDITEM_ITEMTYPE_USERTYPE = 1000
} QStandardItem__ItemType;

#endif
