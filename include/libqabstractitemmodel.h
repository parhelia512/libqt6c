#pragma once
#ifndef SRCQT6C_LIBQABSTRACTITEMMODEL_H
#define SRCQT6C_LIBQABSTRACTITEMMODEL_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqanystringview.h"
#include "libqbindingstorage.h"
#include "libqevent.h"
#include "libqdatastream.h"
#include "libqmetaobject.h"
#include "libqmimedata.h"
#include "libqobject.h"
#include "libqsize.h"
#include <string.h>
#include "libqthread.h"
#include "libqvariant.h"

QModelRoleData* q_modelroledata_new(int role);
QModelRoleData* q_modelroledata_new2(void* param1);
int32_t q_modelroledata_role(void* self);
QVariant* q_modelroledata_data(void* self);
QVariant* q_modelroledata_data2(void* self);
void q_modelroledata_clear_data(void* self);
void q_modelroledata_operator_assign(void* self, void* param1);
void q_modelroledata_delete(void* self);

QModelRoleDataSpan* q_modelroledataspan_new(void* other);
QModelRoleDataSpan* q_modelroledataspan_new2(void* other);
QModelRoleDataSpan* q_modelroledataspan_new3();
QModelRoleDataSpan* q_modelroledataspan_new4(void* modelRoleData);
QModelRoleDataSpan* q_modelroledataspan_new5(void* modelRoleData, int64_t lenVal);
QModelRoleDataSpan* q_modelroledataspan_new6(void* param1);
void q_modelroledataspan_copy_assign(void* self, void* other);
void q_modelroledataspan_move_assign(void* self, void* other);
int64_t q_modelroledataspan_size(void* self);
int64_t q_modelroledataspan_length(void* self);
QModelRoleData* q_modelroledataspan_data(void* self);
QModelRoleData* q_modelroledataspan_begin(void* self);
QModelRoleData* q_modelroledataspan_end(void* self);
QModelRoleData* q_modelroledataspan_operator_subscript(void* self, int64_t index);
QVariant* q_modelroledataspan_data_for_role(void* self, int role);
void q_modelroledataspan_delete(void* self);

QModelIndex* q_modelindex_new(void* other);
QModelIndex* q_modelindex_new2(void* other);
QModelIndex* q_modelindex_new3();
QModelIndex* q_modelindex_new4(void* param1);
void q_modelindex_copy_assign(void* self, void* other);
void q_modelindex_move_assign(void* self, void* other);
int32_t q_modelindex_row(void* self);
int32_t q_modelindex_column(void* self);
uintptr_t q_modelindex_internal_id(void* self);
void* q_modelindex_internal_pointer(void* self);
void* q_modelindex_const_internal_pointer(void* self);
QModelIndex* q_modelindex_parent(void* self);
QModelIndex* q_modelindex_sibling(void* self, int row, int column);
QModelIndex* q_modelindex_sibling_at_column(void* self, int column);
QModelIndex* q_modelindex_sibling_at_row(void* self, int row);
QVariant* q_modelindex_data(void* self);
void q_modelindex_multi_data(void* self, void* roleDataSpan);
int64_t q_modelindex_flags(void* self);
QAbstractItemModel* q_modelindex_model(void* self);
bool q_modelindex_is_valid(void* self);
bool q_modelindex_operator_equal(void* self, void* other);
bool q_modelindex_operator_not_equal(void* self, void* other);
bool q_modelindex_operator_lesser(void* self, void* other);
QVariant* q_modelindex_data1(void* self, int role);
void q_modelindex_delete(void* self);

QPersistentModelIndex* q_persistentmodelindex_new();
QPersistentModelIndex* q_persistentmodelindex_new2(void* index);
QPersistentModelIndex* q_persistentmodelindex_new3(void* other);
bool q_persistentmodelindex_operator_lesser(void* self, void* other);
bool q_persistentmodelindex_operator_equal(void* self, void* other);
bool q_persistentmodelindex_operator_not_equal(void* self, void* other);
void q_persistentmodelindex_operator_assign(void* self, void* other);
void q_persistentmodelindex_swap(void* self, void* other);
bool q_persistentmodelindex_operator_equal_with_other(void* self, void* other);
bool q_persistentmodelindex_operator_not_equal_with_other(void* self, void* other);
void q_persistentmodelindex_operator_assign_with_other(void* self, void* other);
QModelIndex* q_persistentmodelindex_to_q_model_index(void* self);
int32_t q_persistentmodelindex_row(void* self);
int32_t q_persistentmodelindex_column(void* self);
void* q_persistentmodelindex_internal_pointer(void* self);
void* q_persistentmodelindex_const_internal_pointer(void* self);
uintptr_t q_persistentmodelindex_internal_id(void* self);
QModelIndex* q_persistentmodelindex_parent(void* self);
QModelIndex* q_persistentmodelindex_sibling(void* self, int row, int column);
QVariant* q_persistentmodelindex_data(void* self);
void q_persistentmodelindex_multi_data(void* self, void* roleDataSpan);
int64_t q_persistentmodelindex_flags(void* self);
QAbstractItemModel* q_persistentmodelindex_model(void* self);
bool q_persistentmodelindex_is_valid(void* self);
QVariant* q_persistentmodelindex_data1(void* self, int role);
void q_persistentmodelindex_delete(void* self);

QAbstractItemModel* q_abstractitemmodel_new();
QAbstractItemModel* q_abstractitemmodel_new2(void* parent);
QMetaObject* q_abstractitemmodel_meta_object(void* self);
void* q_abstractitemmodel_metacast(void* self, const char* param1);
int32_t q_abstractitemmodel_metacall(void* self, int64_t param1, int param2, void* param3);
void q_abstractitemmodel_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_abstractitemmodel_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_abstractitemmodel_tr(const char* s);
bool q_abstractitemmodel_has_index(void* self, int row, int column);
QModelIndex* q_abstractitemmodel_index(void* self, int row, int column, void* parent);
void q_abstractitemmodel_on_index(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstractitemmodel_qbase_index(void* self, int row, int column, void* parent);
QModelIndex* q_abstractitemmodel_parent(void* self, void* child);
void q_abstractitemmodel_on_parent(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_abstractitemmodel_qbase_parent(void* self, void* child);
QModelIndex* q_abstractitemmodel_sibling(void* self, int row, int column, void* idx);
void q_abstractitemmodel_on_sibling(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstractitemmodel_qbase_sibling(void* self, int row, int column, void* idx);
int32_t q_abstractitemmodel_row_count(void* self, void* parent);
void q_abstractitemmodel_on_row_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_abstractitemmodel_qbase_row_count(void* self, void* parent);
int32_t q_abstractitemmodel_column_count(void* self, void* parent);
void q_abstractitemmodel_on_column_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_abstractitemmodel_qbase_column_count(void* self, void* parent);
bool q_abstractitemmodel_has_children(void* self, void* parent);
void q_abstractitemmodel_on_has_children(void* self, bool (*slot)(void*, void*));
bool q_abstractitemmodel_qbase_has_children(void* self, void* parent);
QVariant* q_abstractitemmodel_data(void* self, void* index, int role);
void q_abstractitemmodel_on_data(void* self, QVariant* (*slot)(void*, void*, int));
QVariant* q_abstractitemmodel_qbase_data(void* self, void* index, int role);
bool q_abstractitemmodel_set_data(void* self, void* index, void* value, int role);
void q_abstractitemmodel_on_set_data(void* self, bool (*slot)(void*, void*, void*, int));
bool q_abstractitemmodel_qbase_set_data(void* self, void* index, void* value, int role);
QVariant* q_abstractitemmodel_header_data(void* self, int section, int64_t orientation, int role);
void q_abstractitemmodel_on_header_data(void* self, QVariant* (*slot)(void*, int, int64_t, int));
QVariant* q_abstractitemmodel_qbase_header_data(void* self, int section, int64_t orientation, int role);
bool q_abstractitemmodel_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
void q_abstractitemmodel_on_set_header_data(void* self, bool (*slot)(void*, int, int64_t, void*, int));
bool q_abstractitemmodel_qbase_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
libqt_map /* of int to QVariant* */ q_abstractitemmodel_item_data(void* self, void* index);
void q_abstractitemmodel_on_item_data(void* self, libqt_map /* of int to QVariant* */ (*slot)(void*, void*));
libqt_map /* of int to QVariant* */ q_abstractitemmodel_qbase_item_data(void* self, void* index);
bool q_abstractitemmodel_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
void q_abstractitemmodel_on_set_item_data(void* self, bool (*slot)(void*, void*, libqt_map /* of int to QVariant* */));
bool q_abstractitemmodel_qbase_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
bool q_abstractitemmodel_clear_item_data(void* self, void* index);
void q_abstractitemmodel_on_clear_item_data(void* self, bool (*slot)(void*, void*));
bool q_abstractitemmodel_qbase_clear_item_data(void* self, void* index);
const char** q_abstractitemmodel_mime_types(void* self);
void q_abstractitemmodel_on_mime_types(void* self, const char** (*slot)());
const char** q_abstractitemmodel_qbase_mime_types(void* self);
QMimeData* q_abstractitemmodel_mime_data(void* self, void* indexes[]);
void q_abstractitemmodel_on_mime_data(void* self, QMimeData* (*slot)(void*, void*));
QMimeData* q_abstractitemmodel_qbase_mime_data(void* self, void* indexes[]);
bool q_abstractitemmodel_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstractitemmodel_on_can_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
bool q_abstractitemmodel_qbase_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
bool q_abstractitemmodel_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstractitemmodel_on_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
bool q_abstractitemmodel_qbase_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
int64_t q_abstractitemmodel_supported_drop_actions(void* self);
void q_abstractitemmodel_on_supported_drop_actions(void* self, int64_t (*slot)());
int64_t q_abstractitemmodel_qbase_supported_drop_actions(void* self);
int64_t q_abstractitemmodel_supported_drag_actions(void* self);
void q_abstractitemmodel_on_supported_drag_actions(void* self, int64_t (*slot)());
int64_t q_abstractitemmodel_qbase_supported_drag_actions(void* self);
bool q_abstractitemmodel_insert_rows(void* self, int row, int count, void* parent);
void q_abstractitemmodel_on_insert_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractitemmodel_qbase_insert_rows(void* self, int row, int count, void* parent);
bool q_abstractitemmodel_insert_columns(void* self, int column, int count, void* parent);
void q_abstractitemmodel_on_insert_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractitemmodel_qbase_insert_columns(void* self, int column, int count, void* parent);
bool q_abstractitemmodel_remove_rows(void* self, int row, int count, void* parent);
void q_abstractitemmodel_on_remove_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractitemmodel_qbase_remove_rows(void* self, int row, int count, void* parent);
bool q_abstractitemmodel_remove_columns(void* self, int column, int count, void* parent);
void q_abstractitemmodel_on_remove_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractitemmodel_qbase_remove_columns(void* self, int column, int count, void* parent);
bool q_abstractitemmodel_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void q_abstractitemmodel_on_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstractitemmodel_qbase_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
bool q_abstractitemmodel_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
void q_abstractitemmodel_on_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstractitemmodel_qbase_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
bool q_abstractitemmodel_insert_row(void* self, int row);
bool q_abstractitemmodel_insert_column(void* self, int column);
bool q_abstractitemmodel_remove_row(void* self, int row);
bool q_abstractitemmodel_remove_column(void* self, int column);
bool q_abstractitemmodel_move_row(void* self, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
bool q_abstractitemmodel_move_column(void* self, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
void q_abstractitemmodel_fetch_more(void* self, void* parent);
void q_abstractitemmodel_on_fetch_more(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_qbase_fetch_more(void* self, void* parent);
bool q_abstractitemmodel_can_fetch_more(void* self, void* parent);
void q_abstractitemmodel_on_can_fetch_more(void* self, bool (*slot)(void*, void*));
bool q_abstractitemmodel_qbase_can_fetch_more(void* self, void* parent);
int64_t q_abstractitemmodel_flags(void* self, void* index);
void q_abstractitemmodel_on_flags(void* self, int64_t (*slot)(void*, void*));
int64_t q_abstractitemmodel_qbase_flags(void* self, void* index);
void q_abstractitemmodel_sort(void* self, int column, int64_t order);
void q_abstractitemmodel_on_sort(void* self, void (*slot)(void*, int, int64_t));
void q_abstractitemmodel_qbase_sort(void* self, int column, int64_t order);
QModelIndex* q_abstractitemmodel_buddy(void* self, void* index);
void q_abstractitemmodel_on_buddy(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_abstractitemmodel_qbase_buddy(void* self, void* index);
libqt_list /* of QModelIndex* */ q_abstractitemmodel_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
void q_abstractitemmodel_on_match(void* self, libqt_list /* of QModelIndex* */ (*slot)(void*, void*, int, void*, int, int64_t));
libqt_list /* of QModelIndex* */ q_abstractitemmodel_qbase_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
QSize* q_abstractitemmodel_span(void* self, void* index);
void q_abstractitemmodel_on_span(void* self, QSize* (*slot)(void*, void*));
QSize* q_abstractitemmodel_qbase_span(void* self, void* index);
libqt_map /* of int to char* */ q_abstractitemmodel_role_names(void* self);
void q_abstractitemmodel_on_role_names(void* self, libqt_map /* of int to char* */ (*slot)());
libqt_map /* of int to char* */ q_abstractitemmodel_qbase_role_names(void* self);
bool q_abstractitemmodel_check_index(void* self, void* index);
void q_abstractitemmodel_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstractitemmodel_on_multi_data(void* self, void (*slot)(void*, void*, void*));
void q_abstractitemmodel_qbase_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstractitemmodel_data_changed(void* self, void* topLeft, void* bottomRight);
void q_abstractitemmodel_on_data_changed(void* self, void (*slot)(void*, void*, void*));
void q_abstractitemmodel_header_data_changed(void* self, int64_t orientation, int first, int last);
void q_abstractitemmodel_on_header_data_changed(void* self, void (*slot)(void*, int64_t, int, int));
void q_abstractitemmodel_layout_changed(void* self);
void q_abstractitemmodel_on_layout_changed(void* self, void (*slot)(void*));
void q_abstractitemmodel_layout_about_to_be_changed(void* self);
void q_abstractitemmodel_on_layout_about_to_be_changed(void* self, void (*slot)(void*));
bool q_abstractitemmodel_submit(void* self);
void q_abstractitemmodel_on_submit(void* self, bool (*slot)());
bool q_abstractitemmodel_qbase_submit(void* self);
void q_abstractitemmodel_revert(void* self);
void q_abstractitemmodel_on_revert(void* self, void (*slot)());
void q_abstractitemmodel_qbase_revert(void* self);
void q_abstractitemmodel_reset_internal_data(void* self);
void q_abstractitemmodel_on_reset_internal_data(void* self, void (*slot)());
void q_abstractitemmodel_qbase_reset_internal_data(void* self);
QModelIndex* q_abstractitemmodel_create_index(void* self, int row, int column);
void q_abstractitemmodel_on_create_index(void* self, QModelIndex* (*slot)(void*, int, int));
QModelIndex* q_abstractitemmodel_qbase_create_index(void* self, int row, int column);
QModelIndex* q_abstractitemmodel_create_index2(void* self, int row, int column, uintptr_t id);
void q_abstractitemmodel_on_create_index2(void* self, QModelIndex* (*slot)(void*, int, int, uintptr_t));
QModelIndex* q_abstractitemmodel_qbase_create_index2(void* self, int row, int column, uintptr_t id);
void q_abstractitemmodel_encode_data(void* self, void* indexes[], void* stream);
void q_abstractitemmodel_on_encode_data(void* self, void (*slot)(void*, void*, void*));
void q_abstractitemmodel_qbase_encode_data(void* self, void* indexes[], void* stream);
bool q_abstractitemmodel_decode_data(void* self, int row, int column, void* parent, void* stream);
void q_abstractitemmodel_on_decode_data(void* self, bool (*slot)(void*, int, int, void*, void*));
bool q_abstractitemmodel_qbase_decode_data(void* self, int row, int column, void* parent, void* stream);
void q_abstractitemmodel_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstractitemmodel_on_begin_insert_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstractitemmodel_qbase_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstractitemmodel_end_insert_rows(void* self);
void q_abstractitemmodel_on_end_insert_rows(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_insert_rows(void* self);
void q_abstractitemmodel_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstractitemmodel_on_begin_remove_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstractitemmodel_qbase_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstractitemmodel_end_remove_rows(void* self);
void q_abstractitemmodel_on_end_remove_rows(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_remove_rows(void* self);
bool q_abstractitemmodel_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
void q_abstractitemmodel_on_begin_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstractitemmodel_qbase_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
void q_abstractitemmodel_end_move_rows(void* self);
void q_abstractitemmodel_on_end_move_rows(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_move_rows(void* self);
void q_abstractitemmodel_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstractitemmodel_on_begin_insert_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstractitemmodel_qbase_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstractitemmodel_end_insert_columns(void* self);
void q_abstractitemmodel_on_end_insert_columns(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_insert_columns(void* self);
void q_abstractitemmodel_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstractitemmodel_on_begin_remove_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstractitemmodel_qbase_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstractitemmodel_end_remove_columns(void* self);
void q_abstractitemmodel_on_end_remove_columns(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_remove_columns(void* self);
bool q_abstractitemmodel_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
void q_abstractitemmodel_on_begin_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstractitemmodel_qbase_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
void q_abstractitemmodel_end_move_columns(void* self);
void q_abstractitemmodel_on_end_move_columns(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_move_columns(void* self);
void q_abstractitemmodel_begin_reset_model(void* self);
void q_abstractitemmodel_on_begin_reset_model(void* self, void (*slot)());
void q_abstractitemmodel_qbase_begin_reset_model(void* self);
void q_abstractitemmodel_end_reset_model(void* self);
void q_abstractitemmodel_on_end_reset_model(void* self, void (*slot)());
void q_abstractitemmodel_qbase_end_reset_model(void* self);
void q_abstractitemmodel_change_persistent_index(void* self, void* from, void* to);
void q_abstractitemmodel_on_change_persistent_index(void* self, void (*slot)(void*, void*, void*));
void q_abstractitemmodel_qbase_change_persistent_index(void* self, void* from, void* to);
void q_abstractitemmodel_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_abstractitemmodel_on_change_persistent_index_list(void* self, void (*slot)(void*, void*, void*));
void q_abstractitemmodel_qbase_change_persistent_index_list(void* self, void* from[], void* to[]);
libqt_list /* of QModelIndex* */ q_abstractitemmodel_persistent_index_list(void* self);
void q_abstractitemmodel_on_persistent_index_list(void* self, libqt_list /* of QModelIndex* */ (*slot)());
libqt_list /* of QModelIndex* */ q_abstractitemmodel_qbase_persistent_index_list(void* self);
const char* q_abstractitemmodel_tr2(const char* s, const char* c);
const char* q_abstractitemmodel_tr3(const char* s, const char* c, int n);
bool q_abstractitemmodel_has_index3(void* self, int row, int column, void* parent);
bool q_abstractitemmodel_insert_row2(void* self, int row, void* parent);
bool q_abstractitemmodel_insert_column2(void* self, int column, void* parent);
bool q_abstractitemmodel_remove_row2(void* self, int row, void* parent);
bool q_abstractitemmodel_remove_column2(void* self, int column, void* parent);
bool q_abstractitemmodel_check_index2(void* self, void* index, int64_t options);
void q_abstractitemmodel_data_changed3(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_abstractitemmodel_on_data_changed3(void* self, void (*slot)(void*, void*, void*, int*));
void q_abstractitemmodel_layout_changed1(void* self, void* parents[]);
void q_abstractitemmodel_on_layout_changed1(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_layout_changed2(void* self, void* parents[], int64_t hint);
void q_abstractitemmodel_on_layout_changed2(void* self, void (*slot)(void*, void*, int64_t));
void q_abstractitemmodel_layout_about_to_be_changed1(void* self, void* parents[]);
void q_abstractitemmodel_on_layout_about_to_be_changed1(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_layout_about_to_be_changed2(void* self, void* parents[], int64_t hint);
void q_abstractitemmodel_on_layout_about_to_be_changed2(void* self, void (*slot)(void*, void*, int64_t));
QModelIndex* q_abstractitemmodel_create_index3(void* self, int row, int column, void* data);
void q_abstractitemmodel_on_create_index3(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstractitemmodel_qbase_create_index3(void* self, int row, int column, void* data);
const char* q_abstractitemmodel_object_name(void* self);
void q_abstractitemmodel_set_object_name(void* self, const char* name);
bool q_abstractitemmodel_is_widget_type(void* self);
bool q_abstractitemmodel_is_window_type(void* self);
bool q_abstractitemmodel_is_quick_item_type(void* self);
bool q_abstractitemmodel_signals_blocked(void* self);
bool q_abstractitemmodel_block_signals(void* self, bool b);
QThread* q_abstractitemmodel_thread(void* self);
void q_abstractitemmodel_move_to_thread(void* self, void* thread);
int32_t q_abstractitemmodel_start_timer(void* self, int interval);
void q_abstractitemmodel_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_abstractitemmodel_children(void* self);
void q_abstractitemmodel_set_parent(void* self, void* parent);
void q_abstractitemmodel_install_event_filter(void* self, void* filterObj);
void q_abstractitemmodel_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_abstractitemmodel_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_abstractitemmodel_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_abstractitemmodel_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_abstractitemmodel_disconnect_with_q_meta_object_connection(void* param1);
void q_abstractitemmodel_dump_object_tree(void* self);
void q_abstractitemmodel_dump_object_info(void* self);
bool q_abstractitemmodel_set_property(void* self, const char* name, void* value);
QVariant* q_abstractitemmodel_property(void* self, const char* name);
const char** q_abstractitemmodel_dynamic_property_names(void* self);
QBindingStorage* q_abstractitemmodel_binding_storage(void* self);
QBindingStorage* q_abstractitemmodel_binding_storage2(void* self);
void q_abstractitemmodel_destroyed(void* self);
void q_abstractitemmodel_on_destroyed(void* self, void (*slot)(void*));
bool q_abstractitemmodel_inherits(void* self, const char* classname);
void q_abstractitemmodel_delete_later(void* self);
int32_t q_abstractitemmodel_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_abstractitemmodel_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_abstractitemmodel_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_abstractitemmodel_destroyed1(void* self, void* param1);
void q_abstractitemmodel_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_abstractitemmodel_event(void* self, void* event);
bool q_abstractitemmodel_qbase_event(void* self, void* event);
void q_abstractitemmodel_on_event(void* self, bool (*slot)(void*, void*));
bool q_abstractitemmodel_event_filter(void* self, void* watched, void* event);
bool q_abstractitemmodel_qbase_event_filter(void* self, void* watched, void* event);
void q_abstractitemmodel_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_abstractitemmodel_timer_event(void* self, void* event);
void q_abstractitemmodel_qbase_timer_event(void* self, void* event);
void q_abstractitemmodel_on_timer_event(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_child_event(void* self, void* event);
void q_abstractitemmodel_qbase_child_event(void* self, void* event);
void q_abstractitemmodel_on_child_event(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_custom_event(void* self, void* event);
void q_abstractitemmodel_qbase_custom_event(void* self, void* event);
void q_abstractitemmodel_on_custom_event(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_connect_notify(void* self, void* signal);
void q_abstractitemmodel_qbase_connect_notify(void* self, void* signal);
void q_abstractitemmodel_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_abstractitemmodel_disconnect_notify(void* self, void* signal);
void q_abstractitemmodel_qbase_disconnect_notify(void* self, void* signal);
void q_abstractitemmodel_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QObject* q_abstractitemmodel_sender(void* self);
QObject* q_abstractitemmodel_qbase_sender(void* self);
void q_abstractitemmodel_on_sender(void* self, QObject* (*slot)());
int32_t q_abstractitemmodel_sender_signal_index(void* self);
int32_t q_abstractitemmodel_qbase_sender_signal_index(void* self);
void q_abstractitemmodel_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_abstractitemmodel_receivers(void* self, const char* signal);
int32_t q_abstractitemmodel_qbase_receivers(void* self, const char* signal);
void q_abstractitemmodel_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_abstractitemmodel_is_signal_connected(void* self, void* signal);
bool q_abstractitemmodel_qbase_is_signal_connected(void* self, void* signal);
void q_abstractitemmodel_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_abstractitemmodel_delete(void* self);

QAbstractTableModel* q_abstracttablemodel_new();
QAbstractTableModel* q_abstracttablemodel_new2(void* parent);
QMetaObject* q_abstracttablemodel_meta_object(void* self);
void* q_abstracttablemodel_metacast(void* self, const char* param1);
int32_t q_abstracttablemodel_metacall(void* self, int64_t param1, int param2, void* param3);
void q_abstracttablemodel_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_abstracttablemodel_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_abstracttablemodel_tr(const char* s);
QModelIndex* q_abstracttablemodel_index(void* self, int row, int column, void* parent);
void q_abstracttablemodel_on_index(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstracttablemodel_qbase_index(void* self, int row, int column, void* parent);
QModelIndex* q_abstracttablemodel_sibling(void* self, int row, int column, void* idx);
void q_abstracttablemodel_on_sibling(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstracttablemodel_qbase_sibling(void* self, int row, int column, void* idx);
bool q_abstracttablemodel_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstracttablemodel_on_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
bool q_abstracttablemodel_qbase_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
int64_t q_abstracttablemodel_flags(void* self, void* index);
void q_abstracttablemodel_on_flags(void* self, int64_t (*slot)(void*, void*));
int64_t q_abstracttablemodel_qbase_flags(void* self, void* index);
const char* q_abstracttablemodel_tr2(const char* s, const char* c);
const char* q_abstracttablemodel_tr3(const char* s, const char* c, int n);
bool q_abstracttablemodel_has_index(void* self, int row, int column);
QModelIndex* q_abstracttablemodel_parent(void* self, void* child);
void q_abstracttablemodel_on_parent(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_abstracttablemodel_qbase_parent(void* self, void* child);
bool q_abstracttablemodel_has_children(void* self, void* parent);
void q_abstracttablemodel_on_has_children(void* self, bool (*slot)(void*, void*));
bool q_abstracttablemodel_qbase_has_children(void* self, void* parent);
bool q_abstracttablemodel_insert_row(void* self, int row);
bool q_abstracttablemodel_insert_column(void* self, int column);
bool q_abstracttablemodel_remove_row(void* self, int row);
bool q_abstracttablemodel_remove_column(void* self, int column);
bool q_abstracttablemodel_move_row(void* self, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
bool q_abstracttablemodel_move_column(void* self, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
bool q_abstracttablemodel_check_index(void* self, void* index);
void q_abstracttablemodel_data_changed(void* self, void* topLeft, void* bottomRight);
void q_abstracttablemodel_on_data_changed(void* self, void (*slot)(void*, void*, void*));
void q_abstracttablemodel_header_data_changed(void* self, int64_t orientation, int first, int last);
void q_abstracttablemodel_on_header_data_changed(void* self, void (*slot)(void*, int64_t, int, int));
void q_abstracttablemodel_layout_changed(void* self);
void q_abstracttablemodel_on_layout_changed(void* self, void (*slot)(void*));
void q_abstracttablemodel_layout_about_to_be_changed(void* self);
void q_abstracttablemodel_on_layout_about_to_be_changed(void* self, void (*slot)(void*));
bool q_abstracttablemodel_has_index3(void* self, int row, int column, void* parent);
bool q_abstracttablemodel_insert_row2(void* self, int row, void* parent);
bool q_abstracttablemodel_insert_column2(void* self, int column, void* parent);
bool q_abstracttablemodel_remove_row2(void* self, int row, void* parent);
bool q_abstracttablemodel_remove_column2(void* self, int column, void* parent);
bool q_abstracttablemodel_check_index2(void* self, void* index, int64_t options);
void q_abstracttablemodel_data_changed3(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_abstracttablemodel_on_data_changed3(void* self, void (*slot)(void*, void*, void*, int*));
void q_abstracttablemodel_layout_changed1(void* self, void* parents[]);
void q_abstracttablemodel_on_layout_changed1(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_layout_changed2(void* self, void* parents[], int64_t hint);
void q_abstracttablemodel_on_layout_changed2(void* self, void (*slot)(void*, void*, int64_t));
void q_abstracttablemodel_layout_about_to_be_changed1(void* self, void* parents[]);
void q_abstracttablemodel_on_layout_about_to_be_changed1(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_layout_about_to_be_changed2(void* self, void* parents[], int64_t hint);
void q_abstracttablemodel_on_layout_about_to_be_changed2(void* self, void (*slot)(void*, void*, int64_t));
const char* q_abstracttablemodel_object_name(void* self);
void q_abstracttablemodel_set_object_name(void* self, const char* name);
bool q_abstracttablemodel_is_widget_type(void* self);
bool q_abstracttablemodel_is_window_type(void* self);
bool q_abstracttablemodel_is_quick_item_type(void* self);
bool q_abstracttablemodel_signals_blocked(void* self);
bool q_abstracttablemodel_block_signals(void* self, bool b);
QThread* q_abstracttablemodel_thread(void* self);
void q_abstracttablemodel_move_to_thread(void* self, void* thread);
int32_t q_abstracttablemodel_start_timer(void* self, int interval);
void q_abstracttablemodel_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_abstracttablemodel_children(void* self);
void q_abstracttablemodel_set_parent(void* self, void* parent);
void q_abstracttablemodel_install_event_filter(void* self, void* filterObj);
void q_abstracttablemodel_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_abstracttablemodel_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_abstracttablemodel_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_abstracttablemodel_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_abstracttablemodel_disconnect_with_q_meta_object_connection(void* param1);
void q_abstracttablemodel_dump_object_tree(void* self);
void q_abstracttablemodel_dump_object_info(void* self);
bool q_abstracttablemodel_set_property(void* self, const char* name, void* value);
QVariant* q_abstracttablemodel_property(void* self, const char* name);
const char** q_abstracttablemodel_dynamic_property_names(void* self);
QBindingStorage* q_abstracttablemodel_binding_storage(void* self);
QBindingStorage* q_abstracttablemodel_binding_storage2(void* self);
void q_abstracttablemodel_destroyed(void* self);
void q_abstracttablemodel_on_destroyed(void* self, void (*slot)(void*));
bool q_abstracttablemodel_inherits(void* self, const char* classname);
void q_abstracttablemodel_delete_later(void* self);
int32_t q_abstracttablemodel_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_abstracttablemodel_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_abstracttablemodel_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_abstracttablemodel_destroyed1(void* self, void* param1);
void q_abstracttablemodel_on_destroyed1(void* self, void (*slot)(void*, void*));
int32_t q_abstracttablemodel_row_count(void* self, void* parent);
int32_t q_abstracttablemodel_qbase_row_count(void* self, void* parent);
void q_abstracttablemodel_on_row_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_abstracttablemodel_column_count(void* self, void* parent);
int32_t q_abstracttablemodel_qbase_column_count(void* self, void* parent);
void q_abstracttablemodel_on_column_count(void* self, int32_t (*slot)(void*, void*));
QVariant* q_abstracttablemodel_data(void* self, void* index, int role);
QVariant* q_abstracttablemodel_qbase_data(void* self, void* index, int role);
void q_abstracttablemodel_on_data(void* self, QVariant* (*slot)(void*, void*, int));
bool q_abstracttablemodel_set_data(void* self, void* index, void* value, int role);
bool q_abstracttablemodel_qbase_set_data(void* self, void* index, void* value, int role);
void q_abstracttablemodel_on_set_data(void* self, bool (*slot)(void*, void*, void*, int));
QVariant* q_abstracttablemodel_header_data(void* self, int section, int64_t orientation, int role);
QVariant* q_abstracttablemodel_qbase_header_data(void* self, int section, int64_t orientation, int role);
void q_abstracttablemodel_on_header_data(void* self, QVariant* (*slot)(void*, int, int64_t, int));
bool q_abstracttablemodel_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
bool q_abstracttablemodel_qbase_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
void q_abstracttablemodel_on_set_header_data(void* self, bool (*slot)(void*, int, int64_t, void*, int));
libqt_map /* of int to QVariant* */ q_abstracttablemodel_item_data(void* self, void* index);
libqt_map /* of int to QVariant* */ q_abstracttablemodel_qbase_item_data(void* self, void* index);
void q_abstracttablemodel_on_item_data(void* self, libqt_map /* of int to QVariant* */ (*slot)(void*, void*));
bool q_abstracttablemodel_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
bool q_abstracttablemodel_qbase_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
void q_abstracttablemodel_on_set_item_data(void* self, bool (*slot)(void*, void*, libqt_map /* of int to QVariant* */));
bool q_abstracttablemodel_clear_item_data(void* self, void* index);
bool q_abstracttablemodel_qbase_clear_item_data(void* self, void* index);
void q_abstracttablemodel_on_clear_item_data(void* self, bool (*slot)(void*, void*));
const char** q_abstracttablemodel_mime_types(void* self);
const char** q_abstracttablemodel_qbase_mime_types(void* self);
void q_abstracttablemodel_on_mime_types(void* self, const char** (*slot)());
QMimeData* q_abstracttablemodel_mime_data(void* self, void* indexes[]);
QMimeData* q_abstracttablemodel_qbase_mime_data(void* self, void* indexes[]);
void q_abstracttablemodel_on_mime_data(void* self, QMimeData* (*slot)(void*, void*));
bool q_abstracttablemodel_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
bool q_abstracttablemodel_qbase_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstracttablemodel_on_can_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
int64_t q_abstracttablemodel_supported_drop_actions(void* self);
int64_t q_abstracttablemodel_qbase_supported_drop_actions(void* self);
void q_abstracttablemodel_on_supported_drop_actions(void* self, int64_t (*slot)());
int64_t q_abstracttablemodel_supported_drag_actions(void* self);
int64_t q_abstracttablemodel_qbase_supported_drag_actions(void* self);
void q_abstracttablemodel_on_supported_drag_actions(void* self, int64_t (*slot)());
bool q_abstracttablemodel_insert_rows(void* self, int row, int count, void* parent);
bool q_abstracttablemodel_qbase_insert_rows(void* self, int row, int count, void* parent);
void q_abstracttablemodel_on_insert_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstracttablemodel_insert_columns(void* self, int column, int count, void* parent);
bool q_abstracttablemodel_qbase_insert_columns(void* self, int column, int count, void* parent);
void q_abstracttablemodel_on_insert_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstracttablemodel_remove_rows(void* self, int row, int count, void* parent);
bool q_abstracttablemodel_qbase_remove_rows(void* self, int row, int count, void* parent);
void q_abstracttablemodel_on_remove_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstracttablemodel_remove_columns(void* self, int column, int count, void* parent);
bool q_abstracttablemodel_qbase_remove_columns(void* self, int column, int count, void* parent);
void q_abstracttablemodel_on_remove_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstracttablemodel_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
bool q_abstracttablemodel_qbase_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void q_abstracttablemodel_on_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstracttablemodel_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
bool q_abstracttablemodel_qbase_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
void q_abstracttablemodel_on_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstracttablemodel_fetch_more(void* self, void* parent);
void q_abstracttablemodel_qbase_fetch_more(void* self, void* parent);
void q_abstracttablemodel_on_fetch_more(void* self, void (*slot)(void*, void*));
bool q_abstracttablemodel_can_fetch_more(void* self, void* parent);
bool q_abstracttablemodel_qbase_can_fetch_more(void* self, void* parent);
void q_abstracttablemodel_on_can_fetch_more(void* self, bool (*slot)(void*, void*));
void q_abstracttablemodel_sort(void* self, int column, int64_t order);
void q_abstracttablemodel_qbase_sort(void* self, int column, int64_t order);
void q_abstracttablemodel_on_sort(void* self, void (*slot)(void*, int, int64_t));
QModelIndex* q_abstracttablemodel_buddy(void* self, void* index);
QModelIndex* q_abstracttablemodel_qbase_buddy(void* self, void* index);
void q_abstracttablemodel_on_buddy(void* self, QModelIndex* (*slot)(void*, void*));
libqt_list /* of QModelIndex* */ q_abstracttablemodel_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
libqt_list /* of QModelIndex* */ q_abstracttablemodel_qbase_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
void q_abstracttablemodel_on_match(void* self, libqt_list /* of QModelIndex* */ (*slot)(void*, void*, int, void*, int, int64_t));
QSize* q_abstracttablemodel_span(void* self, void* index);
QSize* q_abstracttablemodel_qbase_span(void* self, void* index);
void q_abstracttablemodel_on_span(void* self, QSize* (*slot)(void*, void*));
libqt_map /* of int to char* */ q_abstracttablemodel_role_names(void* self);
libqt_map /* of int to char* */ q_abstracttablemodel_qbase_role_names(void* self);
void q_abstracttablemodel_on_role_names(void* self, libqt_map /* of int to char* */ (*slot)());
void q_abstracttablemodel_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstracttablemodel_qbase_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstracttablemodel_on_multi_data(void* self, void (*slot)(void*, void*, void*));
bool q_abstracttablemodel_submit(void* self);
bool q_abstracttablemodel_qbase_submit(void* self);
void q_abstracttablemodel_on_submit(void* self, bool (*slot)());
void q_abstracttablemodel_revert(void* self);
void q_abstracttablemodel_qbase_revert(void* self);
void q_abstracttablemodel_on_revert(void* self, void (*slot)());
void q_abstracttablemodel_reset_internal_data(void* self);
void q_abstracttablemodel_qbase_reset_internal_data(void* self);
void q_abstracttablemodel_on_reset_internal_data(void* self, void (*slot)());
bool q_abstracttablemodel_event(void* self, void* event);
bool q_abstracttablemodel_qbase_event(void* self, void* event);
void q_abstracttablemodel_on_event(void* self, bool (*slot)(void*, void*));
bool q_abstracttablemodel_event_filter(void* self, void* watched, void* event);
bool q_abstracttablemodel_qbase_event_filter(void* self, void* watched, void* event);
void q_abstracttablemodel_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_abstracttablemodel_timer_event(void* self, void* event);
void q_abstracttablemodel_qbase_timer_event(void* self, void* event);
void q_abstracttablemodel_on_timer_event(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_child_event(void* self, void* event);
void q_abstracttablemodel_qbase_child_event(void* self, void* event);
void q_abstracttablemodel_on_child_event(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_custom_event(void* self, void* event);
void q_abstracttablemodel_qbase_custom_event(void* self, void* event);
void q_abstracttablemodel_on_custom_event(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_connect_notify(void* self, void* signal);
void q_abstracttablemodel_qbase_connect_notify(void* self, void* signal);
void q_abstracttablemodel_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_abstracttablemodel_disconnect_notify(void* self, void* signal);
void q_abstracttablemodel_qbase_disconnect_notify(void* self, void* signal);
void q_abstracttablemodel_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QModelIndex* q_abstracttablemodel_create_index(void* self, int row, int column);
QModelIndex* q_abstracttablemodel_qbase_create_index(void* self, int row, int column);
void q_abstracttablemodel_on_create_index(void* self, QModelIndex* (*slot)(void*, int, int));
void q_abstracttablemodel_encode_data(void* self, void* indexes[], void* stream);
void q_abstracttablemodel_qbase_encode_data(void* self, void* indexes[], void* stream);
void q_abstracttablemodel_on_encode_data(void* self, void (*slot)(void*, void*, void*));
bool q_abstracttablemodel_decode_data(void* self, int row, int column, void* parent, void* stream);
bool q_abstracttablemodel_qbase_decode_data(void* self, int row, int column, void* parent, void* stream);
void q_abstracttablemodel_on_decode_data(void* self, bool (*slot)(void*, int, int, void*, void*));
void q_abstracttablemodel_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstracttablemodel_qbase_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstracttablemodel_on_begin_insert_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstracttablemodel_end_insert_rows(void* self);
void q_abstracttablemodel_qbase_end_insert_rows(void* self);
void q_abstracttablemodel_on_end_insert_rows(void* self, void (*slot)());
void q_abstracttablemodel_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstracttablemodel_qbase_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstracttablemodel_on_begin_remove_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstracttablemodel_end_remove_rows(void* self);
void q_abstracttablemodel_qbase_end_remove_rows(void* self);
void q_abstracttablemodel_on_end_remove_rows(void* self, void (*slot)());
bool q_abstracttablemodel_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
bool q_abstracttablemodel_qbase_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
void q_abstracttablemodel_on_begin_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstracttablemodel_end_move_rows(void* self);
void q_abstracttablemodel_qbase_end_move_rows(void* self);
void q_abstracttablemodel_on_end_move_rows(void* self, void (*slot)());
void q_abstracttablemodel_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstracttablemodel_qbase_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstracttablemodel_on_begin_insert_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstracttablemodel_end_insert_columns(void* self);
void q_abstracttablemodel_qbase_end_insert_columns(void* self);
void q_abstracttablemodel_on_end_insert_columns(void* self, void (*slot)());
void q_abstracttablemodel_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstracttablemodel_qbase_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstracttablemodel_on_begin_remove_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstracttablemodel_end_remove_columns(void* self);
void q_abstracttablemodel_qbase_end_remove_columns(void* self);
void q_abstracttablemodel_on_end_remove_columns(void* self, void (*slot)());
bool q_abstracttablemodel_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
bool q_abstracttablemodel_qbase_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
void q_abstracttablemodel_on_begin_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstracttablemodel_end_move_columns(void* self);
void q_abstracttablemodel_qbase_end_move_columns(void* self);
void q_abstracttablemodel_on_end_move_columns(void* self, void (*slot)());
void q_abstracttablemodel_begin_reset_model(void* self);
void q_abstracttablemodel_qbase_begin_reset_model(void* self);
void q_abstracttablemodel_on_begin_reset_model(void* self, void (*slot)());
void q_abstracttablemodel_end_reset_model(void* self);
void q_abstracttablemodel_qbase_end_reset_model(void* self);
void q_abstracttablemodel_on_end_reset_model(void* self, void (*slot)());
void q_abstracttablemodel_change_persistent_index(void* self, void* from, void* to);
void q_abstracttablemodel_qbase_change_persistent_index(void* self, void* from, void* to);
void q_abstracttablemodel_on_change_persistent_index(void* self, void (*slot)(void*, void*, void*));
void q_abstracttablemodel_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_abstracttablemodel_qbase_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_abstracttablemodel_on_change_persistent_index_list(void* self, void (*slot)(void*, void*, void*));
libqt_list /* of QModelIndex* */ q_abstracttablemodel_persistent_index_list(void* self);
libqt_list /* of QModelIndex* */ q_abstracttablemodel_qbase_persistent_index_list(void* self);
void q_abstracttablemodel_on_persistent_index_list(void* self, libqt_list /* of QModelIndex* */ (*slot)());
QObject* q_abstracttablemodel_sender(void* self);
QObject* q_abstracttablemodel_qbase_sender(void* self);
void q_abstracttablemodel_on_sender(void* self, QObject* (*slot)());
int32_t q_abstracttablemodel_sender_signal_index(void* self);
int32_t q_abstracttablemodel_qbase_sender_signal_index(void* self);
void q_abstracttablemodel_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_abstracttablemodel_receivers(void* self, const char* signal);
int32_t q_abstracttablemodel_qbase_receivers(void* self, const char* signal);
void q_abstracttablemodel_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_abstracttablemodel_is_signal_connected(void* self, void* signal);
bool q_abstracttablemodel_qbase_is_signal_connected(void* self, void* signal);
void q_abstracttablemodel_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_abstracttablemodel_delete(void* self);

QAbstractListModel* q_abstractlistmodel_new();
QAbstractListModel* q_abstractlistmodel_new2(void* parent);
QMetaObject* q_abstractlistmodel_meta_object(void* self);
void* q_abstractlistmodel_metacast(void* self, const char* param1);
int32_t q_abstractlistmodel_metacall(void* self, int64_t param1, int param2, void* param3);
void q_abstractlistmodel_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_abstractlistmodel_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_abstractlistmodel_tr(const char* s);
QModelIndex* q_abstractlistmodel_index(void* self, int row, int column, void* parent);
void q_abstractlistmodel_on_index(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstractlistmodel_qbase_index(void* self, int row, int column, void* parent);
QModelIndex* q_abstractlistmodel_sibling(void* self, int row, int column, void* idx);
void q_abstractlistmodel_on_sibling(void* self, QModelIndex* (*slot)(void*, int, int, void*));
QModelIndex* q_abstractlistmodel_qbase_sibling(void* self, int row, int column, void* idx);
bool q_abstractlistmodel_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstractlistmodel_on_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
bool q_abstractlistmodel_qbase_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
int64_t q_abstractlistmodel_flags(void* self, void* index);
void q_abstractlistmodel_on_flags(void* self, int64_t (*slot)(void*, void*));
int64_t q_abstractlistmodel_qbase_flags(void* self, void* index);
const char* q_abstractlistmodel_tr2(const char* s, const char* c);
const char* q_abstractlistmodel_tr3(const char* s, const char* c, int n);
bool q_abstractlistmodel_has_index(void* self, int row, int column);
QModelIndex* q_abstractlistmodel_parent(void* self, void* child);
void q_abstractlistmodel_on_parent(void* self, QModelIndex* (*slot)(void*, void*));
QModelIndex* q_abstractlistmodel_qbase_parent(void* self, void* child);
int32_t q_abstractlistmodel_column_count(void* self, void* parent);
void q_abstractlistmodel_on_column_count(void* self, int32_t (*slot)(void*, void*));
int32_t q_abstractlistmodel_qbase_column_count(void* self, void* parent);
bool q_abstractlistmodel_has_children(void* self, void* parent);
void q_abstractlistmodel_on_has_children(void* self, bool (*slot)(void*, void*));
bool q_abstractlistmodel_qbase_has_children(void* self, void* parent);
bool q_abstractlistmodel_insert_row(void* self, int row);
bool q_abstractlistmodel_insert_column(void* self, int column);
bool q_abstractlistmodel_remove_row(void* self, int row);
bool q_abstractlistmodel_remove_column(void* self, int column);
bool q_abstractlistmodel_move_row(void* self, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
bool q_abstractlistmodel_move_column(void* self, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
bool q_abstractlistmodel_check_index(void* self, void* index);
void q_abstractlistmodel_data_changed(void* self, void* topLeft, void* bottomRight);
void q_abstractlistmodel_on_data_changed(void* self, void (*slot)(void*, void*, void*));
void q_abstractlistmodel_header_data_changed(void* self, int64_t orientation, int first, int last);
void q_abstractlistmodel_on_header_data_changed(void* self, void (*slot)(void*, int64_t, int, int));
void q_abstractlistmodel_layout_changed(void* self);
void q_abstractlistmodel_on_layout_changed(void* self, void (*slot)(void*));
void q_abstractlistmodel_layout_about_to_be_changed(void* self);
void q_abstractlistmodel_on_layout_about_to_be_changed(void* self, void (*slot)(void*));
bool q_abstractlistmodel_has_index3(void* self, int row, int column, void* parent);
bool q_abstractlistmodel_insert_row2(void* self, int row, void* parent);
bool q_abstractlistmodel_insert_column2(void* self, int column, void* parent);
bool q_abstractlistmodel_remove_row2(void* self, int row, void* parent);
bool q_abstractlistmodel_remove_column2(void* self, int column, void* parent);
bool q_abstractlistmodel_check_index2(void* self, void* index, int64_t options);
void q_abstractlistmodel_data_changed3(void* self, void* topLeft, void* bottomRight, int* roles[]);
void q_abstractlistmodel_on_data_changed3(void* self, void (*slot)(void*, void*, void*, int*));
void q_abstractlistmodel_layout_changed1(void* self, void* parents[]);
void q_abstractlistmodel_on_layout_changed1(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_layout_changed2(void* self, void* parents[], int64_t hint);
void q_abstractlistmodel_on_layout_changed2(void* self, void (*slot)(void*, void*, int64_t));
void q_abstractlistmodel_layout_about_to_be_changed1(void* self, void* parents[]);
void q_abstractlistmodel_on_layout_about_to_be_changed1(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_layout_about_to_be_changed2(void* self, void* parents[], int64_t hint);
void q_abstractlistmodel_on_layout_about_to_be_changed2(void* self, void (*slot)(void*, void*, int64_t));
const char* q_abstractlistmodel_object_name(void* self);
void q_abstractlistmodel_set_object_name(void* self, const char* name);
bool q_abstractlistmodel_is_widget_type(void* self);
bool q_abstractlistmodel_is_window_type(void* self);
bool q_abstractlistmodel_is_quick_item_type(void* self);
bool q_abstractlistmodel_signals_blocked(void* self);
bool q_abstractlistmodel_block_signals(void* self, bool b);
QThread* q_abstractlistmodel_thread(void* self);
void q_abstractlistmodel_move_to_thread(void* self, void* thread);
int32_t q_abstractlistmodel_start_timer(void* self, int interval);
void q_abstractlistmodel_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_abstractlistmodel_children(void* self);
void q_abstractlistmodel_set_parent(void* self, void* parent);
void q_abstractlistmodel_install_event_filter(void* self, void* filterObj);
void q_abstractlistmodel_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_abstractlistmodel_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_abstractlistmodel_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_abstractlistmodel_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_abstractlistmodel_disconnect_with_q_meta_object_connection(void* param1);
void q_abstractlistmodel_dump_object_tree(void* self);
void q_abstractlistmodel_dump_object_info(void* self);
bool q_abstractlistmodel_set_property(void* self, const char* name, void* value);
QVariant* q_abstractlistmodel_property(void* self, const char* name);
const char** q_abstractlistmodel_dynamic_property_names(void* self);
QBindingStorage* q_abstractlistmodel_binding_storage(void* self);
QBindingStorage* q_abstractlistmodel_binding_storage2(void* self);
void q_abstractlistmodel_destroyed(void* self);
void q_abstractlistmodel_on_destroyed(void* self, void (*slot)(void*));
bool q_abstractlistmodel_inherits(void* self, const char* classname);
void q_abstractlistmodel_delete_later(void* self);
int32_t q_abstractlistmodel_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_abstractlistmodel_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_abstractlistmodel_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_abstractlistmodel_destroyed1(void* self, void* param1);
void q_abstractlistmodel_on_destroyed1(void* self, void (*slot)(void*, void*));
int32_t q_abstractlistmodel_row_count(void* self, void* parent);
int32_t q_abstractlistmodel_qbase_row_count(void* self, void* parent);
void q_abstractlistmodel_on_row_count(void* self, int32_t (*slot)(void*, void*));
QVariant* q_abstractlistmodel_data(void* self, void* index, int role);
QVariant* q_abstractlistmodel_qbase_data(void* self, void* index, int role);
void q_abstractlistmodel_on_data(void* self, QVariant* (*slot)(void*, void*, int));
bool q_abstractlistmodel_set_data(void* self, void* index, void* value, int role);
bool q_abstractlistmodel_qbase_set_data(void* self, void* index, void* value, int role);
void q_abstractlistmodel_on_set_data(void* self, bool (*slot)(void*, void*, void*, int));
QVariant* q_abstractlistmodel_header_data(void* self, int section, int64_t orientation, int role);
QVariant* q_abstractlistmodel_qbase_header_data(void* self, int section, int64_t orientation, int role);
void q_abstractlistmodel_on_header_data(void* self, QVariant* (*slot)(void*, int, int64_t, int));
bool q_abstractlistmodel_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
bool q_abstractlistmodel_qbase_set_header_data(void* self, int section, int64_t orientation, void* value, int role);
void q_abstractlistmodel_on_set_header_data(void* self, bool (*slot)(void*, int, int64_t, void*, int));
libqt_map /* of int to QVariant* */ q_abstractlistmodel_item_data(void* self, void* index);
libqt_map /* of int to QVariant* */ q_abstractlistmodel_qbase_item_data(void* self, void* index);
void q_abstractlistmodel_on_item_data(void* self, libqt_map /* of int to QVariant* */ (*slot)(void*, void*));
bool q_abstractlistmodel_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
bool q_abstractlistmodel_qbase_set_item_data(void* self, void* index, libqt_map /* of int to QVariant* */ roles);
void q_abstractlistmodel_on_set_item_data(void* self, bool (*slot)(void*, void*, libqt_map /* of int to QVariant* */));
bool q_abstractlistmodel_clear_item_data(void* self, void* index);
bool q_abstractlistmodel_qbase_clear_item_data(void* self, void* index);
void q_abstractlistmodel_on_clear_item_data(void* self, bool (*slot)(void*, void*));
const char** q_abstractlistmodel_mime_types(void* self);
const char** q_abstractlistmodel_qbase_mime_types(void* self);
void q_abstractlistmodel_on_mime_types(void* self, const char** (*slot)());
QMimeData* q_abstractlistmodel_mime_data(void* self, void* indexes[]);
QMimeData* q_abstractlistmodel_qbase_mime_data(void* self, void* indexes[]);
void q_abstractlistmodel_on_mime_data(void* self, QMimeData* (*slot)(void*, void*));
bool q_abstractlistmodel_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
bool q_abstractlistmodel_qbase_can_drop_mime_data(void* self, void* data, int64_t action, int row, int column, void* parent);
void q_abstractlistmodel_on_can_drop_mime_data(void* self, bool (*slot)(void*, void*, int64_t, int, int, void*));
int64_t q_abstractlistmodel_supported_drop_actions(void* self);
int64_t q_abstractlistmodel_qbase_supported_drop_actions(void* self);
void q_abstractlistmodel_on_supported_drop_actions(void* self, int64_t (*slot)());
int64_t q_abstractlistmodel_supported_drag_actions(void* self);
int64_t q_abstractlistmodel_qbase_supported_drag_actions(void* self);
void q_abstractlistmodel_on_supported_drag_actions(void* self, int64_t (*slot)());
bool q_abstractlistmodel_insert_rows(void* self, int row, int count, void* parent);
bool q_abstractlistmodel_qbase_insert_rows(void* self, int row, int count, void* parent);
void q_abstractlistmodel_on_insert_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractlistmodel_insert_columns(void* self, int column, int count, void* parent);
bool q_abstractlistmodel_qbase_insert_columns(void* self, int column, int count, void* parent);
void q_abstractlistmodel_on_insert_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractlistmodel_remove_rows(void* self, int row, int count, void* parent);
bool q_abstractlistmodel_qbase_remove_rows(void* self, int row, int count, void* parent);
void q_abstractlistmodel_on_remove_rows(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractlistmodel_remove_columns(void* self, int column, int count, void* parent);
bool q_abstractlistmodel_qbase_remove_columns(void* self, int column, int count, void* parent);
void q_abstractlistmodel_on_remove_columns(void* self, bool (*slot)(void*, int, int, void*));
bool q_abstractlistmodel_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
bool q_abstractlistmodel_qbase_move_rows(void* self, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
void q_abstractlistmodel_on_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
bool q_abstractlistmodel_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
bool q_abstractlistmodel_qbase_move_columns(void* self, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
void q_abstractlistmodel_on_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstractlistmodel_fetch_more(void* self, void* parent);
void q_abstractlistmodel_qbase_fetch_more(void* self, void* parent);
void q_abstractlistmodel_on_fetch_more(void* self, void (*slot)(void*, void*));
bool q_abstractlistmodel_can_fetch_more(void* self, void* parent);
bool q_abstractlistmodel_qbase_can_fetch_more(void* self, void* parent);
void q_abstractlistmodel_on_can_fetch_more(void* self, bool (*slot)(void*, void*));
void q_abstractlistmodel_sort(void* self, int column, int64_t order);
void q_abstractlistmodel_qbase_sort(void* self, int column, int64_t order);
void q_abstractlistmodel_on_sort(void* self, void (*slot)(void*, int, int64_t));
QModelIndex* q_abstractlistmodel_buddy(void* self, void* index);
QModelIndex* q_abstractlistmodel_qbase_buddy(void* self, void* index);
void q_abstractlistmodel_on_buddy(void* self, QModelIndex* (*slot)(void*, void*));
libqt_list /* of QModelIndex* */ q_abstractlistmodel_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
libqt_list /* of QModelIndex* */ q_abstractlistmodel_qbase_match(void* self, void* start, int role, void* value, int hits, int64_t flags);
void q_abstractlistmodel_on_match(void* self, libqt_list /* of QModelIndex* */ (*slot)(void*, void*, int, void*, int, int64_t));
QSize* q_abstractlistmodel_span(void* self, void* index);
QSize* q_abstractlistmodel_qbase_span(void* self, void* index);
void q_abstractlistmodel_on_span(void* self, QSize* (*slot)(void*, void*));
libqt_map /* of int to char* */ q_abstractlistmodel_role_names(void* self);
libqt_map /* of int to char* */ q_abstractlistmodel_qbase_role_names(void* self);
void q_abstractlistmodel_on_role_names(void* self, libqt_map /* of int to char* */ (*slot)());
void q_abstractlistmodel_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstractlistmodel_qbase_multi_data(void* self, void* index, void* roleDataSpan);
void q_abstractlistmodel_on_multi_data(void* self, void (*slot)(void*, void*, void*));
bool q_abstractlistmodel_submit(void* self);
bool q_abstractlistmodel_qbase_submit(void* self);
void q_abstractlistmodel_on_submit(void* self, bool (*slot)());
void q_abstractlistmodel_revert(void* self);
void q_abstractlistmodel_qbase_revert(void* self);
void q_abstractlistmodel_on_revert(void* self, void (*slot)());
void q_abstractlistmodel_reset_internal_data(void* self);
void q_abstractlistmodel_qbase_reset_internal_data(void* self);
void q_abstractlistmodel_on_reset_internal_data(void* self, void (*slot)());
bool q_abstractlistmodel_event(void* self, void* event);
bool q_abstractlistmodel_qbase_event(void* self, void* event);
void q_abstractlistmodel_on_event(void* self, bool (*slot)(void*, void*));
bool q_abstractlistmodel_event_filter(void* self, void* watched, void* event);
bool q_abstractlistmodel_qbase_event_filter(void* self, void* watched, void* event);
void q_abstractlistmodel_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_abstractlistmodel_timer_event(void* self, void* event);
void q_abstractlistmodel_qbase_timer_event(void* self, void* event);
void q_abstractlistmodel_on_timer_event(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_child_event(void* self, void* event);
void q_abstractlistmodel_qbase_child_event(void* self, void* event);
void q_abstractlistmodel_on_child_event(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_custom_event(void* self, void* event);
void q_abstractlistmodel_qbase_custom_event(void* self, void* event);
void q_abstractlistmodel_on_custom_event(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_connect_notify(void* self, void* signal);
void q_abstractlistmodel_qbase_connect_notify(void* self, void* signal);
void q_abstractlistmodel_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_abstractlistmodel_disconnect_notify(void* self, void* signal);
void q_abstractlistmodel_qbase_disconnect_notify(void* self, void* signal);
void q_abstractlistmodel_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QModelIndex* q_abstractlistmodel_create_index(void* self, int row, int column);
QModelIndex* q_abstractlistmodel_qbase_create_index(void* self, int row, int column);
void q_abstractlistmodel_on_create_index(void* self, QModelIndex* (*slot)(void*, int, int));
void q_abstractlistmodel_encode_data(void* self, void* indexes[], void* stream);
void q_abstractlistmodel_qbase_encode_data(void* self, void* indexes[], void* stream);
void q_abstractlistmodel_on_encode_data(void* self, void (*slot)(void*, void*, void*));
bool q_abstractlistmodel_decode_data(void* self, int row, int column, void* parent, void* stream);
bool q_abstractlistmodel_qbase_decode_data(void* self, int row, int column, void* parent, void* stream);
void q_abstractlistmodel_on_decode_data(void* self, bool (*slot)(void*, int, int, void*, void*));
void q_abstractlistmodel_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstractlistmodel_qbase_begin_insert_rows(void* self, void* parent, int first, int last);
void q_abstractlistmodel_on_begin_insert_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstractlistmodel_end_insert_rows(void* self);
void q_abstractlistmodel_qbase_end_insert_rows(void* self);
void q_abstractlistmodel_on_end_insert_rows(void* self, void (*slot)());
void q_abstractlistmodel_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstractlistmodel_qbase_begin_remove_rows(void* self, void* parent, int first, int last);
void q_abstractlistmodel_on_begin_remove_rows(void* self, void (*slot)(void*, void*, int, int));
void q_abstractlistmodel_end_remove_rows(void* self);
void q_abstractlistmodel_qbase_end_remove_rows(void* self);
void q_abstractlistmodel_on_end_remove_rows(void* self, void (*slot)());
bool q_abstractlistmodel_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
bool q_abstractlistmodel_qbase_begin_move_rows(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationRow);
void q_abstractlistmodel_on_begin_move_rows(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstractlistmodel_end_move_rows(void* self);
void q_abstractlistmodel_qbase_end_move_rows(void* self);
void q_abstractlistmodel_on_end_move_rows(void* self, void (*slot)());
void q_abstractlistmodel_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstractlistmodel_qbase_begin_insert_columns(void* self, void* parent, int first, int last);
void q_abstractlistmodel_on_begin_insert_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstractlistmodel_end_insert_columns(void* self);
void q_abstractlistmodel_qbase_end_insert_columns(void* self);
void q_abstractlistmodel_on_end_insert_columns(void* self, void (*slot)());
void q_abstractlistmodel_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstractlistmodel_qbase_begin_remove_columns(void* self, void* parent, int first, int last);
void q_abstractlistmodel_on_begin_remove_columns(void* self, void (*slot)(void*, void*, int, int));
void q_abstractlistmodel_end_remove_columns(void* self);
void q_abstractlistmodel_qbase_end_remove_columns(void* self);
void q_abstractlistmodel_on_end_remove_columns(void* self, void (*slot)());
bool q_abstractlistmodel_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
bool q_abstractlistmodel_qbase_begin_move_columns(void* self, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationColumn);
void q_abstractlistmodel_on_begin_move_columns(void* self, bool (*slot)(void*, void*, int, int, void*, int));
void q_abstractlistmodel_end_move_columns(void* self);
void q_abstractlistmodel_qbase_end_move_columns(void* self);
void q_abstractlistmodel_on_end_move_columns(void* self, void (*slot)());
void q_abstractlistmodel_begin_reset_model(void* self);
void q_abstractlistmodel_qbase_begin_reset_model(void* self);
void q_abstractlistmodel_on_begin_reset_model(void* self, void (*slot)());
void q_abstractlistmodel_end_reset_model(void* self);
void q_abstractlistmodel_qbase_end_reset_model(void* self);
void q_abstractlistmodel_on_end_reset_model(void* self, void (*slot)());
void q_abstractlistmodel_change_persistent_index(void* self, void* from, void* to);
void q_abstractlistmodel_qbase_change_persistent_index(void* self, void* from, void* to);
void q_abstractlistmodel_on_change_persistent_index(void* self, void (*slot)(void*, void*, void*));
void q_abstractlistmodel_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_abstractlistmodel_qbase_change_persistent_index_list(void* self, void* from[], void* to[]);
void q_abstractlistmodel_on_change_persistent_index_list(void* self, void (*slot)(void*, void*, void*));
libqt_list /* of QModelIndex* */ q_abstractlistmodel_persistent_index_list(void* self);
libqt_list /* of QModelIndex* */ q_abstractlistmodel_qbase_persistent_index_list(void* self);
void q_abstractlistmodel_on_persistent_index_list(void* self, libqt_list /* of QModelIndex* */ (*slot)());
QObject* q_abstractlistmodel_sender(void* self);
QObject* q_abstractlistmodel_qbase_sender(void* self);
void q_abstractlistmodel_on_sender(void* self, QObject* (*slot)());
int32_t q_abstractlistmodel_sender_signal_index(void* self);
int32_t q_abstractlistmodel_qbase_sender_signal_index(void* self);
void q_abstractlistmodel_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_abstractlistmodel_receivers(void* self, const char* signal);
int32_t q_abstractlistmodel_qbase_receivers(void* self, const char* signal);
void q_abstractlistmodel_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_abstractlistmodel_is_signal_connected(void* self, void* signal);
bool q_abstractlistmodel_qbase_is_signal_connected(void* self, void* signal);
void q_abstractlistmodel_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_abstractlistmodel_delete(void* self);

/// https://doc.qt.io/qt-6/qabstractitemmodel.html#types

typedef enum {
    QABSTRACTITEMMODEL_LAYOUTCHANGEHINT_NOLAYOUTCHANGEHINT = 0,
    QABSTRACTITEMMODEL_LAYOUTCHANGEHINT_VERTICALSORTHINT = 1,
    QABSTRACTITEMMODEL_LAYOUTCHANGEHINT_HORIZONTALSORTHINT = 2
} QAbstractItemModel__LayoutChangeHint;

typedef enum {
    QABSTRACTITEMMODEL_CHECKINDEXOPTION_NOOPTION = 0,
    QABSTRACTITEMMODEL_CHECKINDEXOPTION_INDEXISVALID = 1,
    QABSTRACTITEMMODEL_CHECKINDEXOPTION_DONOTUSEPARENT = 2,
    QABSTRACTITEMMODEL_CHECKINDEXOPTION_PARENTISINVALID = 4
} QAbstractItemModel__CheckIndexOption;

#endif
