#pragma once
#ifndef SRCQT6C_LIBQSPINBOX_H
#define SRCQT6C_LIBQSPINBOX_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "libqttypedefs.h"

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "qtlibc.h"

#include "libqabstractspinbox.h"
#include "libqaction.h"
#include "libqevent.h"
#include "libqanystringview.h"
#include "libqbackingstore.h"
#include "libqbindingstorage.h"
#include "libqbitmap.h"
#include "libqcursor.h"
#include "libqfont.h"
#include "libqfontinfo.h"
#include "libqfontmetrics.h"
#include "libqgraphicseffect.h"
#include "libqgraphicsproxywidget.h"
#include "libqicon.h"
#include "libqkeysequence.h"
#include "libqlayout.h"
#include "libqlineedit.h"
#include "libqlocale.h"
#include "libqmargins.h"
#include "libqmetaobject.h"
#include "libqobject.h"
#include "libqpaintdevice.h"
#include "libqpaintengine.h"
#include "libqpainter.h"
#include "libqpalette.h"
#include "libqpixmap.h"
#include "libqpoint.h"
#include "libqrect.h"
#include "libqregion.h"
#include "libqscreen.h"
#include "libqsize.h"
#include "libqsizepolicy.h"
#include <string.h>
#include "libqstyle.h"
#include "libqstyleoption.h"
#include "libqthread.h"
#include "libqvariant.h"
#include "libqwidget.h"
#include "libqwindow.h"

QSpinBox* q_spinbox_new(void* parent);
QSpinBox* q_spinbox_new2();
QMetaObject* q_spinbox_meta_object(void* self);
void* q_spinbox_metacast(void* self, const char* param1);
int32_t q_spinbox_metacall(void* self, int64_t param1, int param2, void* param3);
void q_spinbox_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_spinbox_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_spinbox_tr(const char* s);
int32_t q_spinbox_value(void* self);
const char* q_spinbox_prefix(void* self);
void q_spinbox_set_prefix(void* self, const char* prefix);
const char* q_spinbox_suffix(void* self);
void q_spinbox_set_suffix(void* self, const char* suffix);
const char* q_spinbox_clean_text(void* self);
int32_t q_spinbox_single_step(void* self);
void q_spinbox_set_single_step(void* self, int val);
int32_t q_spinbox_minimum(void* self);
void q_spinbox_set_minimum(void* self, int min);
int32_t q_spinbox_maximum(void* self);
void q_spinbox_set_maximum(void* self, int max);
void q_spinbox_set_range(void* self, int min, int max);
int64_t q_spinbox_step_type(void* self);
void q_spinbox_set_step_type(void* self, int64_t stepType);
int32_t q_spinbox_display_integer_base(void* self);
void q_spinbox_set_display_integer_base(void* self, int base);
bool q_spinbox_event(void* self, void* event);
void q_spinbox_on_event(void* self, bool (*slot)(void*, void*));
bool q_spinbox_qbase_event(void* self, void* event);
int64_t q_spinbox_validate(void* self, const char* input, int* pos);
void q_spinbox_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_spinbox_qbase_validate(void* self, const char* input, int* pos);
int32_t q_spinbox_value_from_text(void* self, const char* text);
void q_spinbox_on_value_from_text(void* self, int32_t (*slot)(void*, const char*));
int32_t q_spinbox_qbase_value_from_text(void* self, const char* text);
const char* q_spinbox_text_from_value(void* self, int val);
void q_spinbox_on_text_from_value(void* self, const char* (*slot)(void*, int));
const char* q_spinbox_qbase_text_from_value(void* self, int val);
void q_spinbox_fixup(void* self, const char* str);
void q_spinbox_on_fixup(void* self, void (*slot)(void*, const char*));
void q_spinbox_qbase_fixup(void* self, const char* str);
void q_spinbox_set_value(void* self, int val);
void q_spinbox_value_changed(void* self, int param1);
void q_spinbox_on_value_changed(void* self, void (*slot)(void*, int));
void q_spinbox_text_changed(void* self, const char* param1);
void q_spinbox_on_text_changed(void* self, void (*slot)(void*, const char*));
const char* q_spinbox_tr2(const char* s, const char* c);
const char* q_spinbox_tr3(const char* s, const char* c, int n);
int64_t q_spinbox_button_symbols(void* self);
void q_spinbox_set_button_symbols(void* self, int64_t bs);
void q_spinbox_set_correction_mode(void* self, int64_t cm);
int64_t q_spinbox_correction_mode(void* self);
bool q_spinbox_has_acceptable_input(void* self);
const char* q_spinbox_text(void* self);
const char* q_spinbox_special_value_text(void* self);
void q_spinbox_set_special_value_text(void* self, const char* txt);
bool q_spinbox_wrapping(void* self);
void q_spinbox_set_wrapping(void* self, bool w);
void q_spinbox_set_read_only(void* self, bool r);
bool q_spinbox_is_read_only(void* self);
void q_spinbox_set_keyboard_tracking(void* self, bool kt);
bool q_spinbox_keyboard_tracking(void* self);
void q_spinbox_set_alignment(void* self, int64_t flag);
int64_t q_spinbox_alignment(void* self);
void q_spinbox_set_frame(void* self, bool frame);
bool q_spinbox_has_frame(void* self);
void q_spinbox_set_accelerated(void* self, bool on);
bool q_spinbox_is_accelerated(void* self);
void q_spinbox_set_group_separator_shown(void* self, bool shown);
bool q_spinbox_is_group_separator_shown(void* self);
void q_spinbox_interpret_text(void* self);
void q_spinbox_step_up(void* self);
void q_spinbox_step_down(void* self);
void q_spinbox_select_all(void* self);
void q_spinbox_editing_finished(void* self);
void q_spinbox_on_editing_finished(void* self, void (*slot)(void*));
uintptr_t q_spinbox_win_id(void* self);
void q_spinbox_create_win_id(void* self);
uintptr_t q_spinbox_internal_win_id(void* self);
uintptr_t q_spinbox_effective_win_id(void* self);
QStyle* q_spinbox_style(void* self);
void q_spinbox_set_style(void* self, void* style);
bool q_spinbox_is_top_level(void* self);
bool q_spinbox_is_window(void* self);
bool q_spinbox_is_modal(void* self);
int64_t q_spinbox_window_modality(void* self);
void q_spinbox_set_window_modality(void* self, int64_t windowModality);
bool q_spinbox_is_enabled(void* self);
bool q_spinbox_is_enabled_to(void* self, void* param1);
void q_spinbox_set_enabled(void* self, bool enabled);
void q_spinbox_set_disabled(void* self, bool disabled);
void q_spinbox_set_window_modified(void* self, bool windowModified);
QRect* q_spinbox_frame_geometry(void* self);
QRect* q_spinbox_geometry(void* self);
QRect* q_spinbox_normal_geometry(void* self);
int32_t q_spinbox_x(void* self);
int32_t q_spinbox_y(void* self);
QPoint* q_spinbox_pos(void* self);
QSize* q_spinbox_frame_size(void* self);
QSize* q_spinbox_size(void* self);
int32_t q_spinbox_width(void* self);
int32_t q_spinbox_height(void* self);
QRect* q_spinbox_rect(void* self);
QRect* q_spinbox_children_rect(void* self);
QRegion* q_spinbox_children_region(void* self);
QSize* q_spinbox_minimum_size(void* self);
QSize* q_spinbox_maximum_size(void* self);
int32_t q_spinbox_minimum_width(void* self);
int32_t q_spinbox_minimum_height(void* self);
int32_t q_spinbox_maximum_width(void* self);
int32_t q_spinbox_maximum_height(void* self);
void q_spinbox_set_minimum_size(void* self, void* minimumSize);
void q_spinbox_set_minimum_size2(void* self, int minw, int minh);
void q_spinbox_set_maximum_size(void* self, void* maximumSize);
void q_spinbox_set_maximum_size2(void* self, int maxw, int maxh);
void q_spinbox_set_minimum_width(void* self, int minw);
void q_spinbox_set_minimum_height(void* self, int minh);
void q_spinbox_set_maximum_width(void* self, int maxw);
void q_spinbox_set_maximum_height(void* self, int maxh);
QSize* q_spinbox_size_increment(void* self);
void q_spinbox_set_size_increment(void* self, void* sizeIncrement);
void q_spinbox_set_size_increment2(void* self, int w, int h);
QSize* q_spinbox_base_size(void* self);
void q_spinbox_set_base_size(void* self, void* baseSize);
void q_spinbox_set_base_size2(void* self, int basew, int baseh);
void q_spinbox_set_fixed_size(void* self, void* fixedSize);
void q_spinbox_set_fixed_size2(void* self, int w, int h);
void q_spinbox_set_fixed_width(void* self, int w);
void q_spinbox_set_fixed_height(void* self, int h);
QPointF* q_spinbox_map_to_global(void* self, void* param1);
QPoint* q_spinbox_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_spinbox_map_from_global(void* self, void* param1);
QPoint* q_spinbox_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_spinbox_map_to_parent(void* self, void* param1);
QPoint* q_spinbox_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_spinbox_map_from_parent(void* self, void* param1);
QPoint* q_spinbox_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_spinbox_map_to(void* self, void* param1, void* param2);
QPoint* q_spinbox_map_to2(void* self, void* param1, void* param2);
QPointF* q_spinbox_map_from(void* self, void* param1, void* param2);
QPoint* q_spinbox_map_from2(void* self, void* param1, void* param2);
QWidget* q_spinbox_window(void* self);
QWidget* q_spinbox_native_parent_widget(void* self);
QWidget* q_spinbox_top_level_widget(void* self);
QPalette* q_spinbox_palette(void* self);
void q_spinbox_set_palette(void* self, void* palette);
void q_spinbox_set_background_role(void* self, int64_t backgroundRole);
int64_t q_spinbox_background_role(void* self);
void q_spinbox_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_spinbox_foreground_role(void* self);
QFont* q_spinbox_font(void* self);
void q_spinbox_set_font(void* self, void* font);
QFontMetrics* q_spinbox_font_metrics(void* self);
QFontInfo* q_spinbox_font_info(void* self);
QCursor* q_spinbox_cursor(void* self);
void q_spinbox_set_cursor(void* self, void* cursor);
void q_spinbox_unset_cursor(void* self);
void q_spinbox_set_mouse_tracking(void* self, bool enable);
bool q_spinbox_has_mouse_tracking(void* self);
bool q_spinbox_under_mouse(void* self);
void q_spinbox_set_tablet_tracking(void* self, bool enable);
bool q_spinbox_has_tablet_tracking(void* self);
void q_spinbox_set_mask(void* self, void* mask);
void q_spinbox_set_mask_with_mask(void* self, void* mask);
QRegion* q_spinbox_mask(void* self);
void q_spinbox_clear_mask(void* self);
void q_spinbox_render(void* self, void* target);
void q_spinbox_render_with_painter(void* self, void* painter);
QPixmap* q_spinbox_grab(void* self);
QGraphicsEffect* q_spinbox_graphics_effect(void* self);
void q_spinbox_set_graphics_effect(void* self, void* effect);
void q_spinbox_grab_gesture(void* self, int64_t typeVal);
void q_spinbox_ungrab_gesture(void* self, int64_t typeVal);
void q_spinbox_set_window_title(void* self, const char* windowTitle);
void q_spinbox_set_style_sheet(void* self, const char* styleSheet);
const char* q_spinbox_style_sheet(void* self);
const char* q_spinbox_window_title(void* self);
void q_spinbox_set_window_icon(void* self, void* icon);
QIcon* q_spinbox_window_icon(void* self);
void q_spinbox_set_window_icon_text(void* self, const char* windowIconText);
const char* q_spinbox_window_icon_text(void* self);
void q_spinbox_set_window_role(void* self, const char* windowRole);
const char* q_spinbox_window_role(void* self);
void q_spinbox_set_window_file_path(void* self, const char* filePath);
const char* q_spinbox_window_file_path(void* self);
void q_spinbox_set_window_opacity(void* self, double level);
double q_spinbox_window_opacity(void* self);
bool q_spinbox_is_window_modified(void* self);
void q_spinbox_set_tool_tip(void* self, const char* toolTip);
const char* q_spinbox_tool_tip(void* self);
void q_spinbox_set_tool_tip_duration(void* self, int msec);
int32_t q_spinbox_tool_tip_duration(void* self);
void q_spinbox_set_status_tip(void* self, const char* statusTip);
const char* q_spinbox_status_tip(void* self);
void q_spinbox_set_whats_this(void* self, const char* whatsThis);
const char* q_spinbox_whats_this(void* self);
const char* q_spinbox_accessible_name(void* self);
void q_spinbox_set_accessible_name(void* self, const char* name);
const char* q_spinbox_accessible_description(void* self);
void q_spinbox_set_accessible_description(void* self, const char* description);
void q_spinbox_set_layout_direction(void* self, int64_t direction);
int64_t q_spinbox_layout_direction(void* self);
void q_spinbox_unset_layout_direction(void* self);
void q_spinbox_set_locale(void* self, void* locale);
QLocale* q_spinbox_locale(void* self);
void q_spinbox_unset_locale(void* self);
bool q_spinbox_is_right_to_left(void* self);
bool q_spinbox_is_left_to_right(void* self);
void q_spinbox_set_focus(void* self);
bool q_spinbox_is_active_window(void* self);
void q_spinbox_activate_window(void* self);
void q_spinbox_clear_focus(void* self);
void q_spinbox_set_focus_with_reason(void* self, int64_t reason);
int64_t q_spinbox_focus_policy(void* self);
void q_spinbox_set_focus_policy(void* self, int64_t policy);
bool q_spinbox_has_focus(void* self);
void q_spinbox_set_tab_order(void* param1, void* param2);
void q_spinbox_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_spinbox_focus_proxy(void* self);
int64_t q_spinbox_context_menu_policy(void* self);
void q_spinbox_set_context_menu_policy(void* self, int64_t policy);
void q_spinbox_grab_mouse(void* self);
void q_spinbox_grab_mouse_with_q_cursor(void* self, void* param1);
void q_spinbox_release_mouse(void* self);
void q_spinbox_grab_keyboard(void* self);
void q_spinbox_release_keyboard(void* self);
int32_t q_spinbox_grab_shortcut(void* self, void* key);
void q_spinbox_release_shortcut(void* self, int id);
void q_spinbox_set_shortcut_enabled(void* self, int id);
void q_spinbox_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_spinbox_mouse_grabber();
QWidget* q_spinbox_keyboard_grabber();
bool q_spinbox_updates_enabled(void* self);
void q_spinbox_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_spinbox_graphics_proxy_widget(void* self);
void q_spinbox_update(void* self);
void q_spinbox_repaint(void* self);
void q_spinbox_update2(void* self, int x, int y, int w, int h);
void q_spinbox_update_with_q_rect(void* self, void* param1);
void q_spinbox_update_with_q_region(void* self, void* param1);
void q_spinbox_repaint2(void* self, int x, int y, int w, int h);
void q_spinbox_repaint_with_q_rect(void* self, void* param1);
void q_spinbox_repaint_with_q_region(void* self, void* param1);
void q_spinbox_set_hidden(void* self, bool hidden);
void q_spinbox_show(void* self);
void q_spinbox_hide(void* self);
void q_spinbox_show_minimized(void* self);
void q_spinbox_show_maximized(void* self);
void q_spinbox_show_full_screen(void* self);
void q_spinbox_show_normal(void* self);
bool q_spinbox_close(void* self);
void q_spinbox_raise(void* self);
void q_spinbox_lower(void* self);
void q_spinbox_stack_under(void* self, void* param1);
void q_spinbox_move(void* self, int x, int y);
void q_spinbox_move_with_q_point(void* self, void* param1);
void q_spinbox_resize(void* self, int w, int h);
void q_spinbox_resize_with_q_size(void* self, void* param1);
void q_spinbox_set_geometry(void* self, int x, int y, int w, int h);
void q_spinbox_set_geometry_with_geometry(void* self, void* geometry);
char* q_spinbox_save_geometry(void* self);
bool q_spinbox_restore_geometry(void* self, const char* geometry);
void q_spinbox_adjust_size(void* self);
bool q_spinbox_is_visible(void* self);
bool q_spinbox_is_visible_to(void* self, void* param1);
bool q_spinbox_is_hidden(void* self);
bool q_spinbox_is_minimized(void* self);
bool q_spinbox_is_maximized(void* self);
bool q_spinbox_is_full_screen(void* self);
int64_t q_spinbox_window_state(void* self);
void q_spinbox_set_window_state(void* self, int64_t state);
void q_spinbox_override_window_state(void* self, int64_t state);
QSizePolicy* q_spinbox_size_policy(void* self);
void q_spinbox_set_size_policy(void* self, void* sizePolicy);
void q_spinbox_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_spinbox_visible_region(void* self);
void q_spinbox_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_spinbox_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_spinbox_contents_margins(void* self);
QRect* q_spinbox_contents_rect(void* self);
QLayout* q_spinbox_layout(void* self);
void q_spinbox_set_layout(void* self, void* layout);
void q_spinbox_update_geometry(void* self);
void q_spinbox_set_parent(void* self, void* parent);
void q_spinbox_set_parent2(void* self, void* parent, int64_t f);
void q_spinbox_scroll(void* self, int dx, int dy);
void q_spinbox_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_spinbox_focus_widget(void* self);
QWidget* q_spinbox_next_in_focus_chain(void* self);
QWidget* q_spinbox_previous_in_focus_chain(void* self);
bool q_spinbox_accept_drops(void* self);
void q_spinbox_set_accept_drops(void* self, bool on);
void q_spinbox_add_action(void* self, void* action);
void q_spinbox_add_actions(void* self, void* actions[]);
void q_spinbox_insert_actions(void* self, void* before, void* actions[]);
void q_spinbox_insert_action(void* self, void* before, void* action);
void q_spinbox_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_spinbox_actions(void* self);
QAction* q_spinbox_add_action_with_text(void* self, const char* text);
QAction* q_spinbox_add_action2(void* self, void* icon, const char* text);
QAction* q_spinbox_add_action3(void* self, const char* text, void* shortcut);
QAction* q_spinbox_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_spinbox_parent_widget(void* self);
void q_spinbox_set_window_flags(void* self, int64_t typeVal);
int64_t q_spinbox_window_flags(void* self);
void q_spinbox_set_window_flag(void* self, int64_t param1);
void q_spinbox_override_window_flags(void* self, int64_t typeVal);
int64_t q_spinbox_window_type(void* self);
QWidget* q_spinbox_find(uint64_t param1);
QWidget* q_spinbox_child_at(void* self, int x, int y);
QWidget* q_spinbox_child_at_with_q_point(void* self, void* p);
void q_spinbox_set_attribute(void* self, int64_t param1);
bool q_spinbox_test_attribute(void* self, int64_t param1);
void q_spinbox_ensure_polished(void* self);
bool q_spinbox_is_ancestor_of(void* self, void* child);
bool q_spinbox_auto_fill_background(void* self);
void q_spinbox_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_spinbox_backing_store(void* self);
QWindow* q_spinbox_window_handle(void* self);
QScreen* q_spinbox_screen(void* self);
void q_spinbox_set_screen(void* self, void* screen);
QWidget* q_spinbox_create_window_container(void* window);
void q_spinbox_window_title_changed(void* self, const char* title);
void q_spinbox_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_spinbox_window_icon_changed(void* self, void* icon);
void q_spinbox_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_spinbox_window_icon_text_changed(void* self, const char* iconText);
void q_spinbox_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_spinbox_custom_context_menu_requested(void* self, void* pos);
void q_spinbox_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_spinbox_input_method_hints(void* self);
void q_spinbox_set_input_method_hints(void* self, int64_t hints);
void q_spinbox_render2(void* self, void* target, void* targetOffset);
void q_spinbox_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_spinbox_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_spinbox_render22(void* self, void* painter, void* targetOffset);
void q_spinbox_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_spinbox_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_spinbox_grab1(void* self, void* rectangle);
void q_spinbox_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_spinbox_grab_shortcut2(void* self, void* key, int64_t context);
void q_spinbox_set_shortcut_enabled2(void* self, int id, bool enable);
void q_spinbox_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_spinbox_set_window_flag2(void* self, int64_t param1, bool on);
void q_spinbox_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_spinbox_create_window_container2(void* window, void* parent);
QWidget* q_spinbox_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_spinbox_object_name(void* self);
void q_spinbox_set_object_name(void* self, const char* name);
bool q_spinbox_is_widget_type(void* self);
bool q_spinbox_is_window_type(void* self);
bool q_spinbox_is_quick_item_type(void* self);
bool q_spinbox_signals_blocked(void* self);
bool q_spinbox_block_signals(void* self, bool b);
QThread* q_spinbox_thread(void* self);
void q_spinbox_move_to_thread(void* self, void* thread);
int32_t q_spinbox_start_timer(void* self, int interval);
void q_spinbox_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_spinbox_children(void* self);
void q_spinbox_install_event_filter(void* self, void* filterObj);
void q_spinbox_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_spinbox_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_spinbox_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_spinbox_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_spinbox_disconnect_with_q_meta_object_connection(void* param1);
void q_spinbox_dump_object_tree(void* self);
void q_spinbox_dump_object_info(void* self);
bool q_spinbox_set_property(void* self, const char* name, void* value);
QVariant* q_spinbox_property(void* self, const char* name);
const char** q_spinbox_dynamic_property_names(void* self);
QBindingStorage* q_spinbox_binding_storage(void* self);
QBindingStorage* q_spinbox_binding_storage2(void* self);
void q_spinbox_destroyed(void* self);
void q_spinbox_on_destroyed(void* self, void (*slot)(void*));
QObject* q_spinbox_parent(void* self);
bool q_spinbox_inherits(void* self, const char* classname);
void q_spinbox_delete_later(void* self);
int32_t q_spinbox_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_spinbox_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_spinbox_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_spinbox_destroyed1(void* self, void* param1);
void q_spinbox_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_spinbox_painting_active(void* self);
int32_t q_spinbox_width_m_m(void* self);
int32_t q_spinbox_height_m_m(void* self);
int32_t q_spinbox_logical_dpi_x(void* self);
int32_t q_spinbox_logical_dpi_y(void* self);
int32_t q_spinbox_physical_dpi_x(void* self);
int32_t q_spinbox_physical_dpi_y(void* self);
double q_spinbox_device_pixel_ratio(void* self);
double q_spinbox_device_pixel_ratio_f(void* self);
int32_t q_spinbox_color_count(void* self);
int32_t q_spinbox_depth(void* self);
double q_spinbox_device_pixel_ratio_f_scale();
QSize* q_spinbox_size_hint(void* self);
QSize* q_spinbox_qbase_size_hint(void* self);
void q_spinbox_on_size_hint(void* self, QSize* (*slot)());
QSize* q_spinbox_minimum_size_hint(void* self);
QSize* q_spinbox_qbase_minimum_size_hint(void* self);
void q_spinbox_on_minimum_size_hint(void* self, QSize* (*slot)());
QVariant* q_spinbox_input_method_query(void* self, int64_t param1);
QVariant* q_spinbox_qbase_input_method_query(void* self, int64_t param1);
void q_spinbox_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_spinbox_step_by(void* self, int steps);
void q_spinbox_qbase_step_by(void* self, int steps);
void q_spinbox_on_step_by(void* self, void (*slot)(void*, int));
void q_spinbox_clear(void* self);
void q_spinbox_qbase_clear(void* self);
void q_spinbox_on_clear(void* self, void (*slot)());
void q_spinbox_resize_event(void* self, void* event);
void q_spinbox_qbase_resize_event(void* self, void* event);
void q_spinbox_on_resize_event(void* self, void (*slot)(void*, void*));
void q_spinbox_key_press_event(void* self, void* event);
void q_spinbox_qbase_key_press_event(void* self, void* event);
void q_spinbox_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_spinbox_key_release_event(void* self, void* event);
void q_spinbox_qbase_key_release_event(void* self, void* event);
void q_spinbox_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_spinbox_wheel_event(void* self, void* event);
void q_spinbox_qbase_wheel_event(void* self, void* event);
void q_spinbox_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_spinbox_focus_in_event(void* self, void* event);
void q_spinbox_qbase_focus_in_event(void* self, void* event);
void q_spinbox_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_spinbox_focus_out_event(void* self, void* event);
void q_spinbox_qbase_focus_out_event(void* self, void* event);
void q_spinbox_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_spinbox_context_menu_event(void* self, void* event);
void q_spinbox_qbase_context_menu_event(void* self, void* event);
void q_spinbox_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_spinbox_change_event(void* self, void* event);
void q_spinbox_qbase_change_event(void* self, void* event);
void q_spinbox_on_change_event(void* self, void (*slot)(void*, void*));
void q_spinbox_close_event(void* self, void* event);
void q_spinbox_qbase_close_event(void* self, void* event);
void q_spinbox_on_close_event(void* self, void (*slot)(void*, void*));
void q_spinbox_hide_event(void* self, void* event);
void q_spinbox_qbase_hide_event(void* self, void* event);
void q_spinbox_on_hide_event(void* self, void (*slot)(void*, void*));
void q_spinbox_mouse_press_event(void* self, void* event);
void q_spinbox_qbase_mouse_press_event(void* self, void* event);
void q_spinbox_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_spinbox_mouse_release_event(void* self, void* event);
void q_spinbox_qbase_mouse_release_event(void* self, void* event);
void q_spinbox_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_spinbox_mouse_move_event(void* self, void* event);
void q_spinbox_qbase_mouse_move_event(void* self, void* event);
void q_spinbox_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_spinbox_timer_event(void* self, void* event);
void q_spinbox_qbase_timer_event(void* self, void* event);
void q_spinbox_on_timer_event(void* self, void (*slot)(void*, void*));
void q_spinbox_paint_event(void* self, void* event);
void q_spinbox_qbase_paint_event(void* self, void* event);
void q_spinbox_on_paint_event(void* self, void (*slot)(void*, void*));
void q_spinbox_show_event(void* self, void* event);
void q_spinbox_qbase_show_event(void* self, void* event);
void q_spinbox_on_show_event(void* self, void (*slot)(void*, void*));
void q_spinbox_init_style_option(void* self, void* option);
void q_spinbox_qbase_init_style_option(void* self, void* option);
void q_spinbox_on_init_style_option(void* self, void (*slot)(void*, void*));
int64_t q_spinbox_step_enabled(void* self);
int64_t q_spinbox_qbase_step_enabled(void* self);
void q_spinbox_on_step_enabled(void* self, int64_t (*slot)());
int32_t q_spinbox_dev_type(void* self);
int32_t q_spinbox_qbase_dev_type(void* self);
void q_spinbox_on_dev_type(void* self, int32_t (*slot)());
void q_spinbox_set_visible(void* self, bool visible);
void q_spinbox_qbase_set_visible(void* self, bool visible);
void q_spinbox_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_spinbox_height_for_width(void* self, int param1);
int32_t q_spinbox_qbase_height_for_width(void* self, int param1);
void q_spinbox_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_spinbox_has_height_for_width(void* self);
bool q_spinbox_qbase_has_height_for_width(void* self);
void q_spinbox_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_spinbox_paint_engine(void* self);
QPaintEngine* q_spinbox_qbase_paint_engine(void* self);
void q_spinbox_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_spinbox_mouse_double_click_event(void* self, void* event);
void q_spinbox_qbase_mouse_double_click_event(void* self, void* event);
void q_spinbox_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_spinbox_enter_event(void* self, void* event);
void q_spinbox_qbase_enter_event(void* self, void* event);
void q_spinbox_on_enter_event(void* self, void (*slot)(void*, void*));
void q_spinbox_leave_event(void* self, void* event);
void q_spinbox_qbase_leave_event(void* self, void* event);
void q_spinbox_on_leave_event(void* self, void (*slot)(void*, void*));
void q_spinbox_move_event(void* self, void* event);
void q_spinbox_qbase_move_event(void* self, void* event);
void q_spinbox_on_move_event(void* self, void (*slot)(void*, void*));
void q_spinbox_tablet_event(void* self, void* event);
void q_spinbox_qbase_tablet_event(void* self, void* event);
void q_spinbox_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_spinbox_action_event(void* self, void* event);
void q_spinbox_qbase_action_event(void* self, void* event);
void q_spinbox_on_action_event(void* self, void (*slot)(void*, void*));
void q_spinbox_drag_enter_event(void* self, void* event);
void q_spinbox_qbase_drag_enter_event(void* self, void* event);
void q_spinbox_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_spinbox_drag_move_event(void* self, void* event);
void q_spinbox_qbase_drag_move_event(void* self, void* event);
void q_spinbox_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_spinbox_drag_leave_event(void* self, void* event);
void q_spinbox_qbase_drag_leave_event(void* self, void* event);
void q_spinbox_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_spinbox_drop_event(void* self, void* event);
void q_spinbox_qbase_drop_event(void* self, void* event);
void q_spinbox_on_drop_event(void* self, void (*slot)(void*, void*));
bool q_spinbox_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_spinbox_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_spinbox_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_spinbox_metric(void* self, int64_t param1);
int32_t q_spinbox_qbase_metric(void* self, int64_t param1);
void q_spinbox_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_spinbox_init_painter(void* self, void* painter);
void q_spinbox_qbase_init_painter(void* self, void* painter);
void q_spinbox_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_spinbox_redirected(void* self, void* offset);
QPaintDevice* q_spinbox_qbase_redirected(void* self, void* offset);
void q_spinbox_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_spinbox_shared_painter(void* self);
QPainter* q_spinbox_qbase_shared_painter(void* self);
void q_spinbox_on_shared_painter(void* self, QPainter* (*slot)());
void q_spinbox_input_method_event(void* self, void* param1);
void q_spinbox_qbase_input_method_event(void* self, void* param1);
void q_spinbox_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_spinbox_focus_next_prev_child(void* self, bool next);
bool q_spinbox_qbase_focus_next_prev_child(void* self, bool next);
void q_spinbox_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
bool q_spinbox_event_filter(void* self, void* watched, void* event);
bool q_spinbox_qbase_event_filter(void* self, void* watched, void* event);
void q_spinbox_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_spinbox_child_event(void* self, void* event);
void q_spinbox_qbase_child_event(void* self, void* event);
void q_spinbox_on_child_event(void* self, void (*slot)(void*, void*));
void q_spinbox_custom_event(void* self, void* event);
void q_spinbox_qbase_custom_event(void* self, void* event);
void q_spinbox_on_custom_event(void* self, void (*slot)(void*, void*));
void q_spinbox_connect_notify(void* self, void* signal);
void q_spinbox_qbase_connect_notify(void* self, void* signal);
void q_spinbox_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_spinbox_disconnect_notify(void* self, void* signal);
void q_spinbox_qbase_disconnect_notify(void* self, void* signal);
void q_spinbox_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QLineEdit* q_spinbox_line_edit(void* self);
QLineEdit* q_spinbox_qbase_line_edit(void* self);
void q_spinbox_on_line_edit(void* self, QLineEdit* (*slot)());
void q_spinbox_set_line_edit(void* self, void* edit);
void q_spinbox_qbase_set_line_edit(void* self, void* edit);
void q_spinbox_on_set_line_edit(void* self, void (*slot)(void*, void*));
void q_spinbox_update_micro_focus(void* self);
void q_spinbox_qbase_update_micro_focus(void* self);
void q_spinbox_on_update_micro_focus(void* self, void (*slot)());
void q_spinbox_create(void* self);
void q_spinbox_qbase_create(void* self);
void q_spinbox_on_create(void* self, void (*slot)());
void q_spinbox_destroy(void* self);
void q_spinbox_qbase_destroy(void* self);
void q_spinbox_on_destroy(void* self, void (*slot)());
bool q_spinbox_focus_next_child(void* self);
bool q_spinbox_qbase_focus_next_child(void* self);
void q_spinbox_on_focus_next_child(void* self, bool (*slot)());
bool q_spinbox_focus_previous_child(void* self);
bool q_spinbox_qbase_focus_previous_child(void* self);
void q_spinbox_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_spinbox_sender(void* self);
QObject* q_spinbox_qbase_sender(void* self);
void q_spinbox_on_sender(void* self, QObject* (*slot)());
int32_t q_spinbox_sender_signal_index(void* self);
int32_t q_spinbox_qbase_sender_signal_index(void* self);
void q_spinbox_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_spinbox_receivers(void* self, const char* signal);
int32_t q_spinbox_qbase_receivers(void* self, const char* signal);
void q_spinbox_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_spinbox_is_signal_connected(void* self, void* signal);
bool q_spinbox_qbase_is_signal_connected(void* self, void* signal);
void q_spinbox_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_spinbox_delete(void* self);

QDoubleSpinBox* q_doublespinbox_new(void* parent);
QDoubleSpinBox* q_doublespinbox_new2();
QMetaObject* q_doublespinbox_meta_object(void* self);
void* q_doublespinbox_metacast(void* self, const char* param1);
int32_t q_doublespinbox_metacall(void* self, int64_t param1, int param2, void* param3);
void q_doublespinbox_on_metacall(void* self, int32_t (*slot)(void*, int64_t, int, void*));
int32_t q_doublespinbox_qbase_metacall(void* self, int64_t param1, int param2, void* param3);
const char* q_doublespinbox_tr(const char* s);
double q_doublespinbox_value(void* self);
const char* q_doublespinbox_prefix(void* self);
void q_doublespinbox_set_prefix(void* self, const char* prefix);
const char* q_doublespinbox_suffix(void* self);
void q_doublespinbox_set_suffix(void* self, const char* suffix);
const char* q_doublespinbox_clean_text(void* self);
double q_doublespinbox_single_step(void* self);
void q_doublespinbox_set_single_step(void* self, double val);
double q_doublespinbox_minimum(void* self);
void q_doublespinbox_set_minimum(void* self, double min);
double q_doublespinbox_maximum(void* self);
void q_doublespinbox_set_maximum(void* self, double max);
void q_doublespinbox_set_range(void* self, double min, double max);
int64_t q_doublespinbox_step_type(void* self);
void q_doublespinbox_set_step_type(void* self, int64_t stepType);
int32_t q_doublespinbox_decimals(void* self);
void q_doublespinbox_set_decimals(void* self, int prec);
int64_t q_doublespinbox_validate(void* self, const char* input, int* pos);
void q_doublespinbox_on_validate(void* self, int64_t (*slot)(void*, const char*, int*));
int64_t q_doublespinbox_qbase_validate(void* self, const char* input, int* pos);
double q_doublespinbox_value_from_text(void* self, const char* text);
void q_doublespinbox_on_value_from_text(void* self, double (*slot)(void*, const char*));
double q_doublespinbox_qbase_value_from_text(void* self, const char* text);
const char* q_doublespinbox_text_from_value(void* self, double val);
void q_doublespinbox_on_text_from_value(void* self, const char* (*slot)(void*, double));
const char* q_doublespinbox_qbase_text_from_value(void* self, double val);
void q_doublespinbox_fixup(void* self, const char* str);
void q_doublespinbox_on_fixup(void* self, void (*slot)(void*, const char*));
void q_doublespinbox_qbase_fixup(void* self, const char* str);
void q_doublespinbox_set_value(void* self, double val);
void q_doublespinbox_value_changed(void* self, double param1);
void q_doublespinbox_on_value_changed(void* self, void (*slot)(void*, double));
void q_doublespinbox_text_changed(void* self, const char* param1);
void q_doublespinbox_on_text_changed(void* self, void (*slot)(void*, const char*));
const char* q_doublespinbox_tr2(const char* s, const char* c);
const char* q_doublespinbox_tr3(const char* s, const char* c, int n);
int64_t q_doublespinbox_button_symbols(void* self);
void q_doublespinbox_set_button_symbols(void* self, int64_t bs);
void q_doublespinbox_set_correction_mode(void* self, int64_t cm);
int64_t q_doublespinbox_correction_mode(void* self);
bool q_doublespinbox_has_acceptable_input(void* self);
const char* q_doublespinbox_text(void* self);
const char* q_doublespinbox_special_value_text(void* self);
void q_doublespinbox_set_special_value_text(void* self, const char* txt);
bool q_doublespinbox_wrapping(void* self);
void q_doublespinbox_set_wrapping(void* self, bool w);
void q_doublespinbox_set_read_only(void* self, bool r);
bool q_doublespinbox_is_read_only(void* self);
void q_doublespinbox_set_keyboard_tracking(void* self, bool kt);
bool q_doublespinbox_keyboard_tracking(void* self);
void q_doublespinbox_set_alignment(void* self, int64_t flag);
int64_t q_doublespinbox_alignment(void* self);
void q_doublespinbox_set_frame(void* self, bool frame);
bool q_doublespinbox_has_frame(void* self);
void q_doublespinbox_set_accelerated(void* self, bool on);
bool q_doublespinbox_is_accelerated(void* self);
void q_doublespinbox_set_group_separator_shown(void* self, bool shown);
bool q_doublespinbox_is_group_separator_shown(void* self);
void q_doublespinbox_interpret_text(void* self);
void q_doublespinbox_step_up(void* self);
void q_doublespinbox_step_down(void* self);
void q_doublespinbox_select_all(void* self);
void q_doublespinbox_editing_finished(void* self);
void q_doublespinbox_on_editing_finished(void* self, void (*slot)(void*));
uintptr_t q_doublespinbox_win_id(void* self);
void q_doublespinbox_create_win_id(void* self);
uintptr_t q_doublespinbox_internal_win_id(void* self);
uintptr_t q_doublespinbox_effective_win_id(void* self);
QStyle* q_doublespinbox_style(void* self);
void q_doublespinbox_set_style(void* self, void* style);
bool q_doublespinbox_is_top_level(void* self);
bool q_doublespinbox_is_window(void* self);
bool q_doublespinbox_is_modal(void* self);
int64_t q_doublespinbox_window_modality(void* self);
void q_doublespinbox_set_window_modality(void* self, int64_t windowModality);
bool q_doublespinbox_is_enabled(void* self);
bool q_doublespinbox_is_enabled_to(void* self, void* param1);
void q_doublespinbox_set_enabled(void* self, bool enabled);
void q_doublespinbox_set_disabled(void* self, bool disabled);
void q_doublespinbox_set_window_modified(void* self, bool windowModified);
QRect* q_doublespinbox_frame_geometry(void* self);
QRect* q_doublespinbox_geometry(void* self);
QRect* q_doublespinbox_normal_geometry(void* self);
int32_t q_doublespinbox_x(void* self);
int32_t q_doublespinbox_y(void* self);
QPoint* q_doublespinbox_pos(void* self);
QSize* q_doublespinbox_frame_size(void* self);
QSize* q_doublespinbox_size(void* self);
int32_t q_doublespinbox_width(void* self);
int32_t q_doublespinbox_height(void* self);
QRect* q_doublespinbox_rect(void* self);
QRect* q_doublespinbox_children_rect(void* self);
QRegion* q_doublespinbox_children_region(void* self);
QSize* q_doublespinbox_minimum_size(void* self);
QSize* q_doublespinbox_maximum_size(void* self);
int32_t q_doublespinbox_minimum_width(void* self);
int32_t q_doublespinbox_minimum_height(void* self);
int32_t q_doublespinbox_maximum_width(void* self);
int32_t q_doublespinbox_maximum_height(void* self);
void q_doublespinbox_set_minimum_size(void* self, void* minimumSize);
void q_doublespinbox_set_minimum_size2(void* self, int minw, int minh);
void q_doublespinbox_set_maximum_size(void* self, void* maximumSize);
void q_doublespinbox_set_maximum_size2(void* self, int maxw, int maxh);
void q_doublespinbox_set_minimum_width(void* self, int minw);
void q_doublespinbox_set_minimum_height(void* self, int minh);
void q_doublespinbox_set_maximum_width(void* self, int maxw);
void q_doublespinbox_set_maximum_height(void* self, int maxh);
QSize* q_doublespinbox_size_increment(void* self);
void q_doublespinbox_set_size_increment(void* self, void* sizeIncrement);
void q_doublespinbox_set_size_increment2(void* self, int w, int h);
QSize* q_doublespinbox_base_size(void* self);
void q_doublespinbox_set_base_size(void* self, void* baseSize);
void q_doublespinbox_set_base_size2(void* self, int basew, int baseh);
void q_doublespinbox_set_fixed_size(void* self, void* fixedSize);
void q_doublespinbox_set_fixed_size2(void* self, int w, int h);
void q_doublespinbox_set_fixed_width(void* self, int w);
void q_doublespinbox_set_fixed_height(void* self, int h);
QPointF* q_doublespinbox_map_to_global(void* self, void* param1);
QPoint* q_doublespinbox_map_to_global_with_q_point(void* self, void* param1);
QPointF* q_doublespinbox_map_from_global(void* self, void* param1);
QPoint* q_doublespinbox_map_from_global_with_q_point(void* self, void* param1);
QPointF* q_doublespinbox_map_to_parent(void* self, void* param1);
QPoint* q_doublespinbox_map_to_parent_with_q_point(void* self, void* param1);
QPointF* q_doublespinbox_map_from_parent(void* self, void* param1);
QPoint* q_doublespinbox_map_from_parent_with_q_point(void* self, void* param1);
QPointF* q_doublespinbox_map_to(void* self, void* param1, void* param2);
QPoint* q_doublespinbox_map_to2(void* self, void* param1, void* param2);
QPointF* q_doublespinbox_map_from(void* self, void* param1, void* param2);
QPoint* q_doublespinbox_map_from2(void* self, void* param1, void* param2);
QWidget* q_doublespinbox_window(void* self);
QWidget* q_doublespinbox_native_parent_widget(void* self);
QWidget* q_doublespinbox_top_level_widget(void* self);
QPalette* q_doublespinbox_palette(void* self);
void q_doublespinbox_set_palette(void* self, void* palette);
void q_doublespinbox_set_background_role(void* self, int64_t backgroundRole);
int64_t q_doublespinbox_background_role(void* self);
void q_doublespinbox_set_foreground_role(void* self, int64_t foregroundRole);
int64_t q_doublespinbox_foreground_role(void* self);
QFont* q_doublespinbox_font(void* self);
void q_doublespinbox_set_font(void* self, void* font);
QFontMetrics* q_doublespinbox_font_metrics(void* self);
QFontInfo* q_doublespinbox_font_info(void* self);
QCursor* q_doublespinbox_cursor(void* self);
void q_doublespinbox_set_cursor(void* self, void* cursor);
void q_doublespinbox_unset_cursor(void* self);
void q_doublespinbox_set_mouse_tracking(void* self, bool enable);
bool q_doublespinbox_has_mouse_tracking(void* self);
bool q_doublespinbox_under_mouse(void* self);
void q_doublespinbox_set_tablet_tracking(void* self, bool enable);
bool q_doublespinbox_has_tablet_tracking(void* self);
void q_doublespinbox_set_mask(void* self, void* mask);
void q_doublespinbox_set_mask_with_mask(void* self, void* mask);
QRegion* q_doublespinbox_mask(void* self);
void q_doublespinbox_clear_mask(void* self);
void q_doublespinbox_render(void* self, void* target);
void q_doublespinbox_render_with_painter(void* self, void* painter);
QPixmap* q_doublespinbox_grab(void* self);
QGraphicsEffect* q_doublespinbox_graphics_effect(void* self);
void q_doublespinbox_set_graphics_effect(void* self, void* effect);
void q_doublespinbox_grab_gesture(void* self, int64_t typeVal);
void q_doublespinbox_ungrab_gesture(void* self, int64_t typeVal);
void q_doublespinbox_set_window_title(void* self, const char* windowTitle);
void q_doublespinbox_set_style_sheet(void* self, const char* styleSheet);
const char* q_doublespinbox_style_sheet(void* self);
const char* q_doublespinbox_window_title(void* self);
void q_doublespinbox_set_window_icon(void* self, void* icon);
QIcon* q_doublespinbox_window_icon(void* self);
void q_doublespinbox_set_window_icon_text(void* self, const char* windowIconText);
const char* q_doublespinbox_window_icon_text(void* self);
void q_doublespinbox_set_window_role(void* self, const char* windowRole);
const char* q_doublespinbox_window_role(void* self);
void q_doublespinbox_set_window_file_path(void* self, const char* filePath);
const char* q_doublespinbox_window_file_path(void* self);
void q_doublespinbox_set_window_opacity(void* self, double level);
double q_doublespinbox_window_opacity(void* self);
bool q_doublespinbox_is_window_modified(void* self);
void q_doublespinbox_set_tool_tip(void* self, const char* toolTip);
const char* q_doublespinbox_tool_tip(void* self);
void q_doublespinbox_set_tool_tip_duration(void* self, int msec);
int32_t q_doublespinbox_tool_tip_duration(void* self);
void q_doublespinbox_set_status_tip(void* self, const char* statusTip);
const char* q_doublespinbox_status_tip(void* self);
void q_doublespinbox_set_whats_this(void* self, const char* whatsThis);
const char* q_doublespinbox_whats_this(void* self);
const char* q_doublespinbox_accessible_name(void* self);
void q_doublespinbox_set_accessible_name(void* self, const char* name);
const char* q_doublespinbox_accessible_description(void* self);
void q_doublespinbox_set_accessible_description(void* self, const char* description);
void q_doublespinbox_set_layout_direction(void* self, int64_t direction);
int64_t q_doublespinbox_layout_direction(void* self);
void q_doublespinbox_unset_layout_direction(void* self);
void q_doublespinbox_set_locale(void* self, void* locale);
QLocale* q_doublespinbox_locale(void* self);
void q_doublespinbox_unset_locale(void* self);
bool q_doublespinbox_is_right_to_left(void* self);
bool q_doublespinbox_is_left_to_right(void* self);
void q_doublespinbox_set_focus(void* self);
bool q_doublespinbox_is_active_window(void* self);
void q_doublespinbox_activate_window(void* self);
void q_doublespinbox_clear_focus(void* self);
void q_doublespinbox_set_focus_with_reason(void* self, int64_t reason);
int64_t q_doublespinbox_focus_policy(void* self);
void q_doublespinbox_set_focus_policy(void* self, int64_t policy);
bool q_doublespinbox_has_focus(void* self);
void q_doublespinbox_set_tab_order(void* param1, void* param2);
void q_doublespinbox_set_focus_proxy(void* self, void* focusProxy);
QWidget* q_doublespinbox_focus_proxy(void* self);
int64_t q_doublespinbox_context_menu_policy(void* self);
void q_doublespinbox_set_context_menu_policy(void* self, int64_t policy);
void q_doublespinbox_grab_mouse(void* self);
void q_doublespinbox_grab_mouse_with_q_cursor(void* self, void* param1);
void q_doublespinbox_release_mouse(void* self);
void q_doublespinbox_grab_keyboard(void* self);
void q_doublespinbox_release_keyboard(void* self);
int32_t q_doublespinbox_grab_shortcut(void* self, void* key);
void q_doublespinbox_release_shortcut(void* self, int id);
void q_doublespinbox_set_shortcut_enabled(void* self, int id);
void q_doublespinbox_set_shortcut_auto_repeat(void* self, int id);
QWidget* q_doublespinbox_mouse_grabber();
QWidget* q_doublespinbox_keyboard_grabber();
bool q_doublespinbox_updates_enabled(void* self);
void q_doublespinbox_set_updates_enabled(void* self, bool enable);
QGraphicsProxyWidget* q_doublespinbox_graphics_proxy_widget(void* self);
void q_doublespinbox_update(void* self);
void q_doublespinbox_repaint(void* self);
void q_doublespinbox_update2(void* self, int x, int y, int w, int h);
void q_doublespinbox_update_with_q_rect(void* self, void* param1);
void q_doublespinbox_update_with_q_region(void* self, void* param1);
void q_doublespinbox_repaint2(void* self, int x, int y, int w, int h);
void q_doublespinbox_repaint_with_q_rect(void* self, void* param1);
void q_doublespinbox_repaint_with_q_region(void* self, void* param1);
void q_doublespinbox_set_hidden(void* self, bool hidden);
void q_doublespinbox_show(void* self);
void q_doublespinbox_hide(void* self);
void q_doublespinbox_show_minimized(void* self);
void q_doublespinbox_show_maximized(void* self);
void q_doublespinbox_show_full_screen(void* self);
void q_doublespinbox_show_normal(void* self);
bool q_doublespinbox_close(void* self);
void q_doublespinbox_raise(void* self);
void q_doublespinbox_lower(void* self);
void q_doublespinbox_stack_under(void* self, void* param1);
void q_doublespinbox_move(void* self, int x, int y);
void q_doublespinbox_move_with_q_point(void* self, void* param1);
void q_doublespinbox_resize(void* self, int w, int h);
void q_doublespinbox_resize_with_q_size(void* self, void* param1);
void q_doublespinbox_set_geometry(void* self, int x, int y, int w, int h);
void q_doublespinbox_set_geometry_with_geometry(void* self, void* geometry);
char* q_doublespinbox_save_geometry(void* self);
bool q_doublespinbox_restore_geometry(void* self, const char* geometry);
void q_doublespinbox_adjust_size(void* self);
bool q_doublespinbox_is_visible(void* self);
bool q_doublespinbox_is_visible_to(void* self, void* param1);
bool q_doublespinbox_is_hidden(void* self);
bool q_doublespinbox_is_minimized(void* self);
bool q_doublespinbox_is_maximized(void* self);
bool q_doublespinbox_is_full_screen(void* self);
int64_t q_doublespinbox_window_state(void* self);
void q_doublespinbox_set_window_state(void* self, int64_t state);
void q_doublespinbox_override_window_state(void* self, int64_t state);
QSizePolicy* q_doublespinbox_size_policy(void* self);
void q_doublespinbox_set_size_policy(void* self, void* sizePolicy);
void q_doublespinbox_set_size_policy2(void* self, int64_t horizontal, int64_t vertical);
QRegion* q_doublespinbox_visible_region(void* self);
void q_doublespinbox_set_contents_margins(void* self, int left, int top, int right, int bottom);
void q_doublespinbox_set_contents_margins_with_margins(void* self, void* margins);
QMargins* q_doublespinbox_contents_margins(void* self);
QRect* q_doublespinbox_contents_rect(void* self);
QLayout* q_doublespinbox_layout(void* self);
void q_doublespinbox_set_layout(void* self, void* layout);
void q_doublespinbox_update_geometry(void* self);
void q_doublespinbox_set_parent(void* self, void* parent);
void q_doublespinbox_set_parent2(void* self, void* parent, int64_t f);
void q_doublespinbox_scroll(void* self, int dx, int dy);
void q_doublespinbox_scroll2(void* self, int dx, int dy, void* param3);
QWidget* q_doublespinbox_focus_widget(void* self);
QWidget* q_doublespinbox_next_in_focus_chain(void* self);
QWidget* q_doublespinbox_previous_in_focus_chain(void* self);
bool q_doublespinbox_accept_drops(void* self);
void q_doublespinbox_set_accept_drops(void* self, bool on);
void q_doublespinbox_add_action(void* self, void* action);
void q_doublespinbox_add_actions(void* self, void* actions[]);
void q_doublespinbox_insert_actions(void* self, void* before, void* actions[]);
void q_doublespinbox_insert_action(void* self, void* before, void* action);
void q_doublespinbox_remove_action(void* self, void* action);
libqt_list /* of QAction* */ q_doublespinbox_actions(void* self);
QAction* q_doublespinbox_add_action_with_text(void* self, const char* text);
QAction* q_doublespinbox_add_action2(void* self, void* icon, const char* text);
QAction* q_doublespinbox_add_action3(void* self, const char* text, void* shortcut);
QAction* q_doublespinbox_add_action4(void* self, void* icon, const char* text, void* shortcut);
QWidget* q_doublespinbox_parent_widget(void* self);
void q_doublespinbox_set_window_flags(void* self, int64_t typeVal);
int64_t q_doublespinbox_window_flags(void* self);
void q_doublespinbox_set_window_flag(void* self, int64_t param1);
void q_doublespinbox_override_window_flags(void* self, int64_t typeVal);
int64_t q_doublespinbox_window_type(void* self);
QWidget* q_doublespinbox_find(uint64_t param1);
QWidget* q_doublespinbox_child_at(void* self, int x, int y);
QWidget* q_doublespinbox_child_at_with_q_point(void* self, void* p);
void q_doublespinbox_set_attribute(void* self, int64_t param1);
bool q_doublespinbox_test_attribute(void* self, int64_t param1);
void q_doublespinbox_ensure_polished(void* self);
bool q_doublespinbox_is_ancestor_of(void* self, void* child);
bool q_doublespinbox_auto_fill_background(void* self);
void q_doublespinbox_set_auto_fill_background(void* self, bool enabled);
QBackingStore* q_doublespinbox_backing_store(void* self);
QWindow* q_doublespinbox_window_handle(void* self);
QScreen* q_doublespinbox_screen(void* self);
void q_doublespinbox_set_screen(void* self, void* screen);
QWidget* q_doublespinbox_create_window_container(void* window);
void q_doublespinbox_window_title_changed(void* self, const char* title);
void q_doublespinbox_on_window_title_changed(void* self, void (*slot)(void*, const char*));
void q_doublespinbox_window_icon_changed(void* self, void* icon);
void q_doublespinbox_on_window_icon_changed(void* self, void (*slot)(void*, void*));
void q_doublespinbox_window_icon_text_changed(void* self, const char* iconText);
void q_doublespinbox_on_window_icon_text_changed(void* self, void (*slot)(void*, const char*));
void q_doublespinbox_custom_context_menu_requested(void* self, void* pos);
void q_doublespinbox_on_custom_context_menu_requested(void* self, void (*slot)(void*, void*));
int64_t q_doublespinbox_input_method_hints(void* self);
void q_doublespinbox_set_input_method_hints(void* self, int64_t hints);
void q_doublespinbox_render2(void* self, void* target, void* targetOffset);
void q_doublespinbox_render3(void* self, void* target, void* targetOffset, void* sourceRegion);
void q_doublespinbox_render4(void* self, void* target, void* targetOffset, void* sourceRegion, int64_t renderFlags);
void q_doublespinbox_render22(void* self, void* painter, void* targetOffset);
void q_doublespinbox_render32(void* self, void* painter, void* targetOffset, void* sourceRegion);
void q_doublespinbox_render42(void* self, void* painter, void* targetOffset, void* sourceRegion, int64_t renderFlags);
QPixmap* q_doublespinbox_grab1(void* self, void* rectangle);
void q_doublespinbox_grab_gesture2(void* self, int64_t typeVal, int64_t flags);
int32_t q_doublespinbox_grab_shortcut2(void* self, void* key, int64_t context);
void q_doublespinbox_set_shortcut_enabled2(void* self, int id, bool enable);
void q_doublespinbox_set_shortcut_auto_repeat2(void* self, int id, bool enable);
void q_doublespinbox_set_window_flag2(void* self, int64_t param1, bool on);
void q_doublespinbox_set_attribute2(void* self, int64_t param1, bool on);
QWidget* q_doublespinbox_create_window_container2(void* window, void* parent);
QWidget* q_doublespinbox_create_window_container3(void* window, void* parent, int64_t flags);
const char* q_doublespinbox_object_name(void* self);
void q_doublespinbox_set_object_name(void* self, const char* name);
bool q_doublespinbox_is_widget_type(void* self);
bool q_doublespinbox_is_window_type(void* self);
bool q_doublespinbox_is_quick_item_type(void* self);
bool q_doublespinbox_signals_blocked(void* self);
bool q_doublespinbox_block_signals(void* self, bool b);
QThread* q_doublespinbox_thread(void* self);
void q_doublespinbox_move_to_thread(void* self, void* thread);
int32_t q_doublespinbox_start_timer(void* self, int interval);
void q_doublespinbox_kill_timer(void* self, int id);
libqt_list /* of QObject* */ q_doublespinbox_children(void* self);
void q_doublespinbox_install_event_filter(void* self, void* filterObj);
void q_doublespinbox_remove_event_filter(void* self, void* obj);
QMetaObject__Connection* q_doublespinbox_connect(void* sender, void* signal, void* receiver, void* method);
QMetaObject__Connection* q_doublespinbox_connect2(void* self, void* sender, const char* signal, const char* member);
bool q_doublespinbox_disconnect(void* sender, void* signal, void* receiver, void* member);
bool q_doublespinbox_disconnect_with_q_meta_object_connection(void* param1);
void q_doublespinbox_dump_object_tree(void* self);
void q_doublespinbox_dump_object_info(void* self);
bool q_doublespinbox_set_property(void* self, const char* name, void* value);
QVariant* q_doublespinbox_property(void* self, const char* name);
const char** q_doublespinbox_dynamic_property_names(void* self);
QBindingStorage* q_doublespinbox_binding_storage(void* self);
QBindingStorage* q_doublespinbox_binding_storage2(void* self);
void q_doublespinbox_destroyed(void* self);
void q_doublespinbox_on_destroyed(void* self, void (*slot)(void*));
QObject* q_doublespinbox_parent(void* self);
bool q_doublespinbox_inherits(void* self, const char* classname);
void q_doublespinbox_delete_later(void* self);
int32_t q_doublespinbox_start_timer2(void* self, int interval, int64_t timerType);
QMetaObject__Connection* q_doublespinbox_connect5(void* sender, void* signal, void* receiver, void* method, int64_t typeVal);
QMetaObject__Connection* q_doublespinbox_connect4(void* self, void* sender, const char* signal, const char* member, int64_t typeVal);
void q_doublespinbox_destroyed1(void* self, void* param1);
void q_doublespinbox_on_destroyed1(void* self, void (*slot)(void*, void*));
bool q_doublespinbox_painting_active(void* self);
int32_t q_doublespinbox_width_m_m(void* self);
int32_t q_doublespinbox_height_m_m(void* self);
int32_t q_doublespinbox_logical_dpi_x(void* self);
int32_t q_doublespinbox_logical_dpi_y(void* self);
int32_t q_doublespinbox_physical_dpi_x(void* self);
int32_t q_doublespinbox_physical_dpi_y(void* self);
double q_doublespinbox_device_pixel_ratio(void* self);
double q_doublespinbox_device_pixel_ratio_f(void* self);
int32_t q_doublespinbox_color_count(void* self);
int32_t q_doublespinbox_depth(void* self);
double q_doublespinbox_device_pixel_ratio_f_scale();
QSize* q_doublespinbox_size_hint(void* self);
QSize* q_doublespinbox_qbase_size_hint(void* self);
void q_doublespinbox_on_size_hint(void* self, QSize* (*slot)());
QSize* q_doublespinbox_minimum_size_hint(void* self);
QSize* q_doublespinbox_qbase_minimum_size_hint(void* self);
void q_doublespinbox_on_minimum_size_hint(void* self, QSize* (*slot)());
bool q_doublespinbox_event(void* self, void* event);
bool q_doublespinbox_qbase_event(void* self, void* event);
void q_doublespinbox_on_event(void* self, bool (*slot)(void*, void*));
QVariant* q_doublespinbox_input_method_query(void* self, int64_t param1);
QVariant* q_doublespinbox_qbase_input_method_query(void* self, int64_t param1);
void q_doublespinbox_on_input_method_query(void* self, QVariant* (*slot)(void*, int64_t));
void q_doublespinbox_step_by(void* self, int steps);
void q_doublespinbox_qbase_step_by(void* self, int steps);
void q_doublespinbox_on_step_by(void* self, void (*slot)(void*, int));
void q_doublespinbox_clear(void* self);
void q_doublespinbox_qbase_clear(void* self);
void q_doublespinbox_on_clear(void* self, void (*slot)());
void q_doublespinbox_resize_event(void* self, void* event);
void q_doublespinbox_qbase_resize_event(void* self, void* event);
void q_doublespinbox_on_resize_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_key_press_event(void* self, void* event);
void q_doublespinbox_qbase_key_press_event(void* self, void* event);
void q_doublespinbox_on_key_press_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_key_release_event(void* self, void* event);
void q_doublespinbox_qbase_key_release_event(void* self, void* event);
void q_doublespinbox_on_key_release_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_wheel_event(void* self, void* event);
void q_doublespinbox_qbase_wheel_event(void* self, void* event);
void q_doublespinbox_on_wheel_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_focus_in_event(void* self, void* event);
void q_doublespinbox_qbase_focus_in_event(void* self, void* event);
void q_doublespinbox_on_focus_in_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_focus_out_event(void* self, void* event);
void q_doublespinbox_qbase_focus_out_event(void* self, void* event);
void q_doublespinbox_on_focus_out_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_context_menu_event(void* self, void* event);
void q_doublespinbox_qbase_context_menu_event(void* self, void* event);
void q_doublespinbox_on_context_menu_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_change_event(void* self, void* event);
void q_doublespinbox_qbase_change_event(void* self, void* event);
void q_doublespinbox_on_change_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_close_event(void* self, void* event);
void q_doublespinbox_qbase_close_event(void* self, void* event);
void q_doublespinbox_on_close_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_hide_event(void* self, void* event);
void q_doublespinbox_qbase_hide_event(void* self, void* event);
void q_doublespinbox_on_hide_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_mouse_press_event(void* self, void* event);
void q_doublespinbox_qbase_mouse_press_event(void* self, void* event);
void q_doublespinbox_on_mouse_press_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_mouse_release_event(void* self, void* event);
void q_doublespinbox_qbase_mouse_release_event(void* self, void* event);
void q_doublespinbox_on_mouse_release_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_mouse_move_event(void* self, void* event);
void q_doublespinbox_qbase_mouse_move_event(void* self, void* event);
void q_doublespinbox_on_mouse_move_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_timer_event(void* self, void* event);
void q_doublespinbox_qbase_timer_event(void* self, void* event);
void q_doublespinbox_on_timer_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_paint_event(void* self, void* event);
void q_doublespinbox_qbase_paint_event(void* self, void* event);
void q_doublespinbox_on_paint_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_show_event(void* self, void* event);
void q_doublespinbox_qbase_show_event(void* self, void* event);
void q_doublespinbox_on_show_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_init_style_option(void* self, void* option);
void q_doublespinbox_qbase_init_style_option(void* self, void* option);
void q_doublespinbox_on_init_style_option(void* self, void (*slot)(void*, void*));
int64_t q_doublespinbox_step_enabled(void* self);
int64_t q_doublespinbox_qbase_step_enabled(void* self);
void q_doublespinbox_on_step_enabled(void* self, int64_t (*slot)());
int32_t q_doublespinbox_dev_type(void* self);
int32_t q_doublespinbox_qbase_dev_type(void* self);
void q_doublespinbox_on_dev_type(void* self, int32_t (*slot)());
void q_doublespinbox_set_visible(void* self, bool visible);
void q_doublespinbox_qbase_set_visible(void* self, bool visible);
void q_doublespinbox_on_set_visible(void* self, void (*slot)(void*, bool));
int32_t q_doublespinbox_height_for_width(void* self, int param1);
int32_t q_doublespinbox_qbase_height_for_width(void* self, int param1);
void q_doublespinbox_on_height_for_width(void* self, int32_t (*slot)(void*, int));
bool q_doublespinbox_has_height_for_width(void* self);
bool q_doublespinbox_qbase_has_height_for_width(void* self);
void q_doublespinbox_on_has_height_for_width(void* self, bool (*slot)());
QPaintEngine* q_doublespinbox_paint_engine(void* self);
QPaintEngine* q_doublespinbox_qbase_paint_engine(void* self);
void q_doublespinbox_on_paint_engine(void* self, QPaintEngine* (*slot)());
void q_doublespinbox_mouse_double_click_event(void* self, void* event);
void q_doublespinbox_qbase_mouse_double_click_event(void* self, void* event);
void q_doublespinbox_on_mouse_double_click_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_enter_event(void* self, void* event);
void q_doublespinbox_qbase_enter_event(void* self, void* event);
void q_doublespinbox_on_enter_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_leave_event(void* self, void* event);
void q_doublespinbox_qbase_leave_event(void* self, void* event);
void q_doublespinbox_on_leave_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_move_event(void* self, void* event);
void q_doublespinbox_qbase_move_event(void* self, void* event);
void q_doublespinbox_on_move_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_tablet_event(void* self, void* event);
void q_doublespinbox_qbase_tablet_event(void* self, void* event);
void q_doublespinbox_on_tablet_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_action_event(void* self, void* event);
void q_doublespinbox_qbase_action_event(void* self, void* event);
void q_doublespinbox_on_action_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_drag_enter_event(void* self, void* event);
void q_doublespinbox_qbase_drag_enter_event(void* self, void* event);
void q_doublespinbox_on_drag_enter_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_drag_move_event(void* self, void* event);
void q_doublespinbox_qbase_drag_move_event(void* self, void* event);
void q_doublespinbox_on_drag_move_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_drag_leave_event(void* self, void* event);
void q_doublespinbox_qbase_drag_leave_event(void* self, void* event);
void q_doublespinbox_on_drag_leave_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_drop_event(void* self, void* event);
void q_doublespinbox_qbase_drop_event(void* self, void* event);
void q_doublespinbox_on_drop_event(void* self, void (*slot)(void*, void*));
bool q_doublespinbox_native_event(void* self, const char* eventType, void* message, intptr_t* result);
bool q_doublespinbox_qbase_native_event(void* self, const char* eventType, void* message, intptr_t* result);
void q_doublespinbox_on_native_event(void* self, bool (*slot)(void*, const char*, void*, intptr_t*));
int32_t q_doublespinbox_metric(void* self, int64_t param1);
int32_t q_doublespinbox_qbase_metric(void* self, int64_t param1);
void q_doublespinbox_on_metric(void* self, int32_t (*slot)(void*, int64_t));
void q_doublespinbox_init_painter(void* self, void* painter);
void q_doublespinbox_qbase_init_painter(void* self, void* painter);
void q_doublespinbox_on_init_painter(void* self, void (*slot)(void*, void*));
QPaintDevice* q_doublespinbox_redirected(void* self, void* offset);
QPaintDevice* q_doublespinbox_qbase_redirected(void* self, void* offset);
void q_doublespinbox_on_redirected(void* self, QPaintDevice* (*slot)(void*, void*));
QPainter* q_doublespinbox_shared_painter(void* self);
QPainter* q_doublespinbox_qbase_shared_painter(void* self);
void q_doublespinbox_on_shared_painter(void* self, QPainter* (*slot)());
void q_doublespinbox_input_method_event(void* self, void* param1);
void q_doublespinbox_qbase_input_method_event(void* self, void* param1);
void q_doublespinbox_on_input_method_event(void* self, void (*slot)(void*, void*));
bool q_doublespinbox_focus_next_prev_child(void* self, bool next);
bool q_doublespinbox_qbase_focus_next_prev_child(void* self, bool next);
void q_doublespinbox_on_focus_next_prev_child(void* self, bool (*slot)(void*, bool));
bool q_doublespinbox_event_filter(void* self, void* watched, void* event);
bool q_doublespinbox_qbase_event_filter(void* self, void* watched, void* event);
void q_doublespinbox_on_event_filter(void* self, bool (*slot)(void*, void*, void*));
void q_doublespinbox_child_event(void* self, void* event);
void q_doublespinbox_qbase_child_event(void* self, void* event);
void q_doublespinbox_on_child_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_custom_event(void* self, void* event);
void q_doublespinbox_qbase_custom_event(void* self, void* event);
void q_doublespinbox_on_custom_event(void* self, void (*slot)(void*, void*));
void q_doublespinbox_connect_notify(void* self, void* signal);
void q_doublespinbox_qbase_connect_notify(void* self, void* signal);
void q_doublespinbox_on_connect_notify(void* self, void (*slot)(void*, void*));
void q_doublespinbox_disconnect_notify(void* self, void* signal);
void q_doublespinbox_qbase_disconnect_notify(void* self, void* signal);
void q_doublespinbox_on_disconnect_notify(void* self, void (*slot)(void*, void*));
QLineEdit* q_doublespinbox_line_edit(void* self);
QLineEdit* q_doublespinbox_qbase_line_edit(void* self);
void q_doublespinbox_on_line_edit(void* self, QLineEdit* (*slot)());
void q_doublespinbox_set_line_edit(void* self, void* edit);
void q_doublespinbox_qbase_set_line_edit(void* self, void* edit);
void q_doublespinbox_on_set_line_edit(void* self, void (*slot)(void*, void*));
void q_doublespinbox_update_micro_focus(void* self);
void q_doublespinbox_qbase_update_micro_focus(void* self);
void q_doublespinbox_on_update_micro_focus(void* self, void (*slot)());
void q_doublespinbox_create(void* self);
void q_doublespinbox_qbase_create(void* self);
void q_doublespinbox_on_create(void* self, void (*slot)());
void q_doublespinbox_destroy(void* self);
void q_doublespinbox_qbase_destroy(void* self);
void q_doublespinbox_on_destroy(void* self, void (*slot)());
bool q_doublespinbox_focus_next_child(void* self);
bool q_doublespinbox_qbase_focus_next_child(void* self);
void q_doublespinbox_on_focus_next_child(void* self, bool (*slot)());
bool q_doublespinbox_focus_previous_child(void* self);
bool q_doublespinbox_qbase_focus_previous_child(void* self);
void q_doublespinbox_on_focus_previous_child(void* self, bool (*slot)());
QObject* q_doublespinbox_sender(void* self);
QObject* q_doublespinbox_qbase_sender(void* self);
void q_doublespinbox_on_sender(void* self, QObject* (*slot)());
int32_t q_doublespinbox_sender_signal_index(void* self);
int32_t q_doublespinbox_qbase_sender_signal_index(void* self);
void q_doublespinbox_on_sender_signal_index(void* self, int32_t (*slot)());
int32_t q_doublespinbox_receivers(void* self, const char* signal);
int32_t q_doublespinbox_qbase_receivers(void* self, const char* signal);
void q_doublespinbox_on_receivers(void* self, int32_t (*slot)(void*, const char*));
bool q_doublespinbox_is_signal_connected(void* self, void* signal);
bool q_doublespinbox_qbase_is_signal_connected(void* self, void* signal);
void q_doublespinbox_on_is_signal_connected(void* self, bool (*slot)(void*, void*));
void q_doublespinbox_delete(void* self);

#endif
